[
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-22T00:59:37.551Z",
    "last_attempt": "2025-06-04T18:14:04.519Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 2,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-04-04T00:00:00Z",
    "last_attempt": "2025-04-04T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 3,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-04-04T00:00:00Z",
    "last_attempt": "2025-04-04T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 4,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 13,
    "complete": true,
    "completed_on": "2025-04-04T00:00:00Z",
    "first_attempt": "2025-04-04T00:00:00Z",
    "last_attempt": "2025-04-04T00:00:00Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse {\\n\\n    console.log(\"I am binging netflix!\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 5,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-04-05T00:00:00Z",
    "first_attempt": "2025-04-04T00:00:00Z",
    "last_attempt": "2025-04-05T00:00:00Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    // Add your code here\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n}\\nif (temperature < 95 && temperature >= 75){\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n}\\nif (temperature < 75 && temperature >= 50){\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\nif (temperature < 50 && temperature >= 35){\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature > 35){\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\"\\n}\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 6,
  "fields": {
    "learner_github_id": "166757460",
    "learner_name": "Jana Ismail",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-04-04T00:00:00Z",
    "first_attempt": null,
    "last_attempt": "2025-04-04T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 7,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-04-05T00:00:00Z",
    "first_attempt": null,
    "last_attempt": "2025-04-05T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 8,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-04-05T00:00:00Z",
    "first_attempt": null,
    "last_attempt": "2025-04-05T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 9,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-04-05T00:00:00Z",
    "first_attempt": null,
    "last_attempt": "2025-04-05T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 10,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-04-05T00:00:00Z",
    "first_attempt": null,
    "last_attempt": "2025-04-05T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 11,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-04-05T00:00:00Z",
    "first_attempt": "2025-04-05T00:00:00Z",
    "last_attempt": "2025-04-05T00:00:00Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 146\\nlet marchBill = 147\\nlet aprilBill = 148\\nlet mayBill = 149\\nlet juneBill = 150\\nlet julyBill = 151\\nlet augustBill = 152\\nlet septemberBill = 153\\nlet octoberBill = 154\\nlet novemberBill = 155\\nlet decemberBill = 156\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 12,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 66,
    "complete": true,
    "completed_on": "2025-04-09T00:00:00Z",
    "first_attempt": "2025-04-05T00:00:00Z",
    "last_attempt": "2025-04-09T00:00:00Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\n\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110){\\n    photoStorage = \"Photo Album\"\\n}\\nelse if (totalPhotos < 110 && totalPhotos >= 50){\\n    photoStorage = \"Shoe Box\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos){\\n    albumColor = \"plum\"\\n}\\n\\nelse{\\n    albumColor = \"gray\"\\n}\\n\\n\\n// Create the expected output string using string interpolation\\nconst output = (`\\nThere are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n)\\n\\n// Log your output\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 13,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-04-06T00:00:00Z",
    "first_attempt": "2025-04-06T00:00:00Z",
    "last_attempt": "2025-04-06T00:00:00Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Lenovo laptop\"\\nconst phone = \"Android device\"\\nconst television = \"Vizio LED\"\\nconst refrigerator = \"Samsung\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following devices: My ${computer}, my ${phone}, my ${television}, and my ${refrigerator}.`\\nconsole.log(allElectronics)\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 14,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-04-09T00:00:00Z",
    "first_attempt": "2025-04-09T00:00:00Z",
    "last_attempt": "2025-04-09T00:00:00Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nconst combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 15,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-04-06T00:00:00Z",
    "last_attempt": "2025-04-06T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 19,
  "fields": {
    "learner_github_id": "176324848",
    "learner_name": "Joshua Taylor Albright",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-04-07T00:00:00Z",
    "first_attempt": null,
    "last_attempt": "2025-04-07T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 20,
  "fields": {
    "learner_github_id": "176324848",
    "learner_name": "Joshua Taylor Albright",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-04-07T00:00:00Z",
    "first_attempt": "2025-04-07T00:00:00Z",
    "last_attempt": "2025-04-07T00:00:00Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 130\\nlet marchBill = 130\\nlet aprilBill = 130\\nlet mayBill = 130\\nlet juneBill = 130\\nlet julyBill = 130\\nlet augustBill = 130\\nlet septemberBill = 130\\nlet octoberBill = 130\\nlet novemberBill = 130\\nlet decemberBill = 130\\nlet yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill\\n+ septemberBill + octoberBill + novemberBill + decemberBill\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 21,
  "fields": {
    "learner_github_id": "176324848",
    "learner_name": "Joshua Taylor Albright",
    "title": "Data Types",
    "slug": "leonids-data-types",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-04-07T00:00:00Z",
    "first_attempt": "2025-04-07T00:00:00Z",
    "last_attempt": "2025-04-07T00:00:00Z",
    "completed_code": "{'code': 'function createToy(name, category, ageRecommendation, isBatteryOperated, features, dimensions) {\\n    return {\\n        name,\\n        category,\\n        ageRecommendation,\\n        isBatteryOperated,\\n        features,\\n        dimensions\\n    };\\n}\\n\\n// TODO: Call createToy with the correct data types\\nconst myToy = createToy(\"Todd\", \"Children\", 5, true, [\"karate chop action\", \"speech dialogue\"], {width: 1024, height: 880});'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 22,
  "fields": {
    "learner_github_id": "176324848",
    "learner_name": "Joshua Taylor Albright",
    "title": "Representing Toys as Objects",
    "slug": "leonids-objects",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-04-07T00:00:00Z",
    "last_attempt": "2025-04-07T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 23,
  "fields": {
    "learner_github_id": "176324848",
    "learner_name": "Joshua Taylor Albright",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-04-07T00:00:00Z",
    "last_attempt": "2025-04-07T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 24,
  "fields": {
    "learner_github_id": "176324848",
    "learner_name": "Joshua Taylor Albright",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-04-07T00:00:00Z",
    "last_attempt": "2025-04-07T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 25,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-04-08T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 26,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 5,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-04-09T00:00:00Z",
    "last_attempt": "2025-04-09T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 27,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-04-09T00:00:00Z",
    "first_attempt": "2025-04-09T00:00:00Z",
    "last_attempt": "2025-04-09T00:00:00Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true ) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse {\\n    console.log(\"better watch N\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 28,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-04-09T00:00:00Z",
    "first_attempt": "2025-04-09T00:00:00Z",
    "last_attempt": "2025-04-09T00:00:00Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\"\\n}\\n\\nconsole.log(`I need to wear ${torsoClothing}, ${legClothing}, ${footWear}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 29,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 9,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-04-09T00:00:00Z",
    "last_attempt": "2025-04-09T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 30,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-04-09T00:00:00Z",
    "first_attempt": "2025-04-09T00:00:00Z",
    "last_attempt": "2025-04-09T00:00:00Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 31,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-04-09T00:00:00Z",
    "first_attempt": "2025-04-09T00:00:00Z",
    "last_attempt": "2025-04-09T00:00:00Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 32,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-04-10T00:00:00Z",
    "first_attempt": "2025-04-10T00:00:00Z",
    "last_attempt": "2025-04-10T00:00:00Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const topic of topics) {\\n    console.log(topic)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 33,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-04-10T00:00:00Z",
    "first_attempt": "2025-04-10T00:00:00Z",
    "last_attempt": "2025-04-10T00:00:00Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunk of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 34,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-04-10T00:00:00Z",
    "first_attempt": "2025-04-10T00:00:00Z",
    "last_attempt": "2025-04-10T00:00:00Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n  if (ingredient === \"beef patty\"){\\n    finishedFood.push (\"burger\")\\n  }\\n  else if (ingredient === \"egg\"){\\n    finishedFood.push (\"biscuit\")\\n  }\\n  else if (ingredient === \"potato\"){\\n    finishedFood.push (\"fries\")\\n  }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 35,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-04-12T00:00:00Z",
    "first_attempt": "2025-04-12T00:00:00Z",
    "last_attempt": "2025-04-12T00:00:00Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expense of monthlyExpenses) {\\n    totalExpense += expense\\n  // Add the current monthly cost to the value of totalExpense\\n\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 36,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-04-12T00:00:00Z",
    "first_attempt": "2025-04-12T00:00:00Z",
    "last_attempt": "2025-04-12T00:00:00Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 100, 256, 246, 212, 112 ]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\n    totalMiles += miles\\n\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log (`I average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 37,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-04-12T00:00:00Z",
    "first_attempt": "2025-04-12T00:00:00Z",
    "last_attempt": "2025-04-12T00:00:00Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours){\\n    if (hour < 7) {\\n        grumpyHours.push (hour)\\n    }\\n    else{\\n        happyHours.push (hour)\\n    }\\n}\\n\\nconsole.log (`I was grumpy ${grumpyHours.length} days.\\nI was happy ${happyHours.length} days.`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 38,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-04-15T00:00:00Z",
    "first_attempt": "2025-04-13T00:00:00Z",
    "last_attempt": "2025-04-15T00:00:00Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")){\\n    light++\\n  }\\n  // Add your logic here\\n\\n  if (coffee.includes(\"medium\")){\\n  medium ++\\n  }\\n  if (coffee.includes(\"toasty\")|| coffee.includes(\"dark\")){\\n    toastyDark ++\\n  }\\n}\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 39,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-04-14T00:00:00Z",
    "first_attempt": "2025-04-14T00:00:00Z",
    "last_attempt": "2025-04-14T00:00:00Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\",\"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\" ]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 40,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-04-14T00:00:00Z",
    "first_attempt": "2025-04-14T00:00:00Z",
    "last_attempt": "2025-04-14T00:00:00Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 41,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 42,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-04-14T00:00:00Z",
    "last_attempt": "2025-04-14T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 43,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-04-14T00:00:00Z",
    "last_attempt": "2025-04-14T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 44,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 3,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-04-14T00:00:00Z",
    "last_attempt": "2025-04-14T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 45,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-04-14T00:00:00Z",
    "last_attempt": "2025-04-14T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 46,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")) {\\n  light++\\n  }\\n  if (coffee.includes(\"medium\")) {\\n    medium++\\n  }\\n  if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")) {\\n    toastyDark++\\n  }\\n\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 47,
  "fields": {
    "learner_github_id": "125929943",
    "learner_name": "Mike Sheets",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-04-14T00:00:00Z",
    "first_attempt": "2025-04-14T00:00:00Z",
    "last_attempt": "2025-04-14T00:00:00Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (chunk of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 48,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-04-15T00:00:00Z",
    "first_attempt": "2025-04-15T00:00:00Z",
    "last_attempt": "2025-04-15T00:00:00Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n//console.log (disorderArray)\\n//console.log (htmlString)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 49,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-10T13:42:05.123Z",
    "first_attempt": null,
    "last_attempt": "2025-06-10T13:42:05.123Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 50,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T13:52:16.172Z",
    "first_attempt": "2025-06-10T13:52:16.171Z",
    "last_attempt": "2025-06-10T13:52:16.172Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 162\\nlet marchBill = 150\\nlet aprilBill = 150\\nlet mayBill = 145\\nlet juneBill = 176\\nlet julyBill = 134\\nlet augustBill = 167\\nlet septemberBill = 123\\nlet octoberBill = 134\\nlet novemberBill = 120\\nlet decemberBill = 150\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 51,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T13:59:24.191Z",
    "first_attempt": "2025-06-10T13:58:41.128Z",
    "last_attempt": "2025-06-10T13:59:24.191Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"IMac\"\\nconst phone = \"Iphone\"\\nconst television = \"50 inch Samsung\"\\nconst refrigerator = \"GE Refridgerator\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devicies. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}.`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 52,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Undefined",
    "slug": "html-intro",
    "attempts": 3,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-04-17T00:00:00Z",
    "last_attempt": "2025-07-02T02:31:27.047Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 53,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Undefined",
    "slug": "html-elements",
    "attempts": 205,
    "complete": true,
    "completed_on": "2025-07-01T12:20:03.252Z",
    "first_attempt": "2025-04-17T00:00:00Z",
    "last_attempt": "2025-07-01T12:20:03.252Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n\\n  <main>\\n    <article>\\n      <h1>Steve</h1>\\n      <section>I did stuff before this</section>\\n      <section>I want a better job</section>\\n    </article>\\n  </main>\\n\\n  <footer>\\n    Steve, 2025, steve@stevebrownlee.com\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 54,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-10T14:29:58.238Z",
    "first_attempt": "2025-06-10T14:09:19.165Z",
    "last_attempt": "2025-06-10T14:29:58.238Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 55,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-06-12T15:21:56.730Z",
    "first_attempt": "2025-06-12T15:00:06.166Z",
    "last_attempt": "2025-06-12T15:21:56.730Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\nconsole.log(statement)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 56,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Undefined",
    "slug": "html-intro",
    "attempts": 405,
    "complete": true,
    "completed_on": "2025-06-26T23:15:08.606Z",
    "first_attempt": "2025-04-18T00:00:00Z",
    "last_attempt": "2025-06-26T23:15:08.606Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n  <h1>How I Became A Software Developer</h1>\\n\\n  <article>\\n    <h2>Nashville Software School</h2>\\n\\n    <section>\\n      <p>My journey into software development began when I enrolled at Nashville Software School. The instructors were amazing and the curriculum was challenging but rewarding.</p>\\n    </section>\\n\\n    <section>\\n      <p>I learned the following skills</p>\\n      <ol>\\n        <li>Variables</li>\\n        <li>Arrays</li>\\n        <li>Objects</li>\\n        <li>Functions</li>\\n        <li>HTML</li>\\n        <li>CSS</li>\\n      </ol>\\n    </section>\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 57,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Undefined",
    "slug": "string-methods",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-27T00:33:31.908Z",
    "first_attempt": "2025-04-18T15:17:21.199Z",
    "last_attempt": "2025-06-27T00:33:31.908Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \",\"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.substring(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 58,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-04-20T00:00:00Z",
    "first_attempt": "2025-04-20T00:00:00Z",
    "last_attempt": "2025-04-20T00:00:00Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []        // \"Clothing\"\\nfor (const clothes of monthlyExpenses) {\\n  if (clothes.includes ((\"Clothing\"))) {\\n    clothing.push(clothes)\\n  }\\n}\\nconst entertainment = []   // \"Movie\"\\nfor (const movie of monthlyExpenses) {\\n  if (movie.includes((\"Movie\"))){\\n        entertainment.push(movie)\\n  }\\n}\\n\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nfor (const foods of monthlyExpenses){\\n        if (foods.includes(\"Groceries\") || foods.includes(\"Restaurant\")){\\n                food.push(foods)\\n        }\\n}\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nfor (const gas of monthlyExpenses){\\n        if (gas.includes(\"Fuel\") || gas.includes(\"Gas\")){\\n                fuel.push(gas)\\n        }\\n}\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nfor (const rides of monthlyExpenses){\\n        if (rides.includes(\"Lyft\") || rides.includes(\"Uber\")){\\n                travel.push(rides)\\n        }\\n}\\nconst utilities = []       // \"Utility\"\\nfor (const utility of monthlyExpenses){\\n        if (utility.includes(\"Utility\")){\\n                utilities.push(utility)\\n        }\\n}\\nconst largePurchases = []  // Expenses over 100.00\\nfor (const big of monthlyExpenses){\\n        const [, rightValue] = big.split (\":\")\\n        parseFloat(rightValue)\\n        if (rightValue > 100) {\\n                largePurchases.push(rightValue)\\n        }\\n        }\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nfor (const total of monthlyExpenses){\\n        const [, right] = total.split (\":\")\\n        const rightValue = parseFloat(right)\\n        \\n        totalExpenses += rightValue\\n}\\n\\nlet averageExpense = 0\\naverageExpense = totalExpenses/monthlyExpenses.length\\n\\n/*\\n Use your algorithmic thinking for the steps to\\n categorize, total, and average the expenses.\\n \\n\\n Be patient and take your time. This is challenging.\\n*/\\n\\nconsole.log (clothing)\\nconsole.log (entertainment)\\nconsole.log (food)\\nconsole.log (fuel)\\nconsole.log (travel)\\nconsole.log (utilities)\\nconsole.log (largePurchases)\\nconsole.log (totalExpenses)\\nconsole.log (averageExpense)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 59,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-04-20T00:00:00Z",
    "first_attempt": "2025-04-20T00:00:00Z",
    "last_attempt": "2025-04-20T00:00:00Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n        name : \"Jeremy Landy\", \\n        location: \"Phoenix, AR\",\\n        gender: \"male\", \\n        age: 31\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 60,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-04-20T00:00:00Z",
    "first_attempt": "2025-04-20T00:00:00Z",
    "last_attempt": "2025-04-20T00:00:00Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n        color: \"yellow\", \\n        stemLength: 9, \\n        growingSeason: \"Spring\", \\n        thorny: false\\n\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n        color: \"red\", \\n        stemLength: 12, \\n        growingSeason: \"Spring\", \\n        thorny: true\\n\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 61,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-04-22T00:00:00Z",
    "first_attempt": "2025-04-20T00:00:00Z",
    "last_attempt": "2025-04-22T00:00:00Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\n\\nfor (const scheduleBuilder of appointments){\\n        schedule += `Patient ${scheduleBuilder.firstName} ${scheduleBuilder.lastName} has an appointment at ${scheduleBuilder.appointmentTime}\\\\n`\\n}\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 62,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-04-22T00:00:00Z",
    "first_attempt": "2025-04-22T00:00:00Z",
    "last_attempt": "2025-04-22T00:00:00Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 63,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 4,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-04-22T00:00:00Z",
    "last_attempt": "2025-04-22T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 71,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:34:24.331Z",
    "first_attempt": "2025-06-03T17:34:24.331Z",
    "last_attempt": "2025-06-03T17:34:24.331Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\n\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 72,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Undefined",
    "slug": "math-operations",
    "attempts": 4,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-03-12T00:00:00Z",
    "last_attempt": "2025-04-30T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 73,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:40:39.585Z",
    "first_attempt": "2025-06-03T17:40:39.585Z",
    "last_attempt": "2025-06-03T17:40:39.585Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 74,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:42:10.224Z",
    "first_attempt": "2025-06-03T17:42:10.224Z",
    "last_attempt": "2025-06-03T17:42:10.224Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 75,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 147,
    "complete": true,
    "completed_on": "2025-05-05T02:47:13.549Z",
    "first_attempt": "2025-05-05T02:30:52.613Z",
    "last_attempt": "2025-05-05T02:47:13.549Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n     <h1>How I Became A Software Developer</h1>\\n     <article>\\n      <h2>Nashville Software School</h2>\\n      <section>any text you want about attending NSS</section>\\n      <section>\\n        <p>I learned the following skills</p>\\n        <ol>\\n          <li>Variables</li>\\n          <li>Arrays</li>\\n          <li>Objects</li>\\n          <li>Functions</li>\\n          <li>HTML</li>\\n          <li>CSS</li>\\n        </ol>\\n      </section>\\n     </article>\\n\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n/* Add your styles here */\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 76,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Introduction to HTML",
    "slug": "variables-intro",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-04-30T00:00:00Z",
    "first_attempt": "2025-04-30T00:00:00Z",
    "last_attempt": "2025-04-30T00:00:00Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nlet februaryBill = 100;\\nlet marchBill = 100;\\nlet aprilBill = 100;\\nlet mayBill = 100;\\nlet juneBill = 100;\\nlet julyBill = 100;\\nlet augustBill = 100;\\nlet septemberBill = 100;\\nlet octoberBill = 100;\\nlet novemberBill = 100;\\nlet decemberBill = 100;\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 77,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-04-30T00:00:00Z",
    "first_attempt": "2025-04-30T00:00:00Z",
    "last_attempt": "2025-04-30T00:00:00Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Omen\"\\nconst phone = \"iPhone 14\"\\nconst television = \"Samsung\"\\nconst refrigerator = \"Fridgedaire\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television} television, my ${computer} computer, my ${refrigerator} refrigerator, and my ${phone} phone`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 78,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-04-30T00:00:00Z",
    "first_attempt": "2025-04-30T00:00:00Z",
    "last_attempt": "2025-04-30T00:00:00Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -=fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 79,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 13,
    "complete": true,
    "completed_on": "2025-05-13T16:11:33.279Z",
    "first_attempt": "2025-04-29T22:24:13.626Z",
    "last_attempt": "2025-05-13T16:11:33.279Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly incomeI \\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\nconsole.log(statement);\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 80,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-04-30T00:00:00Z",
    "first_attempt": null,
    "last_attempt": "2025-04-30T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 81,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-04-30T00:00:00Z",
    "first_attempt": null,
    "last_attempt": "2025-04-30T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 82,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-04-30T00:00:00Z",
    "first_attempt": null,
    "last_attempt": "2025-04-30T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 83,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-04-30T00:00:00Z",
    "first_attempt": null,
    "last_attempt": "2025-04-30T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 84,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-04-24T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\n// Monthly electric bills\\nlet januaryBill = 145\\nlet februaryBill = 155\\nlet marchBill = 132\\nlet aprilBill = 98\\nlet mayBill = 87\\nlet juneBill = 203\\nlet julyBill = 187\\nlet augustBill = 198\\nlet septemberBill = 143\\nlet octoberBill = 112\\nlet novemberBill = 128\\nlet decemberBill = 159\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill +\\n                    aprilBill + mayBill + juneBill +\\n                    julyBill + augustBill + septemberBill +\\n                    octoberBill + novemberBill + decemberBill\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 85,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.substring(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 86,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n} else {\\n    console.log(\"Skip yoga and watch Netflix instead!\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 87,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n   torsoClothing = \"t-shirt\"\\n   legClothing = \"shorts\"\\n   footWear = \"sandals\"\\n\\n} else if ( temperature < 95 && temperature >= 75) {\\n   torsoClothing = \"t-shirt\"\\n   legClothing = \"shorts\"\\n   footWear =  \"sneakers\"\\n\\n} else if ( temperature < 75 && temperature >= 50 ) {\\n   torsoClothing = \"sweater\"\\n   legClothing = \"pants\"\\n   footWear =  \"sneakers\"\\n\\n} else if (temperature < 50 && temperature >= 35) {\\n   torsoClothing = \"jacket\"\\n   legClothing = \"pants\"\\n   footWear =  \"sneakers\"\\n   \\n} else {\\n   torsoClothing = \"jacket\"\\n   legClothing = \"pants\"\\n   footWear =  \"boots\"\\n}\\n\\nconsole.log(`I\\'m going to wear a ${torsoClothing} with ${legClothing} and a pair of ${footWear}.`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 88,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\n\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos >= 50 ) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n// Determine album color based on gender comparison\\n\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else if (malePhotos > femalePhotos) {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 89,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [yellowFruit, orangeFruit, redFruit, greenFruit, blueFruit]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 90,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 91,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 15,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-04-30T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': 'const email = \"   hello@email.com   \"\\nconst phone = \"555 0123\"\\nconst customerName = \"john\"\\nconst password = \"SecurePass\"\\nconst filename = \"vacation.jpg\"\\n\\n// Remove spaces from beginning and end\\nconst cleanEmail = email.trim()\\n\\n// Replace space with hyphen\\nconst formattedPhone = phone.replace(\" \", \"-\")\\n\\n// Convert to uppercase\\nconst formattedName = customerName.toUpperCase()\\n\\n// Check if contains \"x\"\\nconst containsX = password.includes(\"x\")\\n\\n// Get first 4 characters\\nconst fileStart = filename.slice(0, 4)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 92,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 12,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-04-28T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Apple Macbook Pro\"\\nconst phone = \"\"\\nconst television = \"\"\\nconst refrigerator = \"\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television} my ${computer} my ${refrigerator} and my ${phone}`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 93,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 15,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-04-28T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 94,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 12,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-04-28T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses;\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 95,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse {\\n    // New Message\\n    console.log()\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 96,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\nif (temperature >= 95) {\\n    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sandals\"\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"Sweater\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Boots\"\\n}\\n\\nconsole.log(`This is what I\\'m wearing today:\\n${torsoClothing} on my torso\\n${legClothing} on my legs\\n${footWear} on my feet\\n`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 97,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:42:45.559Z",
    "first_attempt": "2025-06-03T17:42:45.558Z",
    "last_attempt": "2025-06-03T17:42:45.559Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const topic of topics) {\\n    console.log(topic)\\n}\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 98,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const elems of topics) {\\n    console.log(elems)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 99,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:44:08.063Z",
    "first_attempt": "2025-06-03T17:44:08.062Z",
    "last_attempt": "2025-06-03T17:44:08.063Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunk of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 100,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunks of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(\"coffee mug\")\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 101,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n if ( ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\")\\n } else if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n } else if ( ingredient === \"potato\") {\\n    finishedFood.push(\"fries\")\\n }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 102,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const elem of monthlyExpenses) {\\n  totalExpense += elem\\n  \\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\n\\nconsole.log(totalExpense)\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 103,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 20, 15, 13, 16, 14, 19, 21 ]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (let dailyMiles of weeklyMiles) {\\ntotalMiles += dailyMiles\\n}\\n\\n\\n// Declare a new variable to store the average miles over time\\nlet averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 104,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (let time of hours) {\\n    if (time >= 7) {\\n        happyHours.push(time)\\n    } else {\\n        grumpyHours.push(time)\\n    }\\n}\\n \\nconsole.log(`I was grumpy on ${grumpyHours.length} days.\\nI was happy on ${happyHours.length} days.`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 105,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 35,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 106,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [yellowFruit, orangeFruit, redFruit, greenFruit, blueFruit]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 107,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 108,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const name of topics) {\\n    console.log(name)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 109,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunk of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 110,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': 'const rawIngredients = [\"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\"];\\nconst finishedFood = [];\\n\\nfor (const ingredient of rawIngredients) {\\n  if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\");\\n  } else if (ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\");\\n  } else if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\");\\n      }\\n}\\n\\nconsole.log(finishedFood);\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 111,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expense of monthlyExpenses) {\\n  totalExpense += expense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 112,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [12, 15, 10, 20, 18];\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0;\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\n  totalMiles += miles;\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length;\\n\\nconsole.log(`\\nWeekly Mileage Report\\n---------------------\\nTotal miles: ${totalMiles}\\nAverage weekly miles: ${averageMiles.toFixed(2)}\\n`);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 113,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// Don\\'t add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\n// Let\\'s define what makes an hour \"grumpy\" or \"happy\"\\n// For this example, I\\'ll consider hours less than 7 as \"grumpy\" and the rest as \"happy\"\\nfor (const hour of hours) {\\n  if (hour < 7) {\\n    grumpyHours.push(hour)\\n  } else {\\n    happyHours.push(hour)\\n  }\\n}\\n\\n// Display the results\\nconsole.log(\"Original hours:\", hours)\\nconsole.log(\"Grumpy hours:\", grumpyHours)\\nconsole.log(\"Happy hours:\", happyHours)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 114,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\nfor (const coffee of coffees) {\\n  // Categorize coffees and count them\\n  if (coffee.includes(\"light\")) {\\n    light++\\n  } else if (coffee.includes(\"medium\")) {\\n    medium++\\n  } else if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")) {\\n    toastyDark++\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 115,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n// Display the output\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 116,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n  \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n  \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n  \"Utility Electric:91\", \"Clothing Outlet:122\",\\n  \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n  \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n  \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n  \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n  \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n];\\n\\n// Arrays for categories\\nconst clothing = [];        // Contains \"Clothing\"\\nconst entertainment = [];   // Contains \"Movie\"\\nconst food = [];            // Contains \"Groceries\" or \"Restaurant\"\\nconst fuel = [];            // Contains \"Fuel\" or \"Gas\"\\nconst travel = [];          // Contains \"Lyft\" or \"Uber\"\\nconst utilities = [];       // Contains \"Utility\"\\nconst largePurchases = [];  // Amount > 100\\n\\n// Totals and averages\\nlet totalExpenses = 0;\\nlet averageExpense = 0;\\n\\n// Loop through each expense\\nfor (const item of monthlyExpenses) {\\n  const [description, amountStr] = item.split(\":\");\\n  const amount = parseFloat(amountStr);\\n  totalExpenses += amount;\\n\\n  // Categorize based on description\\n  if (description.includes(\"Clothing\")) clothing.push(item);\\n  if (description.includes(\"Movie\")) entertainment.push(item);\\n  if (description.includes(\"Groceries\") || description.includes(\"Restaurant\")) food.push(item);\\n  if (description.includes(\"Fuel\") || description.includes(\"Gas\")) fuel.push(item);\\n  if (description.includes(\"Lyft\") || description.includes(\"Uber\")) travel.push(item);\\n  if (description.includes(\"Utility\")) utilities.push(item);\\n  if (amount > 100) largePurchases.push(item);\\n}\\n\\naverageExpense = totalExpenses / monthlyExpenses.length;\\n\\n// Output results\\nconsole.log(\"Total Expenses:\", totalExpenses.toFixed(2));\\nconsole.log(\"Average Expense:\", averageExpense.toFixed(2));\\nconsole.log(\"\\\\nClothing:\", clothing);\\nconsole.log(\"Entertainment:\", entertainment);\\nconsole.log(\"Food:\", food);\\nconsole.log(\"Fuel:\", fuel);\\nconsole.log(\"Travel:\", travel);\\nconsole.log(\"Utilities:\", utilities);\\nconsole.log(\"Large Purchases:\", largePurchases);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 117,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n  name: \"Logan Sewell\",\\n  location: \"Chicken\",\\n  gender: \"male\",\\n  age: 31\\n};\\n\\nconsole.log(student);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 118,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n    color: \"Blue\",\\n    stemLength: 5,\\n    growingSeason: \"Summer\",\\n    thorny: false\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n    color: \"red\",\\n    stemLength: 5,\\n    growingSeason: \"Summer\",\\n    thorny: false\\n}\\n\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 119,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 12,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": null,
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 120,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 8,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-01T19:49:40.636Z",
    "last_attempt": "2025-06-02T18:56:46.754Z",
    "completed_code": null,
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 121,
  "fields": {
    "learner_github_id": "115299265",
    "learner_name": "Kate Rogers",
    "title": "Undefined",
    "slug": "flexbox-items",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-04-29T20:54:10.713Z",
    "last_attempt": "2025-06-27T21:10:22.676Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 122,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 13,
    "complete": true,
    "completed_on": "2025-05-11T15:30:35.588Z",
    "first_attempt": "2025-05-01T20:56:53.316Z",
    "last_attempt": "2025-05-11T15:30:35.588Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 140\\nlet marchBill = 130\\nlet aprilBill = 129\\nlet mayBill = 120\\nlet juneBill = 120\\nlet julyBill = 128\\nlet augustBill = 132\\nlet septemberBill = 125\\nlet octoberBill = 120\\nlet novemberBill = 126\\nlet decemberBill = 145\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 123,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 21,
    "complete": true,
    "completed_on": "2025-05-02T19:58:44.198Z",
    "first_attempt": "2025-05-01T21:50:03.347Z",
    "last_attempt": "2025-05-02T19:58:44.198Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\nconst checkHighScore = (playerName, score) => {\\n    if (score > highScore) {\\n        highScore = score\\n        return `${playerName} set a new high score of ${score}!`\\n    } else {\\n        return `${playerName} scored ${score}. High score is still ${highScore}`\\n    }\\n}\\n\\n// Test your function with multiple calls below\\nconsole.log(checkHighScore(\"Alice\", 50))\\nconsole.log(checkHighScore(\"Bob\", 30))\\nconsole.log(checkHighScore(\"Charlie\", 80))'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 124,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\nconst associateEmail = salesAssociate.contact.email\\nconsole.log(associateEmail)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 125,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 126,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \"Large Tank\"'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 127,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': 'const votingLocation = {\\n    name: \"Commonwealth Community Center\",\\n    address: {\\n        street: {\\n            number: 70,\\n            name: \"Main Street\"\\n        },\\n        city: \"Nashville\",\\n        state: \"TN\",\\n        zipCode: \"37021\"\\n    }\\n}\\n\\n// Add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\nconsole.log(output)\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 128,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': 'function greetPet () {\\n    console.log(\"Good dog!\")\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 129,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': 'function celebrateScore() {\\n    console.log(\"Touchdown!\")\\n}\\n\\ncelebrateScore()\\ncelebrateScore()\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 130,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': 'function isGreaterThanHundred(num) {\\n    return num > 100\\n}\\n\\nfunction displayWelcomeMessage(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\nfunction calculateDiscountedPrice(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 131,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': 'function describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 132,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': 'function calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 133,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(playerName, points) {\\n    console.log(playerName + \" scored \" + points + \" points!\")\\n}\\n\\n\\n// Then invoke the function with different player names and scores\\ndisplayGameScore(\"William\", 100)\\ndisplayGameScore(\"Elizabeth\", 50)\\ndisplayGameScore(\"Jamal\", 75)\\n\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 134,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 8,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": null,
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 135,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\nconst makeGreeting = (name) => `Hello, ${name}!`\\n\\n// Invoke the function and assign the return value to a variable\\nconst greeting = makeGreeting(\"John\")\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(greeting)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 136,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => {\\n    return quantity * price\\n}\\n\\n// Create calculateTotal here\\nconst calculateTotal = (subtotal) => {\\n    return subtotal * 1.08\\n}\\n\\n// Test your functions:\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(3, 4.99)\\nconsole.log(\"Subtotal: $\" + subtotal.toFixed(2))\\n\\n// 2. Calculate the final total with tax\\nconst finalTotal = calculateTotal(subtotal)\\nconsole.log(\"Total with tax: $\" + finalTotal.toFixed(2))'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 137,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  const calculateGameScore = (points, multiplier) => {\\n      const total = points * multiplier\\n      if (total >= 1000) {\\n          return \"High Score!\"\\n      } else {\\n          return \"Keep trying!\"\\n      }\\n  }\\n\\n  // Call your function with different values and store a result in a variable\\n  const result1 = calculateGameScore(500, 2.5)\\n  const result2 = calculateGameScore(400, 2)\\n\\n  // Log the result to see the output\\n  console.log(`Result 1: ${result1}`)\\n  console.log(`Result 2: ${result2}`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 138,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': \"// This code has scope problems!\\nlet score = 0    // Changed to let since we're updating it\\n\\nconst displayScore = () => {\\n    console.log(`Score: ${score}`)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()\"}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 139,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 6,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": null,
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 140,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 7,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": null,
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 141,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 7,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": null,
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 142,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    return (time * 100) + (targets * 50)\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    if (targets > 10) {\\n        return 1000\\n    }\\n    return 0\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    const basePoints = calculateBasePoints(time, targets)\\n    const bonus = calculateBonus(targets)\\n    return basePoints + bonus\\n}\\n\\nconst finalScoreNoBonus = calculateFinalScore(2, 12)\\nconsole.log(finalScoreNoBonus)\\n  '}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 143,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-01T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-01T00:00:00Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", say \"Good morning, [name]!\"\\n  // If time is \"afternoon\", say \"Good afternoon, [name]!\"\\n  // Otherwise, say \"Hello, [name]!\"\\n  if (time === \"morning\" || name.startsWith(\"A\")) {\\n    return `Good morning, ${name}!`;\\n  } else if (time === \"afternoon\") {\\n    return `Good afternoon, ${name}!`;\\n  } else {\\n    return `Hello, ${name}!`;\\n  }\\n}\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  // If topic is \"weather\", return the weather joke\\n  // If topic is \"animals\", return the animals joke\\n  // Otherwise, return the default joke\\n  if (topic === \"weather\") {\\n    return \"What do you call a stormy robot? A thunder-bot!\";\\n  } else if (topic === \"animals\") {\\n    return \"Why did the robot go to the zoo? To study creature features!\";\\n  } else {\\n    return \"Why was the robot tired? Because it had too many bytes!\";\\n  }\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n  const allGreetings = [];\\n\\n  // Loop through each person in the people array\\n  for (const person of people) {\\n    // Create a greeting for each person\\n    const personGreeting = createGreeting(person, time);\\n\\n    // Add the greeting to the array\\n    allGreetings.push(personGreeting);\\n  }\\n\\n  // Return the array of greetings\\n  return allGreetings;\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n  const greeting = createGreeting(name, time);\\n\\n  // Get the joke\\n  const joke = tellJoke(topic);\\n\\n  // Return both together\\n  return `${greeting} ${joke}`;\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 144,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 254,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-01T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n  <h1>How I Became A Software Developer</h1>\\n\\n  <article>\\n    <h2>Nashville Software School</h2>\\n\\n    <section>\\n      <p>My journey into software development began when I enrolled at Nashville Software School. The instructors were amazing and the curriculum was challenging but rewarding.</p>\\n    </section>\\n\\n    <section>\\n      <p>I learned the following skills</p>\\n      <ol>\\n        <li>Variables</li>\\n        <li>Arrays</li>\\n        <li>Objects</li>\\n        <li>Functions</li>\\n        <li>HTML</li>\\n        <li>CSS</li>\\n      </ol>\\n    </section>\\n  </article>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 20px;\\n  line-height: 1.6;\\n}\\n\\nh1 {\\n  color: #2c3e50;\\n}\\n\\nh2 {\\n  color: #3498db;\\n}\\n\\narticle {\\n  border: 1px solid #e0e0e0;\\n  padding: 15px;\\n  border-radius: 5px;\\n}\\n\\nsection {\\n  margin: 15px 0;\\n}\\n\\nol {\\n  color: #34495e;\\n}\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 145,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Introduction to HTML",
    "slug": "html-elements",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n\\n  <main>\\n    <article>\\n      <h1>John Doe</h1>\\n\\n      <section>\\n        <h2>Career History</h2>\\n        <p>I have worked in IT for 5 years, starting as a help desk technician and moving into network administration. I\\'ve always been fascinated by how software works and have been learning programming in my spare time.</p>\\n      </section>\\n\\n      <section>\\n        <h2>Why I Want to Be a Software Developer</h2>\\n        <p>I\\'m passionate about creating solutions that make people\\'s lives easier. Software development allows me to combine my problem-solving skills with my creativity to build useful applications that can have a real impact.</p>\\n      </section>\\n    </article>\\n  </main>\\n\\n  <footer>\\n    <p>John Doe &copy 2025 | john.doe@example.com</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\nheader {\\n  background-color: #f4f4f4;\\n  padding: 20px;\\n  margin-bottom: 20px;\\n}\\n\\nmain {\\n  max-width: 800px;\\n  margin: 0 auto;\\n}\\n\\nh1, h2 {\\n  color: #2c3e50;\\n}\\n\\nsection {\\n  margin-bottom: 30px;\\n}\\n\\nfooter {\\n  text-align: center;\\n  padding: 10px;\\n  background-color: #f4f4f4;\\n  margin-top: 20px;\\n}\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 146,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 147,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 3,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 148,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "CSS Selectors",
    "slug": "css-selectors",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Base styles using element selectors */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  color: #333;\\n  max-width: 1000px;\\n  margin: 0 auto;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  color: #2c3e50;\\n  margin-bottom: 10px;\\n}\\n\\nh2 {\\n  color: #3498db;\\n  margin-top: 25px;\\n}\\n\\nh3 {\\n  color: #555;\\n}\\n\\np {\\n  margin-bottom: 15px;\\n}\\n\\n/* Class selectors */\\n.highlight {\\n  background-color: #fffde7;\\n  padding: 10px;\\n  border-left: 4px solid #ffd54f;\\n}\\n\\n.example {\\n  background-color: #f5f5f5;\\n  padding: 15px;\\n  border-radius: 5px;\\n  margin: 20px 0;\\n}\\n\\n.code {\\n  font-family: monospace;\\n  background-color: #f0f0f0;\\n  padding: 2px 5px;\\n  border-radius: 3px;\\n  border: 1px solid #ddd;\\n}\\n\\n.form-group {\\n  margin-bottom: 15px;\\n}\\n\\n/* ID selectors */\\n#main-header {\\n  background-color: #2c3e50;\\n  color: white;\\n  padding: 20px;\\n  text-align: center;\\n  border-radius: 5px;\\n}\\n\\n#basics {\\n  border-left: 3px solid #3498db;\\n  padding-left: 15px;\\n}\\n\\n#advanced {\\n  border-left: 3px solid #e74c3c;\\n  padding-left: 15px;\\n}\\n\\n#practice {\\n  border-left: 3px solid #2ecc71;\\n  padding-left: 15px;\\n}\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 149,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "CSS Selectors",
    "slug": "flexbox-intro",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 150,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "CSS Selectors",
    "slug": "flexbox-intro",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 151,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-container",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 152,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-container",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 153,
  "fields": {
    "learner_github_id": "47334784",
    "learner_name": "Logan Sewell",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Base styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n/* Navbar styles with flexbox */\\n.navbar {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  background-color: #2c3e50;\\n  color: white;\\n  padding: 1rem 2rem;\\n}\\n\\n.logo {\\n  font-size: 1.5rem;\\n  font-weight: bold;\\n}\\n\\n.nav-links {\\n  display: flex;\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links li {\\n  margin-left: 1.5rem;\\n}\\n\\n.nav-links a {\\n  color: white;\\n  text-decoration: none;\\n}\\n\\n.nav-links a:hover {\\n  text-decoration: underline;\\n}\\n\\n/* Main container with flexbox */\\n.container {\\n  display: flex;\\n  max-width: 1200px;\\n  margin: 2rem auto;\\n  padding: 0 1rem;\\n}\\n\\n.content {\\n  flex: 3;\\n  margin-right: 2rem;\\n}\\n\\n.sidebar {\\n  flex: 1;\\n  background-color: #f5f5f5;\\n  padding: 1.5rem;\\n  border-radius: 5px;\\n}\\n\\n/* Cards with flexbox */\\n.cards {\\n  display: flex;\\n  flex-wrap: wrap;\\n  gap: 1.5rem;\\n  margin-top: 2rem;\\n}\\n\\n.card {\\n  display: flex;\\n  flex-direction: column;\\n  flex: 1 1 300px;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 1.5rem;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.card h3 {\\n  margin-top: 0;\\n  color: #2c3e50;\\n}\\n\\n.card p {\\n  flex-grow: 1;\\n}\\n\\n.card button {\\n  align-self: flex-start;\\n  background-color: #3498db;\\n  color: white;\\n  border: none;\\n  padding: 0.5rem 1rem;\\n  border-radius: 3px;\\n  cursor: pointer;\\n}\\n\\n.card button:hover {\\n  background-color: #2980b9;\\n}\\n\\n/* Sidebar styles */\\n.sidebar h2 {\\n  margin-top: 0;\\n  color: #2c3e50;\\n}\\n\\n.sidebar ul {\\n  padding-left: 1.5rem;\\n}\\n\\n.sidebar li {\\n  margin-bottom: 0.5rem;\\n}\\n\\n.sidebar a {\\n  color: #3498db;\\n  text-decoration: none;\\n}\\n\\n.sidebar a:hover {\\n  text-decoration: underline;\\n}\\n\\n.info-box {\\n  background-color: #e8f4fc;\\n  border-left: 4px solid #3498db;\\n  padding: 1rem;\\n  margin-top: 2rem;\\n}\\n\\n/* Footer styles */\\nfooter {\\n  background-color: #2c3e50;\\n  color: white;\\n  text-align: center;\\n  padding: 1.5rem;\\n  margin-top: 2rem;\\n}\\n\\n/* Responsive adjustments */\\n@media (max-width: 768px) {\\n  .container {\\n    flex-direction: column;\\n  }\\n\\n  .content {\\n    margin-right: 0;\\n    margin-bottom: 2rem;\\n  }\\n\\n  .navbar {\\n    flex-direction: column;\\n    padding: 1rem;\\n  }\\n\\n  .nav-links {\\n    margin-top: 1rem;\\n  }\\n\\n  .nav-links li {\\n    margin-left: 1rem;\\n    margin-right: 1rem;\\n  }\\n}\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 154,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")) {\\n    light++\\n  } else if (coffee.includes(\"medium\")) {\\n    medium++\\n  } else if (coffee.includes(\"dark\") || coffee.includes(\"toasty\")) {\\n    toastyDark++\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 155,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-02T00:00:00Z",
    "first_attempt": "2025-05-02T00:00:00Z",
    "last_attempt": "2025-05-02T00:00:00Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n\\nconsole.log(disorderArray)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 156,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-02T14:11:15.442Z",
    "last_attempt": "2025-05-02T14:11:15.442Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 157,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-03T23:48:46.382Z",
    "first_attempt": "2025-05-02T20:25:32.333Z",
    "last_attempt": "2025-05-03T23:48:46.382Z",
    "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\n    let ticketPrice = 10\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n    if (isWeekend === true) {\\n        ticketPrice = ticketPrice + 2\\n    }\\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n    if ((age < 12) || (age >= 65)) {\\n        ticketPrice = ticketPrice * .5\\n    }\\n      // 4. Return the final ticket price\\n      return ticketPrice\\n  }\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n  // Example:\\n  const adultWeekdayPrice = calculateTicketPrice(25, false)\\n  console.log (adultWeekdayPrice)\\n  const childWeekendPrice = calculateTicketPrice(10, true)\\n  console.log (childWeekendPrice)\\n  const seniorWeekendPrice = calculateTicketPrice(70, true)\\n  console.log (seniorWeekendPrice)\\n  const adultWeekendPrice = calculateTicketPrice(25, true)\\n  console.log (adultWeekendPrice)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 158,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 62,
    "complete": true,
    "completed_on": "2025-05-14T21:20:24.211Z",
    "first_attempt": "2025-05-02T20:53:27.444Z",
    "last_attempt": "2025-05-14T21:20:24.211Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []        // \"Clothing\"\\nconst entertainment = []   // \"Movie\"\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nconst utilities = []       // \"Utility\"\\nconst largePurchases = []  // Expenses over 100.00\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nlet averageExpense = 0\\n\\nfor (let elem of monthlyExpenses) {\\n    let splitString = elem.split(\":\")[1]\\n    let costNum = parseFloat(splitString)\\n\\n\\n    if (elem.includes(\"Clothing\")) {\\n        clothing.push(costNum)\\n\\n    } else if (elem.includes(\"Movie\")) {\\n        entertainment.push(costNum)\\n\\n    } else if (elem.includes(\"Groceries\") || elem.includes(\"Restaurant\")) {\\n        food.push(costNum)\\n\\n    } else if (elem.includes(\"Fuel\") || elem.includes(\"Gas\")) {\\n        fuel.push(costNum)\\n\\n    } else if (elem.includes(\"Lyft\") || elem.includes(\"Uber\")) {\\n        travel.push(costNum)\\n\\n    } else if (elem.includes(\"Utility\")) {\\n        utilities.push(costNum)\\n\\n    }\\n\\n    if (costNum > 100) {\\n        largePurchases.push(costNum)\\n    }\\n\\n    totalExpenses = totalExpenses + costNum\\n\\n}\\n\\n\\nconsole.log(totalExpenses);\\n\\naverageExpense = totalExpenses / monthlyExpenses.length;\\n\\nconsole.log(Math.fround(averageExpense))\\n\\n/*\\n Use your algorithmic thinking for the steps to\\n categorize, total, and average the expenses.\\n\\n Be patient and take your time. This is challenging.\\n*/\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 159,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-02T22:04:03.477Z",
    "first_attempt": "2025-05-02T22:04:03.477Z",
    "last_attempt": "2025-05-02T22:04:03.477Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n    name: \"Jeremy Landy\",\\n    location: \"Phoenix, AZ\",\\n    gender: \"male\",\\n    age: 31\\n}\\n\\nconsole.log(student)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 160,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-02T22:05:56.413Z",
    "first_attempt": "2025-05-02T22:05:56.413Z",
    "last_attempt": "2025-05-02T22:05:56.414Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n    color: \"white\",\\n    stemLength: 4,\\n    growingSeason: \"Spring\",\\n    thorny: false,\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n    color: \"red\",\\n    stemLength: 8,\\n    growingSeason: \"Summer\",\\n    thorny: true,\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 161,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-03T23:46:10.719Z",
    "first_attempt": "2025-05-03T20:42:15.083Z",
    "last_attempt": "2025-05-03T23:46:10.719Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\n    let total = 0\\n      // 2. Loop through all prices in the array and add each to total\\n    for (const price of prices){\\n        total = total + price   \\n    }\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\n    if (total > 100) {\\n        total = total * .9\\n    }\\n      // 4. Return the final total\\n    return total  \\n  }\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\n\\nconst prices = [20, 30, 40, 50]\\nconst cart = calculateCartTotal(prices)\\nconsole.log (`Total: ${cart}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 162,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-04T22:10:54.592Z",
    "first_attempt": "2025-05-04T20:21:39.200Z",
    "last_attempt": "2025-05-04T22:10:54.592Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    return ((time *100) + (targets * 50))\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    if (targets > 10){\\n    return 1000\\n    } else {\\n        return 0\\n    }\\n   \\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n    const basePoints = calculateBasePoints(time, targets)\\n    const bonusPoints = calculateBonus(targets)\\n    // Add the results together and return the sum\\n    totalPoints = basePoints + bonusPoints\\n    return totalPoints\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\nconst finalScore = calculateFinalScore(2,5)\\nconst otherScore = calculateFinalScore (2, 12)\\nconsole.log (finalScore)\\nconsole.log (otherScore)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 163,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Undefined",
    "slug": "objects-collections",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-25T02:59:38.423Z",
    "first_attempt": "2025-05-05T02:12:56.021Z",
    "last_attempt": "2025-06-25T02:59:38.423Z",
    "completed_code": "{'code': '// Sample appointments array\\r\\nconst appointments = [\\r\\n    {\\r\\n        firstName: \"Maria\",\\r\\n        lastName: \"Sanchez\",\\r\\n        appointmentTime: \"2:15\"\\r\\n    },\\r\\n    {\\r\\n        firstName: \"John\",\\r\\n        lastName: \"McGrath\",\\r\\n        appointmentTime: \"1:30\"\\r\\n    },\\r\\n    {\\r\\n        firstName: \"Lamar\",\\r\\n        lastName: \"Washington\",\\r\\n        appointmentTime: \"10:15\"\\r\\n    }\\r\\n]\\r\\n\\r\\n// Create schedule string\\r\\nlet schedule = \"\"\\r\\n\\r\\n// Add your code here to iterate the array and build the string\\r\\n\\r\\nfor (const each of appointments) {\\r\\n    schedule += `Patient ${each.firstName} ${each.lastName} has an appointment at ${each.appointmentTime}\\\\n`\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nconsole.log(schedule)\\r\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 164,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-05T02:16:05.309Z",
    "first_attempt": "2025-05-05T02:16:05.309Z",
    "last_attempt": "2025-05-05T02:16:05.309Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 165,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-05T02:21:03.181Z",
    "first_attempt": "2025-05-05T02:21:03.181Z",
    "last_attempt": "2025-05-05T02:21:03.181Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 166,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-05T02:22:37.613Z",
    "first_attempt": "2025-05-05T02:22:37.613Z",
    "last_attempt": "2025-05-05T02:22:37.613Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\n\\ngoldfish.location = \"Large Tank\"\\n\\nconsole.log(goldfish.location)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 167,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-05T02:30:40.421Z",
    "first_attempt": "2025-05-05T02:29:58.229Z",
    "last_attempt": "2025-05-05T02:30:40.421Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\n\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 168,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "HTML Elements",
    "slug": "html-elements",
    "attempts": 324,
    "complete": true,
    "completed_on": "2025-05-05T02:58:16.685Z",
    "first_attempt": "2025-05-05T02:47:15.549Z",
    "last_attempt": "2025-05-05T02:58:16.685Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n <header>\\n  <nav>\\n    <div>Home</div>\\n    <div>Projects</div>\\n    <div>Education</div>\\n  </nav>\\n </header>\\n <main>\\n  <article>\\n    <h1>Lea Edwards</h1>\\n    <section>My career history is very colorful.</section>\\n    <section>I want to become a software developer so that I can make some awesome stuff.</section>\\n  </article>\\n </main>\\n <footer>Lea Edwards, 2025, leaxedw@gmail.com</footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 169,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 191,
    "complete": true,
    "completed_on": "2025-05-05T03:11:03.077Z",
    "first_attempt": "2025-05-05T02:58:17.688Z",
    "last_attempt": "2025-05-05T03:11:03.077Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n  <link rel=\"stylesheet\" href=\"style.css\">\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: lightblue\\n}\\n\\n/* Add your CSS styles here */\\n\\narticle {\\n  border: 1px solid black;\\n  padding: 1rem;\\n}\\n\\np {\\n  color: purple;\\n}\\n\\nimg {\\n  height: 10rem;\\n}\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 170,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Undefined",
    "slug": "css-selectors",
    "attempts": 357,
    "complete": true,
    "completed_on": "2025-05-05T03:29:29.581Z",
    "first_attempt": "2025-05-05T03:11:04.389Z",
    "last_attempt": "2025-06-26T16:38:29.662Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul id=\"links\">\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\nh1 {\\n  text-align: center;\\n}\\n\\nh2 {\\n  color: #000012;\\n}\\n\\n.highlight {\\n  text-decoration: underline;\\n}\\n\\n#advanced {\\n  color: darkred\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 171,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-05T03:29:33.733Z",
    "last_attempt": "2025-05-05T03:29:33.753Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 172,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-05T03:29:33.733Z",
    "last_attempt": "2025-05-05T03:29:33.733Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 173,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-container",
    "attempts": 472,
    "complete": true,
    "completed_on": "2025-05-05T23:22:45.326Z",
    "first_attempt": "2025-05-05T22:25:18.710Z",
    "last_attempt": "2025-05-07T04:03:38.451Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  font-size: 0.8rem;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n  display: flex;\\n  flex-wrap: wrap;\\n\\n}\\n\\n/* Add your flexbox container properties below */\\n\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  gap: 5px;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 174,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 441,
    "complete": true,
    "completed_on": "2025-05-05T23:11:14.829Z",
    "first_attempt": "2025-05-05T22:57:31.508Z",
    "last_attempt": "2025-05-05T23:11:14.829Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n/* Add your flexbox properties below */\\n\\n.logo {\\n  display: flex;\\n  justify: center;\\n}\\n\\na {\\n  text-decoration: none;\\n}\\n\\nul{ \\n  list-style-type: none; \\n}\\n\\n.navbar {\\n  display: flex;\\n    flex-direction: row;\\n}\\n\\n\\n.nav-links {\\n  display: flex;\\n  flex-direction: row;\\n  justify: space-evenly;\\n  gap: 3rem;\\n  padding: 2rem;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 175,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Flexbox Container Properties",
    "slug": "functions-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-06T01:44:45.470Z",
    "first_attempt": "2025-05-05T23:23:01.516Z",
    "last_attempt": "2025-05-06T01:44:45.470Z",
    "completed_code": "{'code': '// Write your function here\\n\\nfunction greetPet() {\\n    console.log(`Good dog!`)\\n}\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 176,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-06T01:48:16.046Z",
    "first_attempt": "2025-05-06T01:45:38.334Z",
    "last_attempt": "2025-05-06T01:48:16.046Z",
    "completed_code": "{'code': '// 1. Define your function here\\n\\nfunction celebrateScore() {\\n    console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\n\\ncelebrateScore()\\ncelebrateScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 177,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 29,
    "complete": true,
    "completed_on": "2025-05-09T05:05:40.611Z",
    "first_attempt": "2025-05-06T01:49:35.445Z",
    "last_attempt": "2025-05-09T05:05:40.611Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreater(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayGreeting(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscount(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 178,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-06T02:08:39.774Z",
    "first_attempt": "2025-05-06T02:08:39.773Z",
    "last_attempt": "2025-05-06T02:08:39.774Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\nconsole.log(describeActivity(\"hiking\"));\\nconsole.log(describeActivity(\"swimming\"));\\nconsole.log(describeActivity(\"dancing\"));'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 179,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-06T02:09:40.725Z",
    "first_attempt": "2025-05-06T02:09:33.830Z",
    "last_attempt": "2025-05-06T02:09:40.725Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\ncalculateTotal(50);\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 180,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-06T02:13:58.535Z",
    "first_attempt": "2025-05-06T02:13:23.334Z",
    "last_attempt": "2025-05-06T02:13:58.535Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\n\\nfunction displayGameScore(name, score) {\\n    let scoreMessage = `${name} scored ${score} points!`\\n    console.log(scoreMessage)\\n}\\n\\n// Then invoke the function with different player names and scores\\n\\ndisplayGameScore(\"Skrimp\", 9551)\\ndisplayGameScore(\"Optimal\", 3241)\\ndisplayGameScore(\"HamburgerPrincess13\", 6654)\\ndisplayGameScore(\"Mario\", 100)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 181,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-05-06T17:32:04.727Z",
    "first_attempt": "2025-05-06T02:54:36.710Z",
    "last_attempt": "2025-05-06T17:32:04.727Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\n\\nconst add = (x, y) => x + y\\n\\n\\nconst greet = (name) => \"Hello, \" + name + \"!\"\\n\\nconst getRandomNumber = () => Math.random()\\n\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber()\\nconst msg = greet(\"John\")\\nconst number = add(3, 4)\\n\\nconsole.log(random, msg, number)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 182,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-06T17:40:43.976Z",
    "first_attempt": "2025-05-06T17:36:15.334Z",
    "last_attempt": "2025-05-06T17:40:43.976Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\n\\nconst makeGreeting = (name) => {\\n    return `Hello, ${name}!`\\n}\\n\\n// Invoke the function and assign the return value to a variable\\n\\nconst welcomeMessage = makeGreeting(\"Alphonse\")\\n\\n// Console log the variable you used above to see the greeting\\n\\nconsole.log(welcomeMessage)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 183,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:44:41.705Z",
    "first_attempt": "2025-06-03T17:44:41.704Z",
    "last_attempt": "2025-06-03T17:44:41.705Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  if (ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\")\\n  }\\n  else if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n  }\\n  else if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\")\\n  }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 184,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 13,
    "complete": true,
    "completed_on": "2025-05-06T20:11:00.655Z",
    "first_attempt": "2025-05-06T18:11:27.198Z",
    "last_attempt": "2025-05-06T20:11:00.655Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\n\\nconst calculateSubtotal = (quantity, price) => {\\n    return quantity * price\\n}\\nconst subTotal = calculateSubtotal(3, 4.99)\\nconsole.log(subTotal)\\n// Create calculateTotal here\\n\\nconst calculateTotal = subTotal => {\\n    return (subTotal * 0.08) + subTotal\\n}\\nconst total = calculateTotal(subTotal)\\nconst roundedTotal = +total.toFixed(2)\\nconsole.log(roundedTotal)\\n// 1. Calculate subtotal for 3 items at $4.99 each\\n\\n\\n// 2. Calculate the final total with tax\\n\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $${subTotal}`)\\nconsole.log(`Total with tax: $${roundedTotal}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 185,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:47:19.700Z",
    "first_attempt": "2025-06-03T17:47:19.700Z",
    "last_attempt": "2025-06-03T17:47:19.700Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expense of monthlyExpenses) {\\n  totalExpense += expense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 186,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:48:34.962Z",
    "first_attempt": "2025-06-03T17:48:34.962Z",
    "last_attempt": "2025-06-03T17:48:34.962Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 89, 105, 75, 92, 86, 93, 78 ]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\n  totalMiles += miles\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles.toFixed(1)} miles each week.\\nI have driven a total of ${totalMiles} miles.`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 187,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-05-06T20:20:05.960Z",
    "first_attempt": "2025-05-06T20:17:31.326Z",
    "last_attempt": "2025-05-06T20:20:05.960Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\n\\nconst calculateGameScore = (basePoints, multiplier) => {\\n    if (basePoints * multiplier >= 1000) return `High Score!`\\n    if( basePoints * multiplier < 1000) return `Keep trying!`\\n}\\n  // Call your function with different values and store a result in a variable\\n\\nconst myScore = calculateGameScore(900, 2)\\nconst yourScore = calculateGameScore(300, 1.5)\\n\\n  // Log the result to see the output\\n\\nconsole.log(myScore)\\nconsole.log(yourScore)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 188,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 12,
    "complete": true,
    "completed_on": "2025-05-06T22:09:58.943Z",
    "first_attempt": "2025-05-06T20:43:21.918Z",
    "last_attempt": "2025-05-06T22:13:12.166Z",
    "completed_code": "{'code': '// This code has scope problems!\\n\\n\\nlet score = 0\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 189,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 15,
    "complete": true,
    "completed_on": "2025-05-07T02:41:13.407Z",
    "first_attempt": "2025-05-06T22:26:28.879Z",
    "last_attempt": "2025-05-07T02:41:13.407Z",
    "completed_code": "{'code': '// The global high score is already defined\\n\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\n\\nconst checkHighScore = (playerName, score) => {\\n    if ( score > highScore ) {\\n        highScore = score\\n        return `New highscore - ${playerName}: ${highScore}`\\n    } else {\\n        return `No new highscore... try again`\\n    }\\n}\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\n\\nconsole.log(checkHighScore(\"Alice\", 50));\\nconsole.log(checkHighScore(\"Sam\", 110));\\nconsole.log(checkHighScore(\"Blake\", 39));\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 191,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-07T00:13:14.987Z",
    "first_attempt": null,
    "last_attempt": "2025-05-07T00:13:14.987Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 192,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Flexbox Container Properties",
    "slug": "functions-conditions",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-05-07T04:54:38.440Z",
    "first_attempt": "2025-05-07T04:03:48.406Z",
    "last_attempt": "2025-05-07T04:54:38.440Z",
    "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\n\\nlet baseTicketPrice = 10;\\nlet finalPrice = baseTicketPrice\\n\\n\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n\\n\\nif (isWeekend === true) {\\n    finalPrice += 2\\n}\\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n\\nif (age < 12 || age >= 65) {\\n    finalPrice *= 0.5\\n\\n}\\n\\nreturn finalPrice\\n      // 4. Return the final ticket price\\n  }\\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n\\n  // Example:\\n  // const adultWeekdayPrice = calculateTicketPrice(25, false);\\n\\nconst adultWeekdayPrice = calculateTicketPrice(25, true)\\nconsole.log(adultWeekdayPrice)\\n\\nconst seniorWeekdayPrice = calculateTicketPrice(66, false)\\nconsole.log(seniorWeekdayPrice)\\n  \\n\\n\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 193,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:52:30.709Z",
    "first_attempt": "2025-06-03T17:52:30.709Z",
    "last_attempt": "2025-06-03T17:52:30.709Z",
    "completed_code": "{'code': 'const hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const sleep of hours) {\\n  if (sleep < 7) {\\n    grumpyHours.push(sleep)\\n  }\\n  else {\\n    happyHours.push(sleep)\\n  }\\n}\\n\\nconsole.log(`I was grumpy on ${grumpyHours.length} days.\\nI was happy on ${happyHours.length} days.`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 194,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 6,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-07T20:30:02.937Z",
    "last_attempt": "2025-05-07T20:37:01.585Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 195,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-07T21:12:32.856Z",
    "first_attempt": "2025-05-07T21:12:32.856Z",
    "last_attempt": "2025-05-07T21:12:32.856Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"2024 Macbook Pro\"\\nconst phone = \"iphone 15 Pro\"\\nconst television = \"40-inch Samsung Smart\"\\nconst refrigerator = \"LG 27 cu. ft. French Door Smart\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I use my ${computer} and my ${phone} to study, my ${television} for fun and my ${refrigerator} to survive `\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 196,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-07T21:18:22.266Z",
    "first_attempt": null,
    "last_attempt": "2025-05-07T21:18:22.266Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 197,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Undefined",
    "slug": "functions-loops",
    "attempts": 74,
    "complete": true,
    "completed_on": "2025-06-26T16:59:39.308Z",
    "first_attempt": "2025-05-08T03:30:52.939Z",
    "last_attempt": "2025-06-26T16:59:39.308Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\r\\n      // 1. Create a variable to store the total, starting at 0\\r\\n    if ( prices.length === 0) {\\r\\n        return 0\\r\\n    }\\r\\n      // 2. Loop through all prices in the array and add each to total\\r\\n    let total = 0\\r\\n    \\r\\n    for (let price of prices) {\\r\\n        total += price\\r\\n    }\\r\\n\\r\\n   \\r\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\r\\n    if (total > 100) {\\r\\n        total = total * 0.9\\r\\n\\r\\n    } \\r\\n      // 4. Return the final total\\r\\n      return total\\r\\n  }\\r\\n\\r\\n  // Test your function with following steps:\\r\\n  // 1. Invoke the function\\r\\n  // 2. Store the return value in a variable\\r\\n  // 3. Log the variable to the console\\r\\n\\r\\n\\r\\n\\r\\nlet cart = [20, 30, 40]\\r\\nlet cart1 = calculateCartTotal(cart);\\r\\nconsole.log(cart1)\\r\\n\\r\\ncart = [50, 60, 70]\\r\\nlet cart2 = calculateCartTotal(cart);\\r\\nconsole.log(cart2)\\r\\n\\r\\ncart = []\\r\\nlet cart3 = calculateCartTotal(cart);\\r\\nconsole.log(cart3)\\r\\n\\r\\ncart = [20, 30, 50]\\r\\nlet cart4 = calculateCartTotal(cart);\\r\\nconsole.log(cart4)\\r\\n\\r\\ncart = [20, 30, 51]\\r\\nlet cart5 = calculateCartTotal(cart);\\r\\nconsole.log(cart5)\\r\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 198,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-22T18:24:56.080Z",
    "first_attempt": null,
    "last_attempt": "2025-05-22T18:24:56.080Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 199,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:53:27.006Z",
    "first_attempt": "2025-06-03T17:53:27.005Z",
    "last_attempt": "2025-06-03T17:53:27.006Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\nfor (const coffee of coffees) {\\n    if (coffee.includes(\"light\")) {\\n        light++\\n    }\\n    else if (coffee.includes(\"medium\")) {\\n        medium++\\n    }\\n    else if (coffee.includes(\"dark\") || coffee.includes(\"toasty\")) {\\n        toastyDark++\\n    }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = (`I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`)\\n\\n// Log your output to the console\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 200,
  "fields": {
    "learner_github_id": "209533182",
    "learner_name": "Patrick McIsaac",
    "title": "Flexbox Item Properties",
    "slug": "flexbox-items",
    "attempts": 659,
    "complete": true,
    "completed_on": "2025-04-29T23:45:33.967Z",
    "first_attempt": "2025-04-29T23:06:15.095Z",
    "last_attempt": "2025-04-29T23:45:33.967Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\n\\n* {\\n    padding: 0;\\n    margin: 0;\\n    box-sizing: border-box;\\n}\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n    color: #333;\\n  }\\n  \\n  /* Add your flexbox properties below */\\n  \\n.navbar {\\n    display: flex;\\n    justify-content: space-between;\\n    padding: 2rem;\\n}\\n\\n.logo {\\n    font-weight: 800;\\n}\\n\\n.nav-links {\\n    width: 50%;\\n    display: flex;\\n    justify-content: space-around;\\n    gap: 2rem;\\n}\\n\\nli {\\n    list-style: none;\\n}\\n\\na {\\n    text-decoration: none;\\n    color: black;\\n    font-weight: 600;\\n}\\n\\n/* MAIN CONTAINER */\\n\\n.container {\\n    width: 100vw;\\n    display: flex;\\n    justify-content: space-between;\\n    padding: 1rem;\\n    gap: 1rem;\\n}\\n\\n\\n.content {\\n    flex:1 1 2;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n.cards {\\n    display: flex;\\n    flex-wrap: wrap;\\n\\n    padding: 1rem;\\n    gap: 1rem;\\n}\\n\\n.card {\\n    border: 1px solid black;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    justify-content: space-around;\\n    width: 100%;\\n    height: 10rem;\\n    background-color: azure;\\n}\\n.card p {\\n    text-align: center;\\n    width: 13rem\\n}\\n\\n/* ASIDE */\\n\\n.sidebar {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: space-between;\\n    align-items: center;\\n    text-align: center;\\n    flex: 1;\\n    background-color: lightgray;\\n}\\n\\n.sidebar h2{\\n    margin-top: 3rem;\\n}\\n\\n.sidebar ul {\\n    margin-top: -20rem;\\n}\\n.sidebar a {\\n    color: rgb(25, 36, 136);\\n    font-size: 1rem;\\n    font-weight: 300;\\n}\\n\\n.info-box {\\n    margin-bottom: 1rem;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 201,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:54:22.841Z",
    "first_attempt": "2025-06-03T17:54:22.841Z",
    "last_attempt": "2025-06-03T17:54:22.841Z",
    "completed_code": "{'code': 'const disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n// Split the string into an array\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n// Join the array back into a string with HTML div tags\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n// Add the opening and closing div tags\\nconst output = (`<div>${htmlString}</div>`)\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 202,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:55:54.999Z",
    "first_attempt": "2025-06-03T17:55:54.999Z",
    "last_attempt": "2025-06-03T17:55:54.999Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\", \"Utility Internet:85\", \"Old Navy Clothing:145\",\\n    \"Lyft:34\", \"Utility Electric:91\", \"Clothing Outlet:122\", \"Fast Food Restaurant:18\", \"Shell Fuel:42\",\\n    \"Movie Theater:44\", \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\", \"Gas Station:31\",\\n    \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\", \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Create arrays for each category of expenses\\nconst clothing = []\\nconst entertainment = []\\nconst food = []\\nconst fuel = []\\nconst travel = []\\nconst utilities = []\\nconst largePurchases = []\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nlet averageExpense = 0\\n\\n\\n// Process each expense\\nfor (const expense of monthlyExpenses) {\\n    // Split the expense into vendor and amount\\n    const [vendor, amount] = expense.split(\":\")\\n    const cost = parseFloat(amount)\\n\\n    // Add to total\\n    totalExpenses += cost\\n\\n    // Check amount for large purchases\\n    if (cost > 100.00) {\\n        largePurchases.push(cost)\\n    }\\n\\n    // Categorize based on vendor\\n    if (vendor.includes(\"Clothing\")) {\\n        clothing.push(cost)\\n    }\\n    else if (vendor.includes(\"Movie\")) {\\n        entertainment.push(cost)\\n    }\\n    else if (vendor.includes(\"Fuel\") || vendor.includes(\"Gas\")) {\\n        fuel.push(cost)\\n    }\\n    else if (vendor.includes(\"Utility\")) {\\n        utilities.push(cost)\\n    }\\n    else if (vendor.includes(\"Groceries\") || vendor.includes(\"Restaurant\")) {\\n        food.push(cost)\\n    }\\n    else if (vendor.includes(\"Lyft\") || vendor.includes(\"Uber\")) {\\n        travel.push(cost)\\n    }\\n}\\n\\n// Calculate the average\\naverageExpense = totalExpenses / monthlyExpenses.length\\n\\n// Display the categorized expenses\\nconsole.log(\"Expense Categories:\")\\nconsole.log(`Clothing: ${clothing.join(\", \")}`)\\nconsole.log(`Entertainment: ${entertainment.join(\", \")}`)\\nconsole.log(`Food: ${food.join(\", \")}`)\\nconsole.log(`Fuel: ${fuel.join(\", \")}`)\\nconsole.log(`Travel: ${travel.join(\", \")}`)\\nconsole.log(`Utilities: ${utilities.join(\", \")}`)\\nconsole.log(`Large Purchases: ${largePurchases.join(\", \")}`)\\n\\n// Display the totals\\nconsole.log(`Total Expenses: ${totalExpenses}`)\\nconsole.log(`Average Expense: ${averageExpense.toFixed(2)}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 203,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-22T18:24:52.132Z",
    "first_attempt": null,
    "last_attempt": "2025-05-22T18:24:52.132Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 204,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-22T18:24:54.863Z",
    "first_attempt": null,
    "last_attempt": "2025-05-22T18:24:54.863Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 205,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-22T18:24:53.651Z",
    "first_attempt": null,
    "last_attempt": "2025-05-22T18:24:53.651Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 206,
  "fields": {
    "learner_github_id": "209533182",
    "learner_name": "Patrick McIsaac",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 29,
    "complete": true,
    "completed_on": "2025-05-09T01:22:49.497Z",
    "first_attempt": "2025-04-28T19:48:28.470Z",
    "last_attempt": "2025-05-09T01:22:49.497Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif(totalPhotos > 110){\\n    photoStorage = \"Photo Album\"\\n}else if (totalPhotos >= 50){\\n    photoStorage = \"Shoe Box\"\\n}else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos){\\n    albumColor = \"plum\"\\n}else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 207,
  "fields": {
    "learner_github_id": "209533182",
    "learner_name": "Patrick McIsaac",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-05-09T01:28:40.799Z",
    "first_attempt": "2025-04-29T21:26:27.573Z",
    "last_attempt": "2025-05-09T01:28:40.799Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\nconst checkHighScore = (playerName, score) => {\\n// 2. Compares score to highScore\\n    if(score > highScore){\\n// 3. Updates highScore if the score is higher\\n        highScore = score\\n        return `${playerName}\\'s score is now ${score}`\\n    }else {\\n        return `high score is ${highScore}`\\n    }\\n// 4. Returns a message about the result\\n\\n}\\n\\n\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\nconsole.log(checkHighScore(\\'alice\\', 50))\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 208,
  "fields": {
    "learner_github_id": "209533182",
    "learner_name": "Patrick McIsaac",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 26,
    "complete": true,
    "completed_on": "2025-05-21T16:52:25.991Z",
    "first_attempt": "2025-04-29T21:51:29.238Z",
    "last_attempt": "2025-05-21T16:52:25.992Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\n      let total = 0\\n      // 2. Loop through all prices in the array and add each to total\\n      for(const price of prices){\\n        total+= price\\n      }\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\n      if(total > 100){\\n        total*= .9\\n      }\\n      // 4. Return the final total\\n      return total\\n  }\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  const myArr = calculateCartTotal([1,2,3,4,5])\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\n  console.log(myArr)\\n\\n\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 209,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T18:25:25.845Z",
    "first_attempt": "2025-05-22T18:25:25.835Z",
    "last_attempt": "2025-05-22T18:25:25.845Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with let\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the let keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 120;\\nlet marchBill = 130;\\nlet aprilBill = 110;\\nlet mayBill = 150;\\nlet juneBill = 180;\\nlet julyBill = 200;\\nlet augustBill = 190;\\nlet septemberBill = 160;\\nlet octoberBill = 140;\\nlet novemberBill = 135;\\nlet decemberBill = 170;\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the const keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill +\\n                    julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill;\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 210,
  "fields": {
    "learner_github_id": "209533182",
    "learner_name": "Patrick McIsaac",
    "title": "Data Types",
    "slug": "leonids-data-types",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-05-09T01:43:54.762Z",
    "first_attempt": "2025-05-09T01:40:02.995Z",
    "last_attempt": "2025-05-09T01:43:54.762Z",
    "completed_code": "{'code': 'function createToy(name, category, ageRecommendation, isBatteryOperated, features, dimensions) {\\n    return {\\n        name,\\n        category,\\n        ageRecommendation,\\n        isBatteryOperated,\\n        features,\\n        dimensions\\n    };\\n}\\n\\n// TODO: Call createToy with the correct data types\\nconst myToy = createToy( \"john\", \"toything\", 5, false, [\\'stuff\\',\\'things\\'],{height:3, width:4,});\\nconsole.log(myToy)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 211,
  "fields": {
    "learner_github_id": "209533182",
    "learner_name": "Patrick McIsaac",
    "title": "Data Structures",
    "slug": "leonids-data-structures",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-09T01:52:02.080Z",
    "first_attempt": "2025-05-09T01:51:39.393Z",
    "last_attempt": "2025-05-09T01:52:02.080Z",
    "completed_code": "{'code': '\\n    const inventory = [\\n  { id: 101, name: \"Hand-Carved Wooden Train\", maker: \"Leonid\" },\\n  { id: 102, name: \"Painted Rocking Horse\", maker: \"Leonid\" },\\n  { id: 103, name: \"Stuffed Bear with Bow Tie\", maker: \"Leonid\" },\\n  { id: 104, name: \"Miniature Sailboat\", maker: \"Leonid\" },\\n  { id: 105, name: \"Patchwork Doll\", maker: \"Leonid\" },\\n  { id: 106, name: \"Wooden Puzzle Box\", maker: \"Leonid\" },\\n  { id: 107, name: \"Knitted Sock Monkey\", maker: \"Leonid\" },\\n  { id: 108, name: \"Spinning Top\", maker: \"Leonid\" },\\n  { id: 109, name: \"Tiny Puppet Theater\", maker: \"Leonid\" },\\n  { id: 110, name: \"Hand-Painted Marbles\", maker: \"Leonid\" },\\n  { id: 111, name: \"Fabric Kite with Tail\", maker: \"Leonid\" },\\n  { id: 112, name: \"Wool-Stuffed Bunny\", maker: \"Leonid\" },\\n  { id: 113, name: \"Wooden Xylophone\", maker: \"Leonid\" },\\n  { id: 114, name: \"Tin Wind-Up Robot\", maker: \"Leonid\" },\\n  { id: 115, name: \"Miniature Toy Chest\", maker: \"Leonid\" }\\n];\\n\\nfunction findToyById(toys, id) {\\n  // Your code here\\n  for(const toy of toys){\\n    if(toy.id === id ) {\\n        return toy\\n    } else {\\n        return null\\n    }\\n  }\\n}\\n\\nconst myToy = findToyById(inventory, 105)\\nconsole.log(myToy)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 212,
  "fields": {
    "learner_github_id": "209533182",
    "learner_name": "Patrick McIsaac",
    "title": "Representing Toys as Objects",
    "slug": "leonids-objects",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-05-09T01:59:39.928Z",
    "first_attempt": "2025-05-09T01:55:55.777Z",
    "last_attempt": "2025-05-09T01:59:39.928Z",
    "completed_code": "{'code': \"const woodenTrain = {\\n    name: 'dollie',\\n    manufacturer: 'toyota',\\n    priceInDollars: 123,\\n    inStock: false,\\n    recommendedAgeRange: '12 -13',\\n    weightInGrams: null\\n}\\nconst stuffedRabbit = {\\n    name: 'dollie',\\n    manufacturer: 'toyota',\\n    priceInDollars: null,\\n    inStock: false,\\n    recommendedAgeRange: '12 -13',\\n    weightInGrams: 33\\n}\\nconst kite = {\\n    name: 'dollie',\\n    manufacturer: null,\\n    priceInDollars: 123,\\n    inStock: false,\\n    recommendedAgeRange: '12 -13',\\n    weightInGrams: 2\\n}\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 213,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T18:25:43.577Z",
    "first_attempt": "2025-05-22T18:25:43.572Z",
    "last_attempt": "2025-05-22T18:25:43.577Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Lenovo ThinkBook 13x Gen 4\";\\nconst phone = \"Galaxy S24+\";\\nconst television = \"Samsung TV\";\\nconst refrigerator = \"Samsung Refrigerator\";\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}.`;\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 214,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T18:26:12.672Z",
    "first_attempt": "2025-05-22T18:26:12.665Z",
    "last_attempt": "2025-05-22T18:26:12.672Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome;\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 215,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T18:26:43.361Z",
    "first_attempt": "2025-05-22T18:26:43.356Z",
    "last_attempt": "2025-05-22T18:26:43.361Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Calculate total monthly income\\nconst totalMonthlyIncome = myIncome + spouseIncome\\n\\n// Calculate total monthly expenses\\nconst totalMonthlyExpenses = phoneBill + mortgage + carInsurance + healthInsurance\\n\\n// Calculate net monthly income\\nconst netMonthlyIncome = totalMonthlyIncome - totalMonthlyExpenses\\n\\n// Create the formatted output string using backticks\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\nconsole.log(statement)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 216,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-09T14:31:00.714Z",
    "first_attempt": "2025-05-09T14:30:33.473Z",
    "last_attempt": "2025-05-09T14:31:00.714Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nlet februaryBill = 160\\nlet marchBill = 130\\nlet aprilBill = 108\\nlet mayBill = 110\\nlet juneBill = 125\\nlet julyBill = 132\\nlet augustBill = 140\\nlet septemberBill = 118\\nlet octoberBill = 123\\nlet novemberBill = 137\\nlet decemberBill = 148\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + \\n                    aprilBill + mayBill + juneBill + julyBill\\n                    + augustBill + septemberBill + octoberBill\\n                    + novemberBill + decemberBill;\\n                                     \\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 217,
  "fields": {
    "learner_github_id": "198821962",
    "learner_name": "Michael Scott Burke",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-09T14:42:00.207Z",
    "first_attempt": null,
    "last_attempt": "2025-05-09T14:42:00.207Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 218,
  "fields": {
    "learner_github_id": "198821962",
    "learner_name": "Michael Scott Burke",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-09T14:48:09.588Z",
    "first_attempt": null,
    "last_attempt": "2025-05-09T14:48:09.588Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 219,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-09T14:51:39.825Z",
    "first_attempt": "2025-05-09T14:51:39.824Z",
    "last_attempt": "2025-05-09T14:51:39.825Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Dell Laptop\"\\nconst phone = \"iPhone 13\"\\nconst television = \"Roku 60 inch Flatscreen\"\\nconst refrigerator = \"Frigidaire 6000\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}.`;\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 220,
  "fields": {
    "learner_github_id": "198821962",
    "learner_name": "Michael Scott Burke",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-09T14:51:50.430Z",
    "first_attempt": null,
    "last_attempt": "2025-05-09T14:51:50.430Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 221,
  "fields": {
    "learner_github_id": "198821962",
    "learner_name": "Michael Scott Burke",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-09T15:06:15.470Z",
    "first_attempt": null,
    "last_attempt": "2025-05-09T15:06:15.471Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 222,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-09T15:32:23.299Z",
    "first_attempt": "2025-05-09T15:31:36.127Z",
    "last_attempt": "2025-05-09T15:32:23.299Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome\\ncombinedIncome += spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome = combinedIncome - internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 223,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T18:27:18.270Z",
    "first_attempt": "2025-05-22T18:27:18.262Z",
    "last_attempt": "2025-05-22T18:27:18.270Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \",\"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.substring(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 224,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 19,
    "complete": true,
    "completed_on": "2025-05-09T17:52:33.059Z",
    "first_attempt": "2025-05-09T15:47:41.871Z",
    "last_attempt": "2025-05-09T17:52:33.059Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\nconsole.log(`Combined monthly income: ${myIncome + spouseIncome}`)\\nconsole.log(`Total monthly expenses: ${phoneBill + mortgage + carInsurance + healthInsurance}`)\\nconsole.log(`Net monthly income: ${myIncome + spouseIncome - phoneBill - mortgage - carInsurance - healthInsurance}`)\\n // Use backticks and calculations here'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 225,
  "fields": {
    "learner_github_id": "210299267",
    "learner_name": "Bedon Lancaster",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-09T16:02:01.222Z",
    "first_attempt": null,
    "last_attempt": "2025-05-09T16:02:01.222Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 226,
  "fields": {
    "learner_github_id": "202809763",
    "learner_name": "Dylan Johnson",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-09T16:02:49.888Z",
    "first_attempt": null,
    "last_attempt": "2025-05-09T16:02:49.888Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 227,
  "fields": {
    "learner_github_id": "210299267",
    "learner_name": "Bedon Lancaster",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-09T16:28:09.376Z",
    "first_attempt": "2025-05-09T16:27:11.461Z",
    "last_attempt": "2025-05-09T16:28:09.376Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 69\\nlet marchBill = 420\\nlet aprilBill = 420\\nlet mayBill = 69\\nlet juneBill = 420\\nlet julyBill = 69\\nlet augustBill = 420\\nlet septemberBill = 69\\nlet octoberBill = 420\\nlet novemberBill = 69\\nlet decemberBill = 420\\n\\nlet yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 228,
  "fields": {
    "learner_github_id": "210299267",
    "learner_name": "Bedon Lancaster",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-09T16:31:18.558Z",
    "first_attempt": "2025-05-09T16:31:18.557Z",
    "last_attempt": "2025-05-09T16:31:18.558Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"MacBook Pro\"\\nconst phone = \"iPhone 16\"\\nconst television = \"Phillips 55 inch\"\\nconst refrigerator = \"Fucking fridge\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 229,
  "fields": {
    "learner_github_id": "209769569",
    "learner_name": "Gary Venus",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-09T16:35:07.820Z",
    "first_attempt": null,
    "last_attempt": "2025-05-09T16:35:07.820Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 230,
  "fields": {
    "learner_github_id": "210299267",
    "learner_name": "Bedon Lancaster",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-09T16:37:00.705Z",
    "first_attempt": "2025-05-09T16:37:00.704Z",
    "last_attempt": "2025-05-09T16:37:00.705Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\nconst totalBills = internetBill + waterBill + electricBill + fuelExpenses + foodExpenses\\nconsole.log(totalBills)\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\nconsole.log(combinedIncome)\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - totalBills\\nconsole.log(netIncome)\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 231,
  "fields": {
    "learner_github_id": "210299267",
    "learner_name": "Bedon Lancaster",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-05-09T20:10:19.608Z",
    "first_attempt": "2025-05-09T16:53:33.956Z",
    "last_attempt": "2025-05-09T20:10:19.608Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n// const bigIncome = myIncome + spouseIncome\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// const monthlyExpenses = phoneBill + mortgage + carInsurance + healthInsurance\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\nconsole.log(statement)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 232,
  "fields": {
    "learner_github_id": "209769569",
    "learner_name": "Gary Venus",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-09T16:54:34.894Z",
    "first_attempt": "2025-05-09T16:54:34.893Z",
    "last_attempt": "2025-05-09T16:54:34.894Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 230\\nlet marchBill = 130\\nlet aprilBill= 45\\nlet mayBill=65\\nlet juneBill=70\\nlet julyBill=86\\nlet augustBill=90\\nlet septemberBill=100\\nlet octoberBill=120\\nlet novemberBill=340\\nlet decemberBill=120\\n\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = \\njanuaryBill+februaryBill+marchBill+aprilBill+mayBill+juneBill+julyBill+augustBill+septemberBill+\\noctoberBill+novemberBill+decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 233,
  "fields": {
    "learner_github_id": "202809763",
    "learner_name": "Dylan Johnson",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-09T16:58:29.130Z",
    "first_attempt": "2025-05-09T16:58:00.638Z",
    "last_attempt": "2025-05-09T16:58:29.130Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Dell\"\\nconst phone = \"IPhone 5\"\\nconst television = \"Samsung 4K\"\\nconst refrigerator = \"The Fridge\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = \"I have the following electronic devices. my ${television}, my ${computer}, my ${refrigerator}, and my ${phone}\"\\n\\n// Your sentence should look like:\\n// `I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone`\\n\\nconsole.log(allElectronics)\\nconsole.log(allElectronics)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 234,
  "fields": {
    "learner_github_id": "209769569",
    "learner_name": "Gary Venus",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-09T17:01:20.585Z",
    "first_attempt": "2025-05-09T17:00:33.619Z",
    "last_attempt": "2025-05-09T17:01:20.585Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"mac\"\\nconst phone = \"iphone\"\\nconst television = \"samsung\"\\nconst refrigerator = \"whirlpool\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. my ${television} television, my ${computer} computer,my ${refrigerator} refrigerator, and my ${phone} phone`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 235,
  "fields": {
    "learner_github_id": "202809763",
    "learner_name": "Dylan Johnson",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-09T18:16:27.674Z",
    "first_attempt": "2025-05-09T18:14:51.573Z",
    "last_attempt": "2025-05-09T18:16:27.674Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 7900\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 6747\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 236,
  "fields": {
    "learner_github_id": "208382732",
    "learner_name": "Gavin Beaudet",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-09T18:14:30.264Z",
    "first_attempt": null,
    "last_attempt": "2025-05-09T18:14:30.264Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 237,
  "fields": {
    "learner_github_id": "209552604",
    "learner_name": "Stephen",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-09T18:15:36.730Z",
    "first_attempt": null,
    "last_attempt": "2025-05-09T18:15:36.730Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 238,
  "fields": {
    "learner_github_id": "209769569",
    "learner_name": "Gary Venus",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-09T18:18:50.286Z",
    "first_attempt": "2025-05-09T18:17:30.072Z",
    "last_attempt": "2025-05-09T18:18:50.286Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\nlet allBills= internetBill+waterBill+electricBill+fuelExpenses+foodExpenses\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - allBills\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 239,
  "fields": {
    "learner_github_id": "209769569",
    "learner_name": "Gary Venus",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 15,
    "complete": true,
    "completed_on": "2025-05-09T19:04:05.548Z",
    "first_attempt": "2025-05-09T18:19:42.684Z",
    "last_attempt": "2025-05-09T19:04:05.548Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n//const statement = `Our combined monthly income is ${myIncome + spouseIncome}\\n//Our total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}\\n//Our net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}`\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\nconsole.log(statement)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 240,
  "fields": {
    "learner_github_id": "209552604",
    "learner_name": "Stephen",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-09T18:33:03.099Z",
    "first_attempt": "2025-05-09T18:25:34.529Z",
    "last_attempt": "2025-05-09T18:33:03.099Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\nlet februaryBill = 123\\nlet marchBill = 134\\nlet aprilBill = 156\\nlet mayBill = 143\\nlet juneBill = 145\\nlet julyBill = 145\\nlet augustBill = 132\\nlet septemberBill = 165\\nlet octoberBill = 194\\nlet novemberBill = 130\\nlet decemberBill = 156\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 241,
  "fields": {
    "learner_github_id": "208865850",
    "learner_name": "Kolby Simons",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-09T18:29:13.705Z",
    "first_attempt": "2025-05-09T18:28:59.381Z",
    "last_attempt": "2025-05-09T18:29:13.705Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 153\\nlet marchBill = 130\\nlet aprilBill = 125\\nlet mayBill = 100\\nlet juneBill = 123\\nlet julyBill = 134\\nlet augustBill = 121\\nlet septemberBill = 113\\nlet octoberBill = 118\\nlet novemberBill = 132\\nlet decemberBill = 148\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill;\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 242,
  "fields": {
    "learner_github_id": "202809763",
    "learner_name": "Dylan Johnson",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 9,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-09T18:30:53.462Z",
    "last_attempt": "2025-05-18T14:40:53.435Z",
    "completed_code": null,
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 243,
  "fields": {
    "learner_github_id": "208865850",
    "learner_name": "Kolby Simons",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-09T18:35:07.036Z",
    "first_attempt": "2025-05-09T18:35:07.036Z",
    "last_attempt": "2025-05-09T18:35:07.036Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Custom gaming PC\"\\nconst phone = \"Iphone 14 Pro Max\"\\nconst television = \"47 inch Sony\"\\nconst refrigerator = \"LG\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `My devices are, Fridge: ${refrigerator}, Phone: ${phone}, Tv: ${television}, Computer: ${computer}`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 244,
  "fields": {
    "learner_github_id": "208865850",
    "learner_name": "Kolby Simons",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-09T18:40:11.754Z",
    "first_attempt": "2025-05-09T18:38:32.059Z",
    "last_attempt": "2025-05-09T18:40:11.754Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\nlet totalBills = internetBill + waterBill + electricBill + fuelExpenses + foodExpenses;\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome;\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - totalBills\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 245,
  "fields": {
    "learner_github_id": "209552604",
    "learner_name": "Stephen",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-09T18:44:40.140Z",
    "first_attempt": "2025-05-09T18:44:40.139Z",
    "last_attempt": "2025-05-09T18:44:40.140Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Macbook Pro\"\\nconst phone = \"Iphone\"\\nconst television = \"Sony\"\\nconst refrigerator = \"Sampson\";\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics =`I have the following electronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}`\\n\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 246,
  "fields": {
    "learner_github_id": "208865850",
    "learner_name": "Kolby Simons",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-09T18:51:54.313Z",
    "first_attempt": "2025-05-09T18:47:36.950Z",
    "last_attempt": "2025-05-09T18:51:54.313Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.` // Use backticks and calculations here\\n\\nconsole.log(statement);'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 247,
  "fields": {
    "learner_github_id": "209552604",
    "learner_name": "Stephen",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-09T18:52:29.534Z",
    "first_attempt": "2025-05-09T18:52:29.533Z",
    "last_attempt": "2025-05-09T18:52:29.534Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 248,
  "fields": {
    "learner_github_id": "208382732",
    "learner_name": "Gavin Beaudet",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-09T19:04:44.428Z",
    "first_attempt": "2025-05-09T18:53:50.013Z",
    "last_attempt": "2025-05-09T19:04:44.428Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses;\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 249,
  "fields": {
    "learner_github_id": "208382732",
    "learner_name": "Gavin Beaudet",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-09T19:00:28.210Z",
    "first_attempt": "2025-05-09T19:00:28.209Z",
    "last_attempt": "2025-05-09T19:00:28.210Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145;\\n\\n// Declare variables for the remaining months with the `let` keyword\\nlet februaryBill = 130;\\nlet marchBill = 150;\\nlet aprilBill = 120;\\nlet mayBill = 135;\\nlet juneBill = 160;\\nlet julyBill = 170;\\nlet augustBill = 165;\\nlet septemberBill = 140;\\nlet octoberBill = 125;\\nlet novemberBill = 155;\\nlet decemberBill = 180;\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill;\\n\\n// console.log will print the value of the variable to the console\\nconsole.log(yearlyTotal);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 250,
  "fields": {
    "learner_github_id": "208382732",
    "learner_name": "Gavin Beaudet",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-09T19:00:47.053Z",
    "first_attempt": "2025-05-09T19:00:47.053Z",
    "last_attempt": "2025-05-09T19:00:47.053Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"laptop\";\\nconst phone = \"smartphone\";\\nconst television = \"LED TV\";\\nconst refrigerator = \"double-door fridge\";\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}.`;\\n\\nconsole.log(allElectronics);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 251,
  "fields": {
    "learner_github_id": "208382732",
    "learner_name": "Gavin Beaudet",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-09T19:02:26.527Z",
    "first_attempt": "2025-05-09T19:01:29.990Z",
    "last_attempt": "2025-05-09T19:02:26.527Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388;\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512;\\n\\n// Monthly bills\\nconst internetBill = 158;\\nconst waterBill = 68;\\nconst electricBill = 129;\\nconst fuelExpenses = 295;\\nconst foodExpenses = 503;\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome;\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - (internetBill + waterBill + electricBill + fuelExpenses + foodExpenses);\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`;\\n\\nconsole.log(output);\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 252,
  "fields": {
    "learner_github_id": "208865850",
    "learner_name": "Kolby Simons",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-09T19:06:27.041Z",
    "first_attempt": "2025-05-09T19:05:41.882Z",
    "last_attempt": "2025-05-09T19:06:27.041Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim();\\nconst formattedPhone = phone.replace(\" \", \"-\");\\nconst formattedName = customerName.toUpperCase(0);\\nconst containsX = password.includes(\"x\");\\nconst fileStart = filename.slice(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 253,
  "fields": {
    "learner_github_id": "209769569",
    "learner_name": "Gary Venus",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-09T19:39:50.703Z",
    "first_attempt": "2025-05-09T19:21:09.087Z",
    "last_attempt": "2025-05-09T19:39:50.703Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone =phone.replace(\" \" , \"-\") \\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice (0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 254,
  "fields": {
    "learner_github_id": "208865850",
    "learner_name": "Kolby Simons",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-09T19:32:39.976Z",
    "first_attempt": "2025-05-09T19:30:52.033Z",
    "last_attempt": "2025-05-09T19:32:39.976Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n} else {\\n    console.log(\"Netlix had nothing to watch.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 255,
  "fields": {
    "learner_github_id": "209552604",
    "learner_name": "Stephen",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 16,
    "complete": true,
    "completed_on": "2025-05-09T20:28:51.902Z",
    "first_attempt": "2025-05-09T19:32:47.703Z",
    "last_attempt": "2025-05-09T20:28:51.902Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\n\\nconsole.log(statement)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 256,
  "fields": {
    "learner_github_id": "208865850",
    "learner_name": "Kolby Simons",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-05-09T19:47:15.134Z",
    "first_attempt": "2025-05-09T19:35:30.171Z",
    "last_attempt": "2025-05-09T19:47:15.134Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sandals\"\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"Sweater\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Boots\"\\n}\\n\\nconsole.log(`This is what I\\'m wearing today:\\n${torsoClothing} on my torso\\n${legClothing} on my legs\\n${footWear} on my feet\\n`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 257,
  "fields": {
    "learner_github_id": "210299267",
    "learner_name": "Bedon Lancaster",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-09T19:58:44.096Z",
    "first_attempt": "2025-05-09T19:47:16.152Z",
    "last_attempt": "2025-05-09T19:58:44.096Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = (email.trim())\\nconst formattedPhone = (phone.replace(\" \", \"-\"))\\nconst formattedName = (customerName.toUpperCase())\\nconst containsX = (password.includes(\"x\"))\\nconst fileStart = (filename.slice(0,4))\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 258,
  "fields": {
    "learner_github_id": "202809763",
    "learner_name": "Dylan Johnson",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-09T20:19:13.910Z",
    "first_attempt": "2025-05-09T19:48:33.839Z",
    "last_attempt": "2025-05-09T20:19:13.910Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst fileName = \"vacation.jpg\"\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replaceAll(\"555 0123\", \"555-0123\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = fileName.substring(0,4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 259,
  "fields": {
    "learner_github_id": "209769569",
    "learner_name": "Gary Venus",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-09T20:03:36.765Z",
    "first_attempt": "2025-05-09T19:51:18.711Z",
    "last_attempt": "2025-05-09T20:03:36.765Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n\\n\\n} else {\"im going to watch Netflix all day\" }'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 260,
  "fields": {
    "learner_github_id": "209769569",
    "learner_name": "Gary Venus",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 13,
    "complete": true,
    "completed_on": "2025-05-09T21:03:26.492Z",
    "first_attempt": "2025-05-09T20:11:30.243Z",
    "last_attempt": "2025-05-09T21:03:26.492Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n     torsoClothing = \"t-shirt\"\\n     legClothing = \"shorts\"\\n     footWear = \"sandals\"\\n    }\\n    else if (temperature < 95 && temperature >= 75 ) {\\n     torsoClothing = \"t-shirt\"\\n     legClothing = \"shorts\"\\n     footWear = \"sneakers\"\\n    } else if (temperature < 75 && temperature >= 50) {\\n     torsoClothing = \"sweater\"\\n     legClothing = \"pants\"\\n     footWear = \"sneakers\"\\n    } else if (temperature < 50 && temperature >= 35) {\\n     torsoClothing = \"Jacket\"\\n     legClothing = \"pants\"\\n     footWear = \"sneakers\"\\n} else  {\\n     torsoClothing = \"t-shirt\"\\n     legClothing = \"pants\"\\n     footWear = \"boots\"\\n}\\n\\nconsole.log(`you should wear ${torsoClothing}${legClothing}${footWear}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 261,
  "fields": {
    "learner_github_id": "210299267",
    "learner_name": "Bedon Lancaster",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-09T20:34:53.860Z",
    "first_attempt": "2025-05-09T20:15:03.202Z",
    "last_attempt": "2025-05-09T20:34:53.860Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n   console.log(\"Yoga was fun today.\")\\n   }\\n   else { \\n    console.log(\"I watched Netflix\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 262,
  "fields": {
    "learner_github_id": "208865850",
    "learner_name": "Kolby Simons",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-09T20:21:30.357Z",
    "first_attempt": null,
    "last_attempt": "2025-05-09T20:21:30.357Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 263,
  "fields": {
    "learner_github_id": "208865850",
    "learner_name": "Kolby Simons",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-09T20:21:30.960Z",
    "first_attempt": null,
    "last_attempt": "2025-05-09T20:21:30.960Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 264,
  "fields": {
    "learner_github_id": "208865850",
    "learner_name": "Kolby Simons",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-09T20:21:31.495Z",
    "first_attempt": null,
    "last_attempt": "2025-05-09T20:21:31.495Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 265,
  "fields": {
    "learner_github_id": "208865850",
    "learner_name": "Kolby Simons",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-09T20:21:32.102Z",
    "first_attempt": null,
    "last_attempt": "2025-05-09T20:21:32.102Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 266,
  "fields": {
    "learner_github_id": "202809763",
    "learner_name": "Dylan Johnson",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-09T20:34:39.345Z",
    "first_attempt": "2025-05-09T20:24:47.035Z",
    "last_attempt": "2025-05-09T20:34:39.345Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nlet iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n   console.log(\"I watched Netflix all day.\")\\n}    \\nelse {\\n   console.log(\"Yoga was fun today.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 267,
  "fields": {
    "learner_github_id": "210299267",
    "learner_name": "Bedon Lancaster",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-05-09T20:40:44.960Z",
    "first_attempt": "2025-05-09T20:36:45.109Z",
    "last_attempt": "2025-05-09T20:40:44.960Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n} else if (temperature <= 95 && temperature >= 75){\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n} else if (temperature <= 75 && temperature >= 50){\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n} else if (temperature <= 50 && temperature >= 35){\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n} else {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\"\\n}\\n\\n\\nconsole.log(`You should wear ${torsoClothing}, ${legClothing}, ${footWear}.`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 268,
  "fields": {
    "learner_github_id": "209552604",
    "learner_name": "Stephen",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-13T20:50:56.685Z",
    "first_attempt": "2025-05-09T20:42:08.458Z",
    "last_attempt": "2025-05-13T20:50:56.685Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\nconsole.log(password.includes(\"x\"))\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\"555 0123\", \"555-0123\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = false\\nconst fileStart = filename.slice (0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(email.trim())\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 269,
  "fields": {
    "learner_github_id": "202809763",
    "learner_name": "Dylan Johnson",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-05-09T21:32:40.758Z",
    "first_attempt": "2025-05-09T20:43:56.309Z",
    "last_attempt": "2025-05-09T21:32:40.758Z",
    "completed_code": "{'code': 'let torsoClothing = \" \"\\nlet legClothing = \" \"\\nlet footWear = \" \"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\n   if (temperature >= 95) {\\n   torsoClothing= \"t-shirt\" \\n   legClothing= \"shorts\"\\n   footWear = \"sandals\" \\nconsole.log(\"you will wear a t-shirt. You will wear shorts. You will wear sandals.\")// Add your code here\\n}\\n   else if (temperature >= 75 && temperature <= 95) {\\n      torsoClothing = \"t-shirt\"\\n      legClothing = \"shorts\"\\n      footWear = \"sneakers\"\\nconsole.log(\"you will wear a t-shirt. You will wear shorts. You will wear sneakers.\")      \\n}\\n   else if (temperature >= 50 && temperature <= 75) {\\n      torsoClothing = \"sweater\" \\n      legClothing = \"pants\"\\n      footWear = \"sneakers\"\\nconsole.log(\"you will wear a sweater. You will wear pants. You will wear sneakers.\")\\n}\\n   else if (temperature >= 35 && temperature <= 50) {\\n      torsoClothing = \"jacket\"\\n      legClothing = \"pants\"\\n      footWear = \"sneakers\"\\nconsole.log(\"you will wear a jacket. You will wear pants. You will wear sneakers.\")\\n}\\n   else if (temperature <= 35) {\\n      torsoClothing = \"jacket\" \\n      legClothing = \"pants\"\\n      footWear = \"boots\"\\nconsole.log(\"you will wear a jacket. You will wear pants. You will wear boots.\")\\n   }\\nconsole.log(\"you will wear `${torsoClothing}, ${legClothing}, ${footwear}`\")\\n\\n\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 270,
  "fields": {
    "learner_github_id": "531426",
    "learner_name": "Michael Scott Burke",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-09T20:59:35.014Z",
    "first_attempt": "2025-05-09T20:58:08.410Z",
    "last_attempt": "2025-05-09T20:59:35.014Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145;\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nlet februaryBill = 164;\\nlet marchBill = 158;\\nlet aprilBill = 150;\\nlet mayBill = 170;\\nlet juneBill = 190;\\nlet julyBill = 220;\\nlet augustBill = 256;\\nlet septemberBill = 100;\\nlet octoberBill = 180;\\nlet novemberBill = 155;\\nlet decemberBill = 155;\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nlet yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill;\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal);\\n//format in us dollars\\nconsole.log(yearlyTotal.toLocaleString(\"en-US\",{style: \"currency\", currency: \"USD\"}));\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 271,
  "fields": {
    "learner_github_id": "209552604",
    "learner_name": "Stephen",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-09T21:16:29.146Z",
    "first_attempt": "2025-05-09T20:59:38.033Z",
    "last_attempt": "2025-05-09T21:16:29.146Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n} else {\\n    console.log(\"I watched my favorite shows on Netflix all day.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 272,
  "fields": {
    "learner_github_id": "531426",
    "learner_name": "Michael Scott Burke",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-09T21:08:47.871Z",
    "first_attempt": "2025-05-09T21:08:38.244Z",
    "last_attempt": "2025-05-09T21:08:47.871Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"MacBook Pro 2.7 GHz Quad-Core Intel Core i7\";\\nconst phone = \"iphone 15 Pro\";\\nconst television = \"Samsung 85 inch QLED\";\\nconst refrigerator = \"Jenn-Air 42-Inch Built-In Side-by-Side\";\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television} television, my ${computer} computer, my ${refrigerator} refrigerator, and my ${phone} phone`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 273,
  "fields": {
    "learner_github_id": "209769569",
    "learner_name": "Gary Venus",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 50,
    "complete": true,
    "completed_on": "2025-05-10T14:52:00.760Z",
    "first_attempt": "2025-05-09T21:28:29.505Z",
    "last_attempt": "2025-05-10T14:52:00.760Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos= femalePhotos + malePhotos\\n\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) { \\nphotoStorage = \"Photo Album\"\\n} else if (totalPhotos < 110 && totalPhotos >= 50 ) {\\nphotoStorage = \"Shoe Box\"\\n} else { (totalPhotos < 50) \\nphotoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\nalbumColor = \"plum\" }\\nelse {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output =  `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 274,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-03T22:33:02.070Z",
    "first_attempt": null,
    "last_attempt": "2025-06-03T22:33:02.070Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 275,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-22T18:30:56.593Z",
    "last_attempt": "2025-05-22T18:33:47.888Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 276,
  "fields": {
    "learner_github_id": "531426",
    "learner_name": "Michael Scott Burke",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-05-10T01:02:08.324Z",
    "first_attempt": "2025-05-10T00:57:04.008Z",
    "last_attempt": "2025-05-10T01:02:08.324Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome +=  myIncome\\ncombinedIncome +=  spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\nnetIncome += combinedIncome\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 277,
  "fields": {
    "learner_github_id": "531426",
    "learner_name": "Michael Scott Burke",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-05-10T13:36:39.240Z",
    "first_attempt": "2025-05-10T01:12:29.412Z",
    "last_attempt": "2025-05-10T13:36:39.240Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\nconsole.log(statement);'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 278,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-05-22T22:53:33.515Z",
    "first_attempt": "2025-05-22T22:27:37.961Z",
    "last_attempt": "2025-05-22T22:53:33.515Z",
    "completed_code": "{'code': 'let torsoClothing = \"\";\\nlet legClothing = \"\";\\nlet footWear = \"\";\\n\\nconst temperature = 48;\\nif (temperature >= 95) {\\n    torsoClothing = \"T-shirt\";\\n    legClothing = \"Shorts\";\\n    footWear = \"Sandals\";\\n} else if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"T-shirt\";\\n    legClothing = \"Shorts\";\\n    footWear = \"Sneakers\";\\n} else if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"Sweater\";\\n    legClothing = \"Pants\";\\n    footWear = \"Sneakers\";\\n} else if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"Jacket\";\\n    legClothing = \"Pants\";\\n    footWear = \"Sneakers\";\\n} \\nif (temperature < 35) {\\n    torsoClothing = \"Jacket\";\\n    legClothing = \"Pants\";\\n    footWear = \"Boots\";\\n}\\n\\n// Final Output\\nconsole.log(`When the temperature is ${temperature} degrees, you should wear:);\\nconsole.log(Top: ${torsoClothing});\\nconsole.log(Bottom: ${legClothing});\\nconsole.log(Footwear: ${footWear}`);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 279,
  "fields": {
    "learner_github_id": "531426",
    "learner_name": "Michael Scott Burke",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-10T01:44:30.724Z",
    "first_attempt": null,
    "last_attempt": "2025-05-10T01:44:30.724Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 280,
  "fields": {
    "learner_github_id": "531426",
    "learner_name": "Michael Scott Burke",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-10T01:44:31.847Z",
    "first_attempt": null,
    "last_attempt": "2025-05-10T01:44:31.847Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 281,
  "fields": {
    "learner_github_id": "531426",
    "learner_name": "Michael Scott Burke",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-10T01:44:32.518Z",
    "first_attempt": null,
    "last_attempt": "2025-05-10T01:44:32.518Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 282,
  "fields": {
    "learner_github_id": "531426",
    "learner_name": "Michael Scott Burke",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-10T01:44:33.168Z",
    "first_attempt": null,
    "last_attempt": "2025-05-10T01:44:33.168Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 283,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-10T20:04:58.917Z",
    "first_attempt": null,
    "last_attempt": "2025-05-10T20:04:58.917Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 284,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-10T20:04:59.574Z",
    "first_attempt": null,
    "last_attempt": "2025-05-10T20:04:59.574Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 285,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-10T20:05:00.318Z",
    "first_attempt": null,
    "last_attempt": "2025-05-10T20:05:00.318Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 286,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-10T20:05:00.837Z",
    "first_attempt": null,
    "last_attempt": "2025-05-10T20:05:00.837Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 287,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-10T09:34:34.467Z",
    "first_attempt": "2025-05-10T09:32:49.540Z",
    "last_attempt": "2025-05-10T09:34:34.467Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 120\\nlet marchBill = 200\\nlet aprilBill = 100\\nlet mayBill = 80\\nlet juneBill = 410\\nlet julyBill = 350\\nlet augustBill = 290\\nlet septemberBill = 153\\nlet octoberBill = 40\\nlet novemberBill = 90\\nlet decemberBill = 200\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 288,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-10T20:36:48.301Z",
    "first_attempt": "2025-05-10T20:36:48.300Z",
    "last_attempt": "2025-05-10T20:36:48.301Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"a\"\\nconst phone = \"b\"\\nconst television = \"c\"\\nconst refrigerator = \"d\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I play games on ${computer} and text on my ${phone}. My TV is ${television} and my fridge is ${refrigerator}.`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 289,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-10T20:40:37.995Z",
    "first_attempt": "2025-05-10T20:40:37.994Z",
    "last_attempt": "2025-05-10T20:40:37.995Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome += combinedIncome - internetBill - waterBill - electricBill - fuelExpenses - foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 290,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 54,
    "complete": true,
    "completed_on": "2025-05-13T14:22:34.942Z",
    "first_attempt": "2025-05-10T10:07:32.855Z",
    "last_attempt": "2025-05-13T14:22:34.942Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Combined monthly income: ${myIncome + spouseIncome}\\nTotal monthly expenses: ${phoneBill + mortgage + carInsurance + healthInsurance}\\nNet monthly income: ${myIncome + spouseIncome - phoneBill - mortgage - carInsurance - healthInsurance}`\\n\\nconsole.log(statement)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 291,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-10T19:07:44.902Z",
    "first_attempt": "2025-05-10T19:07:44.901Z",
    "last_attempt": "2025-05-10T19:07:44.902Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail =  email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 292,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-11T04:04:34.841Z",
    "first_attempt": "2025-05-11T04:04:34.840Z",
    "last_attempt": "2025-05-11T04:04:34.841Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \",\"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0,4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 293,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-10T20:47:40.211Z",
    "first_attempt": "2025-05-10T20:47:40.210Z",
    "last_attempt": "2025-05-10T20:47:40.211Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse {\\n   console.log(\"Ok, time to watch some juicy ass Netflix!\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 294,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-11T03:49:39.404Z",
    "first_attempt": "2025-05-11T03:45:36.708Z",
    "last_attempt": "2025-05-11T03:49:39.404Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    const basePoints = (time * 100) + (targets * 50);\\n    return basePoints;\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    let bonusPoints = 0;\\n    if (targets > 10) {\\n        bonusPoints += 1000;\\n        return bonusPoints\\n    } else {\\n        return bonusPoints\\n    }\\n}\\n\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n    const pointSum = calculateBasePoints(time, targets) + calculateBonus(targets)\\n    // Add the results together and return the sum\\n    return pointSum\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\n\\nlet finalScore = calculateFinalScore(2, 5)\\nconsole.log(finalScore)\\n\\nfinalScore = calculateFinalScore(10, 12)\\nconsole.log(finalScore)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 295,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-11T04:23:04.323Z",
    "first_attempt": "2025-05-11T04:21:47.457Z",
    "last_attempt": "2025-05-11T04:23:04.323Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n   torsoClothing = \"t-shirt\"\\n   legClothing = \"shorts\"\\n   footWear = \"sandals\"\\n} else if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n} else if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n} else if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n} else {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\"\\n}\\n\\nlet outfit = `Today I\\'m wearing ${torsoClothing}, ${legClothing}, and ${footWear}.`\\n\\nconsole.log(outfit)\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 296,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 33,
    "complete": true,
    "completed_on": "2025-05-14T15:59:58.465Z",
    "first_attempt": "2025-05-11T04:36:34.010Z",
    "last_attempt": "2025-05-14T15:59:58.465Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos += femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos < 110 && totalPhotos >= 50) {\\n    photoStorage = \"Bhoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos){\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 297,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 318,
    "complete": true,
    "completed_on": "2025-05-11T05:19:27.608Z",
    "first_attempt": "2025-05-11T05:15:13.468Z",
    "last_attempt": "2025-05-11T05:19:27.608Z",
    "completed_code": "{'files': {'index.html': \"<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n      <!-- Your content goes here -->\\n<h1>How I Became A Software Developer</h1>\\n<article> \\n  <h2>Nashville Software School</h2>\\n  <section>I love attending NSS! It is the most fun I've experienced.</section>\\n  <section>\\n    <p>I learned the following skills</p>\\n    <ol>\\n      <li>Variables</li>\\n      <li>Arrays</li>\\n      <li>Objects</li>\\n      <li>Functions</li>\\n      <li>HTML</li>\\n      <li>CSS</li>\\n      </ol>\\n  </section>\\n</article>\\n</body>\\n</html>\", 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n/* Add your styles here */\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 298,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Introduction to HTML",
    "slug": "html-elements",
    "attempts": 270,
    "complete": true,
    "completed_on": "2025-05-13T08:22:02.071Z",
    "first_attempt": "2025-05-11T05:19:33.319Z",
    "last_attempt": "2025-05-13T08:22:02.071Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n<main>\\n<article>\\n  <h1>Dale Hobbs</h1>\\n  <section>\\n    My career history is vivid and historic\\n  </section>\\n  <section>\\n    I want to become a software developer to change the world!\\n  </section>\\n</article>\\n</main>\\n\\n<footer>Dale Hobbs, 2025, dale.hobbs.dev@gmail.com</footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 299,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 18,
    "complete": true,
    "completed_on": "2025-05-11T06:20:51.150Z",
    "first_attempt": "2025-05-11T05:35:09.308Z",
    "last_attempt": "2025-05-11T06:20:51.150Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n    // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n    // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n    // Otherwise, return \"Hello, [name]!\"\\n    const letterA = name.includes(\"A\")\\n    // console.log(letterA)\\n    if (time == \"morning\" || letterA === true) {\\n        return `Good morning, ${name}!`\\n    } else if (time == \"afternoon\") {\\n        return `Good afternoon, ${name}!`\\n    } else {\\n        return `Hello, ${name}!`\\n    }\\n\\n\\n}\\n\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n    // If topic is \"weather\", return the weather joke\\n    // If topic is \"animals\", return the animals joke\\n    // Otherwise, return the default joke\\n    if (topic == \"weather\") {\\n        return `What do you call a stormy robot? A thunder-bot!`\\n    } else if (topic == \"animals\") {\\n        return `Why did the robot go to the zoo? To study creature features!`\\n    } else {\\n        return `Why was the robot tired? Because it had too many bytes!`\\n    }\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n\\n    let greetings = [];\\n\\n    for (let person of people) {\\n        newGreetings = createGreeting(person)\\n        greetings.push(newGreetings)\\n    }\\n\\n    \\n\\n    return greetings\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n    // Get the greeting\\n    let message = createGreeting(name, time);\\n    // Get the joke\\n    let joke = tellJoke(topic);\\n    // Return both together\\n    let humorousGreeting = `${message} ${joke}`\\n    return humorousGreeting\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"evening\");\\nconsole.log(greeting);\\nconst greeting2 = createGreeting(\"Jamie\", \"morning\");\\nconsole.log(greeting2);\\nconst greeting3 = createGreeting(\"Alex\", \"evening\");\\nconsole.log(greeting3);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 300,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 13,
    "complete": true,
    "completed_on": "2025-05-11T15:31:01.408Z",
    "first_attempt": "2025-05-11T14:40:05.296Z",
    "last_attempt": "2025-05-11T15:32:54.752Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 301,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-14T01:57:31.767Z",
    "first_attempt": "2025-05-11T15:34:57.056Z",
    "last_attempt": "2025-05-14T01:57:31.767Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement =`Our combined monthly income is ${myIncome + spouseIncome}.       // Use backticks and calculations here\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 302,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-06-10T01:18:38.973Z",
    "first_attempt": "2025-05-11T17:57:03.787Z",
    "last_attempt": "2025-06-10T01:18:38.973Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 303,
  "fields": {
    "learner_github_id": "209533182",
    "learner_name": "Patrick McIsaac",
    "title": "Toy Collection",
    "slug": "leonids-arrays",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-11T18:24:18.562Z",
    "first_attempt": "2025-05-11T18:24:18.559Z",
    "last_attempt": "2025-05-11T18:24:18.562Z",
    "completed_code": "{'code': 'const toyInventory = [\\n    {\\n        name: \"doll\",\\n        manufacturer: \"toy town\",\\n        priceInDollars: 23\\n    },\\n    {\\n        name: \"Rock Set\",\\n        manufacturer: \"toy nation\",\\n        priceInDollars: 33\\n    },\\n    {\\n        name: \"car\",\\n        manufacturer: null,\\n        priceInDollars: 20\\n    }\\n]'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 304,
  "fields": {
    "learner_github_id": "209533182",
    "learner_name": "Patrick McIsaac",
    "title": "Displaying Toy Properties",
    "slug": "leonids-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-11T18:29:47.999Z",
    "first_attempt": "2025-05-11T18:29:47.996Z",
    "last_attempt": "2025-05-11T18:29:47.999Z",
    "completed_code": "{'code': \"const toyInventory = [\\n    {\\n        name: 'Wooden Train',\\n        pricInDollars: 12\\n    },\\n    {\\n        name: 'Stuffed Rabbit',\\n        pricInDollars: 13\\n    },\\n    {\\n        name: 'Painted Kite',\\n        pricInDollars: 133\\n    }\\n]\\n\\nfor (const toy of toyInventory){\\n    console.log(toy.name)\\n}\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 305,
  "fields": {
    "learner_github_id": "209533182",
    "learner_name": "Patrick McIsaac",
    "title": "New Toys",
    "slug": "leonids-arrays-push",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-11T18:34:43.717Z",
    "first_attempt": "2025-05-11T18:32:41.209Z",
    "last_attempt": "2025-05-11T18:40:25.767Z",
    "completed_code": "{'code': 'const toyInventory = []\\n\\ntoyInventory.push(\\'Wooden Train\\')\\ntoyInventory.push(\"Stuffed Rabbit\")\\ntoyInventory.push(\"Painted Kite\")\\n\\nconst toyInventoryCollection = []\\n\\ntoyInventoryCollection.push({\\n    name:\"Wooden Train\",\\n    priceInDollars: 30\\n})\\ntoyInventoryCollection.push({\\n    name:\"Stuffed Rabbit\",\\n    priceInDollars: 25\\n})\\ntoyInventoryCollection.push({\\n    name:\"Painted Kite\",\\n    priceInDollars: 20\\n})'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 306,
  "fields": {
    "learner_github_id": "209533182",
    "learner_name": "Patrick McIsaac",
    "title": "Helping Customers Find the Right Toy",
    "slug": "leonids-conditionals",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-11T18:43:27.920Z",
    "first_attempt": "2025-05-11T18:38:43.684Z",
    "last_attempt": "2025-05-11T18:43:27.920Z",
    "completed_code": "{'code': '// Define the phones array\\nconst phones = [\\n  {\\n    id: 1,\\n    name: \"iPhone\",\\n    maker: \"Apple, Inc.\",\\n    operatingSystem: \"iOS\",\\n    price: 900,\\n    weight: 1.2\\n  },\\n  {\\n    id: 2,\\n    name: \"Galaxy\",\\n    maker: \"Samsung\",\\n    operatingSystem: \"Android\",\\n    price: 600,\\n    weight: 1.4\\n  },\\n  {\\n    id: 3,\\n    name: \"Pixel\",\\n    maker: \"Google\",\\n    operatingSystem: \"Android\",\\n    price: 750,\\n    weight: 1.3\\n  }\\n]\\n\\n// Define the ID of the phone to find\\nconst phoneToFind = 2\\n\\n// Iterate through the phones array and display only the phone with the matching ID\\nfor (const phone of phones) {\\n  // Only one phone will cause the condition below to evaluate to true\\n  if (phone.id === phoneToFind) {\\n    phone.weight = phone.weight + 0.4\\n    console.log(\"The \" + phone.maker + \" \" + phone.name + \" costs \" + phone.price + \" dollars. It weighs \" + phone.weight.toFixed(1) + \" grams.\")\\n  }\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 307,
  "fields": {
    "learner_github_id": "209533182",
    "learner_name": "Patrick McIsaac",
    "title": "Toy Catalog",
    "slug": "leonids-string-interpolation",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-11T19:33:57.764Z",
    "first_attempt": "2025-05-11T19:28:12.546Z",
    "last_attempt": "2025-05-11T19:33:57.764Z",
    "completed_code": "{'code': 'const toyCatalog = [\\n  { name: \"Wooden Train\", priceInDollars: 30, color: \"Red\" },\\n  { name: \"Stuffed Rabbit\", priceInDollars: 25, color: \"Gray\" },\\n  { name: \"Painted Kite\", priceInDollars: 20, color: \"Blue\" }\\n];\\nconst displayCatalog = [];\\nfor (const toy of toyCatalog) {\\n  const line = `Toy: ${toy.name} | Price: $${toy.priceInDollars} | Color: ${toy.color}`;\\n  displayCatalog.push(line);\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 308,
  "fields": {
    "learner_github_id": "209533182",
    "learner_name": "Patrick McIsaac",
    "title": "Raising Prices",
    "slug": "leonids-iteration-update",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-11T19:43:13.666Z",
    "first_attempt": "2025-05-11T19:39:30.211Z",
    "last_attempt": "2025-05-11T19:43:13.666Z",
    "completed_code": "{'code': 'const toyCatalog = [\\n  { name: \"Wooden Train\", priceInDollars: 30, color: \"Red\" },\\n  { name: \"Stuffed Rabbit\", priceInDollars: 25, color: \"Gray\" },\\n  { name: \"Painted Kite\", priceInDollars: 20, color: \"Blue\" }\\n];\\n\\nconst displayCatalog = []\\n\\nfor(const toy of toyCatalog){\\n    const newPrice = (toy.priceInDollars * 1.05).toFixed(2)\\n    const line = `Toy: ${toy.name} | Price: $${newPrice} | Color: ${toy.color}`\\n    displayCatalog.push(line)\\n    console.log(newPrice)\\n}\\n\\nconsole.log(displayCatalog)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 309,
  "fields": {
    "learner_github_id": "209533182",
    "learner_name": "Patrick McIsaac",
    "title": "Finding the Flowers",
    "slug": "flower-shop",
    "attempts": 19,
    "complete": true,
    "completed_on": "2025-05-21T07:05:36.999Z",
    "first_attempt": "2025-05-11T20:10:46.303Z",
    "last_attempt": "2025-05-21T07:05:36.999Z",
    "completed_code": "{'code': '\\nconst flowers = [\\n    {\\n        id: 1,\\n        type: \"Rose\",\\n        colors: [\"White\", \"Red\", \"Violet\", \"Pink\", \"Black\", \"Yellow\"],\\n        price: 2.59,\\n        usdaZones: [3, 4, 5, 6, 7, 8, 9, 10]\\n    },\\n    {\\n        id: 2,\\n        type: \"Tulip\",\\n        colors: [\"Orange\", \"White\", \"Yellow\", \"Violet\", \"Red\"],\\n        price: 1.04,\\n        usdaZones: [5, 6, 7, 8, 9]\\n    },\\n    {\\n        id: 3,\\n        type: \"Daisy\",\\n        colors: [\"Gold\", \"White\", \"Orange\", \"Crimson\"],\\n        price: 0.89,\\n        usdaZones: [3, 4, 5, 6, 7, 8]\\n    },\\n    {\\n        id: 4,\\n        type: \"Carnation\",\\n        colors: [\"Peach\", \"Yellow\", \"Magenta\", \"Pink\", \"Coral\"],\\n        price: 1.59,\\n        usdaZones: [5, 6, 7, 8, 9]\\n    },\\n    {\\n        id: 5,\\n        type: \"Bird of Paradise\",\\n        colors: [\"Orange\", \"White\"],\\n        price: 2.33,\\n        usdaZones: [9, 10, 11]\\n    },\\n    {\\n        id: 6,\\n        type: \"Delphinium\",\\n        colors: [\"Blue\", \"Violet\", \"White\", \"Pink\"],\\n        price: 1.67,\\n        usdaZones: [3, 4, 5, 6, 7]\\n    },\\n    {\\n        id: 7,\\n        type: \"Gladiolus\",\\n        colors: [\"White\", \"Cream\", \"Yellow\", \"Red\", \"Pink\", \"Green\", \"Lavender\", \"Voilet\"],\\n        price: 1.85,\\n        usdaZones: [6, 7, 8, 9, 10]\\n    },\\n    {\\n        id: 8,\\n        type: \"Lilly\",\\n        colors: [\"White\", \"Yellow\", \"Orange\", \"Red\", \"Pink\", \"Lavender\"],\\n        price: 1.52,\\n        usdaZones: [3, 4, 5, 6, 7, 8, 9]\\n    },\\n    {\\n        id: 9,\\n        type: \"Chinese Lantern\",\\n        colors: [\"Orange\"],\\n        price: 2.33,\\n        usdaZones: [3, 4, 5, 6, 7, 8, 9]\\n    }\\n]\\n\\n/*\\n    Below are some functions, in which you will write ALL of your\\n    code. Do not modify the code that defines the functions, and\\n    do not write any code outside of the functions.\\n*/\\n\\n\\n/*\\n    This function should return inexpensive flowers - ones that cost\\n    less than 2.00 per flower.\\n*/\\nconst inexpensiveFlowers = () => {\\n    let filteredFlowers = []  // Do not modify\\n\\n\\n    // Write your algorithm first, and then your code. Feel free to remove this comment\\n    for(const flower of flowers){\\n        if(flower.price < 2){\\n            filteredFlowers.push(flower)\\n        }\\n    }\\n\\n    return filteredFlowers  // Do not modify\\n\\n}\\n\\n/*\\n    This function should return flowers that grow in\\n    USDA zones of 3 and 8.\\n*/\\nconst zoneFlowers = () => {\\n    let filteredFlowers = []  // Do not modify\\n\\n    for(const flower of flowers){\\n        if(flower.usdaZones.includes(3) && flower.usdaZones.includes(8)){\\n            filteredFlowers.push(flower)\\n        }\\n    }\\n    // Write your algorithm first, and then your code. Feel free to remove this comment\\n\\n\\n    return filteredFlowers  // Do not modify\\n}\\n\\n\\n\\n/*\\n    This function should return flowers that come in the color Orange\\n*/\\nconst orangeFlowers = () => {\\n    let filteredFlowers = []  // Do not modify\\n\\n    for(const flower of flowers){\\n        if(flower.colors.includes(\"Orange\")){\\n            filteredFlowers.push(flower)\\n        }\\n    }\\n\\n\\n    // Write your algorithm first, and then your code. Feel free to remove this comment\\n\\n\\n\\n\\n    return filteredFlowers  // Do not modify\\n}\\n\\n\\n\\n/*\\n    This function should return an HTML representation of each flower.\\n\\n    Expected string format:\\n        <article>\\n            <h1>Bird of Paradise</h1>\\n\\n            <h2>Colors</h2>\\n            <section>White</section>\\n            <section>Orange</section>\\n\\n            <h2>USDA Zones</h2>\\n            <div>9</div>\\n            <div>10</div>\\n            <div>11</div>\\n        </article>\\n*/\\nconst flowersAsHTML = () => {\\n    let flowersHTMLString = \"\"  // Do not modify\\n\\n    for(const flower of flowers){\\n        flowersHTMLString += `\\n        <article>\\n            <h1>${flower.type}</h1>\\n\\n            <h2>Colors</h2>\\n        `\\n        for(const color of flower.colors){\\n            flowersHTMLString+= `\\n            <section>${color}</section>\\n            `\\n        }\\n        flowersHTMLString+= \"<h2>USDA Zones</h2>\"\\n\\n        for (const zone of flower.usdaZones){\\n            flowersHTMLString+= `\\n            <div>${zone}</div>\\n            `\\n        }\\n        flowersHTMLString+=\"</article>\"\\n    }\\n\\n    /*\\n        Algorithmic thinking is most important on this one.\\n        We would rather see the correct algorithm than the\\n        correct code. If you have code that works, but no\\n        algorithm, then you failed the exercise.\\n    */\\n    return flowersHTMLString  // Do not modify\\n}\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 310,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-21T21:56:18.990Z",
    "first_attempt": null,
    "last_attempt": "2025-05-21T21:56:18.990Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 311,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T22:33:35.727Z",
    "first_attempt": "2025-05-21T22:33:35.725Z",
    "last_attempt": "2025-05-21T22:33:35.727Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 155\\nlet marchBill = 149\\nlet aprilBill = 156\\nlet mayBill = 162\\nlet juneBill = 165\\nlet julyBill = 168\\nlet augustBill = 170\\nlet septemberBill = 164\\nlet octoberBill = 154\\nlet novemberBill = 148\\nlet decemberBill = 146\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 312,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-22T03:49:51.292Z",
    "first_attempt": "2025-05-22T03:45:46.450Z",
    "last_attempt": "2025-05-22T03:49:51.292Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Macbook Pro\"\\nconst phone = \"iPhone 14 Pro\"\\nconst television = \"65-inch LG LED\"\\nconst refrigerator = \"Samsung Smart refridgerator\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}`;\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 313,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T04:00:02.566Z",
    "first_attempt": "2025-05-22T04:00:02.565Z",
    "last_attempt": "2025-05-22T04:00:02.566Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome\\ncombinedIncome += spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome += combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 314,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T04:13:26.577Z",
    "first_attempt": "2025-05-22T04:13:26.576Z",
    "last_attempt": "2025-05-22T04:13:26.577Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `\\nOur combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${myIncome + spouseIncome - phoneBill - mortgage - carInsurance - healthInsurance}.`;  // Use backticks and calculations here\\nconsole.log(statement)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 315,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T04:28:02.457Z",
    "first_attempt": "2025-05-22T04:28:02.455Z",
    "last_attempt": "2025-05-22T04:28:02.457Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 316,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T12:10:19.420Z",
    "first_attempt": "2025-05-22T22:57:37.439Z",
    "last_attempt": "2025-05-24T12:10:19.420Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\";\\nconst femalePhotos = 72;  // More women for our test case\\nconst malePhotos = 52;    // Total will be 124\\nlet totalPhotos = 0;\\nlet albumColor = \"\";\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos;\\n\\n// Determine storage type based on total using if/else statements\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\";\\n} else if (totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\";\\n} else {\\n    albumColor = \"gray\";\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 317,
  "fields": {
    "learner_github_id": "209552604",
    "learner_name": "Stephen",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 15,
    "complete": true,
    "completed_on": "2025-05-13T20:16:31.019Z",
    "first_attempt": "2025-05-12T14:07:49.192Z",
    "last_attempt": "2025-05-13T20:16:31.019Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\nif (temperature >= 95) {\\n    \\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    \\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n}\\nelse if \\n    (temperature < 75 && temperature >= 50){\\n    \\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n}\\n\\nelse\\n    (temperature < 50 && temperature >= 35)\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n    \\nconsole.log(`if it is ${temperature},I need to wear the following:\\n${torsoClothing},\\n${legClothing},\\n${footWear}.\\n`)\\n\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 318,
  "fields": {
    "learner_github_id": "209769569",
    "learner_name": "Gary Venus",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-12T14:25:39.640Z",
    "first_attempt": "2025-05-12T14:23:54.821Z",
    "last_attempt": "2025-05-12T14:25:39.640Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [ yellowFruit, orangeFruit, redFruit, greenFruit, blueFruit]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 319,
  "fields": {
    "learner_github_id": "209769569",
    "learner_name": "Gary Venus",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-12T14:29:48.019Z",
    "first_attempt": "2025-05-12T14:29:29.267Z",
    "last_attempt": "2025-05-12T14:29:48.019Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass =dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 320,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T04:34:09.059Z",
    "first_attempt": "2025-05-22T04:34:09.058Z",
    "last_attempt": "2025-05-22T04:34:09.059Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse {\\n   console.log(\"Watch Netflix all day.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 321,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-12T21:17:39.183Z",
    "first_attempt": "2025-05-12T21:17:31.507Z",
    "last_attempt": "2025-05-12T21:17:39.183Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\",\"Orange\",\"Apple\",\"Watermelon\",\"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 322,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-12T21:21:13.961Z",
    "first_attempt": "2025-05-12T21:21:13.961Z",
    "last_attempt": "2025-05-12T21:21:13.961Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 323,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-12T21:34:25.924Z",
    "first_attempt": "2025-05-12T21:34:25.923Z",
    "last_attempt": "2025-05-12T21:34:25.924Z",
    "completed_code": "{'code': 'const topics = [\"Variables\",\"Loops\",\"Arrays\",\"Functions\",\"Objects\",\"Modules\",\"Events\"]\\n\\nfor (const topic of topics) {\\n    console.log(topic)\\n}\\n\\n// Inventory of a used car lot\\nconst carLot = [ \"Pinto\", \"F150\", \"Cabriolet\", \"Sentra\", \"Xterra\", \"Ram\" ]\\n\\nfor (const car of carLot) {\\n  console.log(car)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 324,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-12T21:40:40.986Z",
    "first_attempt": "2025-05-12T21:40:40.985Z",
    "last_attempt": "2025-05-12T21:40:40.986Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const piece of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 325,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-12T21:48:52.338Z",
    "first_attempt": "2025-05-12T21:48:52.337Z",
    "last_attempt": "2025-05-12T21:48:52.338Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\nif (ingredient === \"egg\"){\\n    finishedFood.push(\"biscuit\")\\n}\\nelse if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n}\\nelse if (ingredient === \"potato\"){\\n    finishedFood.push(\"fries\")\\n}\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 326,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-12T22:30:38.712Z",
    "first_attempt": "2025-05-12T22:30:38.711Z",
    "last_attempt": "2025-05-12T22:30:38.712Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expense of monthlyExpenses) {\\n  totalExpense += expense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 327,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-13T02:13:25.324Z",
    "first_attempt": "2025-05-13T02:12:56.784Z",
    "last_attempt": "2025-05-13T02:13:25.324Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [11, 10, 2, 5, 7]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (miles of weeklyMiles) {\\n totalMiles += miles\\n}\\n\\n// Declare a new variable to store the average miles over time\\n\\nconst averageMiles = totalMiles/weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles} each week.\\nI have driven a total of ${totalMiles} miles.`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 328,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-13T06:20:41.294Z",
    "first_attempt": "2025-05-13T06:19:31.241Z",
    "last_attempt": "2025-05-13T06:20:41.294Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours){\\n    if (hour >= 7){\\n        happyHours.push(hour)\\n    }\\n    else {\\n        grumpyHours.push(hour)\\n    }\\n}\\n\\nconsole.log(`I was grumpy on ${grumpyHours.length} days. \\nI was happy on ${happyHours.length} days.`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 329,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-13T06:32:43.990Z",
    "first_attempt": "2025-05-13T06:32:43.989Z",
    "last_attempt": "2025-05-13T06:32:43.990Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")){\\n    light++\\n  }\\n  else if (coffee.includes(\"medium\")){\\n    medium++\\n  }\\n  else if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")) {\\n    toastyDark++\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 330,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-13T06:41:42.864Z",
    "first_attempt": "2025-05-13T06:41:42.863Z",
    "last_attempt": "2025-05-13T06:41:42.864Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 331,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-05-14T17:14:28.748Z",
    "first_attempt": "2025-05-13T07:34:26.159Z",
    "last_attempt": "2025-05-14T17:14:28.748Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []        // \"Clothing\"\\nconst entertainment = []   // \"Movie\"\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nconst utilities = []       // \"Utility\"\\nconst largePurchases = []  // Expenses over 100.00\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nlet averageExpense = 0\\nlet spentValue = 0\\n\\nlet outlet = \"\"\\nlet spent = \"\"\\n\\nfor (const expense of monthlyExpenses){\\n    \\n    [outlet, spent] = expense.split(\":\")\\n    spentValue = parseFloat(spent)\\n\\n    totalExpenses += spentValue\\n\\n    if (expense.includes(\"Clothing\")){\\n        clothing.push(spentValue)\\n    }\\n    else if (expense.includes(\"Movie\")){\\n        entertainment.push(spentValue)\\n    }\\n    else if (expense.includes(\"Groceries\")||expense.includes(\"Restaurant\")) {\\n        food.push(spentValue)\\n    }\\n    else if (expense.includes(\"Fuel\")||expense.includes(\"Gas\")){\\n        fuel.push(spentValue)\\n    }\\n    else if (expense.includes(\"Lyft\")||expense.includes(\"Uber\")) {\\n        travel.push(spentValue)\\n    }\\n    else if (expense.includes(\"Utility\")) {\\n        utilities.push(spentValue)\\n    } \\n\\n    if (spentValue > 100) {\\n        largePurchases.push(spentValue)\\n    }\\n}\\n\\nconsole.log(`Values in Clothing Array: ${clothing}`)\\nconsole.log(`Values in Entertainment Array: ${entertainment}`)\\nconsole.log(`Values in Food Array: ${food}`)\\nconsole.log(`Values in Fuel Array: ${fuel}`)\\nconsole.log(`Values in Travel Array: ${travel}`)\\nconsole.log(`Values in Utilities Array: ${utilities}`)\\nconsole.log(`Values in Large Purchases Array: ${largePurchases}`)\\nconsole.log(`Total Expenses: ${totalExpenses}`)\\nconsole.log(`Number of Expenses for Month: ${monthlyExpenses.length}`)\\nconsole.log(`Combined Number of Expenses in Other arrays: ${clothing.length + entertainment.length + food.length + fuel.length + travel.length + utilities.length + largePurchases.length}`)\\n\\naverageExpense = totalExpenses/monthlyExpenses.length\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 332,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 136,
    "complete": true,
    "completed_on": "2025-05-13T08:26:12.847Z",
    "first_attempt": "2025-05-13T08:22:07.189Z",
    "last_attempt": "2025-05-13T08:26:12.847Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n   <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: lightblue;\\n}\\n\\n/* Add your CSS styles here */\\n\\narticle{\\n  border: 1px solid black;\\n  padding: 1rem;\\n}\\n\\np{\\n  color: purple;\\n}\\n\\nimg{\\n  height: 10rem;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 333,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "CSS Basics",
    "slug": "css-selectors",
    "attempts": 514,
    "complete": true,
    "completed_on": "2025-05-13T08:38:42.289Z",
    "first_attempt": "2025-05-13T08:26:14.831Z",
    "last_attempt": "2025-05-13T08:38:42.289Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n  background-color: lightblue;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\np{\\ncolor: purple;\\nfont-weight: bold;\\n}\\n\\nh1{\\n  border: 1px solid black;\\n}\\n\\nh2{\\n  color: darkred;\\n}\\n\\nh3{\\n  color: teal;\\n}\\n\\n.highlight{\\n  background-color: yellow;\\n}\\n\\n.example{\\n  font-size: 20px;\\n  background-color: red;\\n}\\n\\n.features{\\n  color: blue;\\n  font-weight: bold;\\n}\\n\\n.form-group{\\n  color: yellow;\\n  font-weight: bold;\\n}\\n\\n#basics{\\n  font-weight: bold;\\n  border: 2px solid yellow;\\n}\\n\\n#advanced{\\n  border: 1px solid green;\\n}\\n\\n#practice{\\n  border: 2px solid darkblue;\\n  padding: 1rem;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 334,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "CSS Selectors",
    "slug": "flexbox-intro",
    "attempts": 219,
    "complete": true,
    "completed_on": "2025-05-13T08:44:06.786Z",
    "first_attempt": "2025-05-13T08:38:47.602Z",
    "last_attempt": "2025-05-16T08:38:05.146Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  background-color: lightblue;\\n}\\n\\n.nav-links {\\n  list-style: none;\\n  display: flex;\\n  flex-direction: row-reverse;\\n  justify-content: space-evenly;\\n  background-color: red;\\n  border: 1px solid red;\\n  color: green;\\n  padding: 1rem;\\n}\\n\\n/* Make the navbar a flex container and style it */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 335,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-container",
    "attempts": 230,
    "complete": true,
    "completed_on": "2025-05-13T08:54:12.971Z",
    "first_attempt": "2025-05-13T08:44:11.526Z",
    "last_attempt": "2025-05-16T08:39:05.330Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  font-size: 0.8rem;\\n  margin: 0;\\n  padding: 20px;\\n  background-color: green;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n}\\n\\n/* Add your flexbox container properties below */\\n.card-container{\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  gap: 1px;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 336,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Flexbox Item Properties",
    "slug": "flexbox-items",
    "attempts": 1306,
    "complete": true,
    "completed_on": "2025-05-16T09:01:40.585Z",
    "first_attempt": "2025-05-13T08:57:48.751Z",
    "last_attempt": "2025-05-16T09:01:40.585Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n  background-color: darkseagreen;\\n}\\n\\n/* Add your flexbox properties below */\\n\\n.navbar{\\n  display: flex;\\n  flex: auto;\\n  flex-wrap: wrap;\\n}\\n\\n.logo{\\n  text-align: center;\\n  flex-basis: 100%;\\n}\\n\\n.nav-links {\\n  display: flex;\\n  gap: 3rem;\\n}\\n\\n.container{\\n  display: flex;\\n  gap: 0.5rem;\\n}\\n\\n.content{\\n  margin:0.5rem;\\n}\\n\\n.sidebar{\\n  margin: 0.5rem;\\n}\\n\\nh1{\\n  text-align: center;\\n}\\n\\n.cards{\\n  display: flex;\\n  justify-content: center;\\n  gap:1rem;\\n}\\n\\n.card{\\n  text-align: center;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 337,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Flexbox Item Properties",
    "slug": "objects-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-13T13:40:19.343Z",
    "first_attempt": "2025-05-13T09:25:19.921Z",
    "last_attempt": "2025-05-13T13:40:19.343Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n    name: \"Jeremy Landy\",\\n    location: \"Phoenix, AR\",\\n    gender: \"male\",\\n    age: 31\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 338,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-13T09:28:23.941Z",
    "first_attempt": "2025-05-13T09:28:23.940Z",
    "last_attempt": "2025-05-13T09:28:23.941Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet() {\\n    console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 339,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-13T13:57:38.947Z",
    "first_attempt": "2025-05-13T13:56:01.507Z",
    "last_attempt": "2025-05-13T13:57:38.947Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n    color: \"yellow\",\\n    stemLength: 8,\\n    growingSeason: \"Spring\",\\n    thorny: false\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n    color: \"red\",\\n    stemLength: 4,\\n    growingSeason: \"Summer\",\\n    thorny: true\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 340,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-13T14:20:50.506Z",
    "first_attempt": "2025-05-13T14:13:14.306Z",
    "last_attempt": "2025-05-13T14:20:50.506Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\nconst monthlyIncome = myIncome+spouseIncome\\nconst totalExpenses = phoneBill + mortgage + carInsurance + healthInsurance\\nconst netMonthlyIncome = monthlyIncome - totalExpenses\\n\\nconst statement = `Combined Monthly Income: ${monthlyIncome}\\nTotal Monthly Expenses: ${totalExpenses}\\nNet Monthly Income: ${netMonthlyIncome}`\\n\\nconsole.log(statement)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 341,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Flexbox Container Properties",
    "slug": "objects-collections",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-13T14:48:49.315Z",
    "first_attempt": "2025-05-13T14:25:01.648Z",
    "last_attempt": "2025-05-13T14:48:49.315Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\n\\nfor (const appointment of appointments){\\n    schedule += `Patient ${appointment.firstName} ${appointment.lastName} has an appointment at ${appointment.appointmentTime}\\\\n`\\n}\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 342,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-13T14:51:15.557Z",
    "first_attempt": "2025-05-13T14:51:15.557Z",
    "last_attempt": "2025-05-13T14:51:15.557Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 343,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-13T14:53:40.332Z",
    "first_attempt": "2025-05-13T14:53:40.332Z",
    "last_attempt": "2025-05-13T14:53:40.332Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 344,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-13T14:55:28.533Z",
    "first_attempt": "2025-05-13T14:55:28.532Z",
    "last_attempt": "2025-05-13T14:55:28.533Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \"Large Tank\"\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 345,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T18:25:29.985Z",
    "first_attempt": "2025-06-03T18:25:29.984Z",
    "last_attempt": "2025-06-03T18:25:29.985Z",
    "completed_code": "{'code': 'const student = {\\n    name: \"Jeremy Landy\",\\n    location: \"Phoenix, AZ\",\\n    gender: \"male\",\\n    age: 31\\n}\\n\\nconsole.log(student)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 346,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-13T15:05:20.638Z",
    "first_attempt": "2025-05-13T15:05:20.637Z",
    "last_attempt": "2025-05-13T15:05:20.638Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 347,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T18:26:12.241Z",
    "first_attempt": "2025-06-03T18:26:12.241Z",
    "last_attempt": "2025-06-03T18:26:12.241Z",
    "completed_code": "{'code': 'const tulip = {\\n    color: \"yellow\",\\n    stemLength: 10,\\n    growingSeason: \"Spring\",\\n    thorny: false\\n}\\n\\nconst rose = {\\n    color: \"red\",\\n    stemLength: 12,\\n    growingSeason: \"Summer\",\\n    thorny: true\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 348,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-13T15:13:06.302Z",
    "first_attempt": "2025-05-13T15:10:21.261Z",
    "last_attempt": "2025-05-13T15:13:06.302Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n    console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore()\\ncelebrateScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 349,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-13T15:17:44.263Z",
    "first_attempt": "2025-05-13T15:16:35.335Z",
    "last_attempt": "2025-05-13T15:17:44.263Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isLargerThanOneHundred(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayWelcomeToUser(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscount(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 350,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-13T15:21:01.025Z",
    "first_attempt": "2025-05-13T15:21:01.024Z",
    "last_attempt": "2025-05-13T15:21:01.025Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activityName) {\\n    console.log(`I love ${activityName}!`)\\n}\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 351,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 738,
    "complete": true,
    "completed_on": "2025-05-26T22:56:48.530Z",
    "first_attempt": "2025-05-13T15:21:52.519Z",
    "last_attempt": "2025-05-26T22:56:48.530Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n  <h1>How I Became A Software Developer</h1>\\n\\n  <article>\\n    <h2>Nashville Software School</h2>\\n\\n    <section>\\n      <p>My journey into software development began when I enrolled at Nashville Software School. The instructors were amazing and the curriculum was challenging but rewarding.</p>\\n    </section>\\n\\n    <section>\\n      <p>I learned the following skills</p>\\n      <ol>\\n        <li>Variables</li>\\n        <li>Arrays</li>\\n        <li>Objects</li>\\n        <li>Functions</li>\\n        <li>HTML</li>\\n        <li>CSS</li>\\n      </ol>\\n    </section>\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 352,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-13T15:25:27.971Z",
    "first_attempt": "2025-05-13T15:25:27.971Z",
    "last_attempt": "2025-05-13T15:25:27.971Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 353,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-13T15:28:44.517Z",
    "first_attempt": "2025-05-13T15:28:44.516Z",
    "last_attempt": "2025-05-13T15:28:44.517Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\n\\nfunction displayGameScore (playerName, pointsScored){\\n    console.log(`${playerName} scored ${pointsScored} points!`)\\n}\\n\\n\\n// Then invoke the function with different player names and scores\\ndisplayGameScore(\"Blake\",14)\\ndisplayGameScore(\"Alex\",22)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 354,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-13T15:41:42.832Z",
    "first_attempt": "2025-05-13T15:41:42.831Z",
    "last_attempt": "2025-05-13T15:41:42.832Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\n\\nconst add = (x, y) => x + y\\n\\nconst greet = name => \"Hello, \" + name + \"!\"\\n\\nconst getRandomNumber = () => Math.random()\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber()\\nconst msg = greet(\"Jeremy\")\\nconst number = add(7,10)\\n\\nconsole.log(random, msg, number)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 355,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T18:28:17.103Z",
    "first_attempt": "2025-06-03T18:28:17.103Z",
    "last_attempt": "2025-06-03T18:28:17.103Z",
    "completed_code": "{'code': '//Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Iterate the array and create appointment strings\\nfor (const appointment of appointments) {\\n    schedule += (`Patient ${appointment.firstName} ${appointment.lastName} has an appointment at ${appointment.appointmentTime}\\\\n`)\\n}\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 356,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-13T17:13:55.018Z",
    "first_attempt": "2025-05-13T17:07:24.720Z",
    "last_attempt": "2025-05-13T17:13:55.018Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nlet iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}    \\nelse {\\n   console.log(\"I\\'ll watch Netflix all day.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 357,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-13T17:37:35.307Z",
    "first_attempt": "2025-05-13T17:35:27.567Z",
    "last_attempt": "2025-05-13T17:37:35.307Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    // Add your code here\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n}\\n\\nelse if (temperature < 95 && temperature >= 75){\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n}\\n\\nelse if (temperature < 75 && temperature >= 50){\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\n\\nelse if (temperature < 50 && temperature >= 35){\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\n\\nelse if (temperature < 35){\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\"\\n}\\n\\n\\nconsole.log(`I need to wear the following clothes\\n${torsoClothing} \\n${legClothing} \\n${footWear} \\n`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 358,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 15,
    "complete": true,
    "completed_on": "2025-05-13T18:21:42.012Z",
    "first_attempt": "2025-05-13T17:51:41.279Z",
    "last_attempt": "2025-05-13T18:21:42.012Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output =  `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 359,
  "fields": {
    "learner_github_id": "40916902",
    "learner_name": "Barry",
    "title": "Introduction to HTML",
    "slug": "html-elements",
    "attempts": 66,
    "complete": true,
    "completed_on": "2025-05-27T00:31:25.490Z",
    "first_attempt": "2025-05-13T19:28:02.467Z",
    "last_attempt": "2025-05-27T00:31:25.490Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n  <main>\\n    <article>\\n      <h1>Welcome to Acme, Inc</h1>\\n\\n      <section>\\n        <p>Acme, Inc is a leading provider of innovative solutions for businesses of all sizes. We specialize in creating cutting-edge products that help our customers succeed.</p>\\n      </section>\\n\\n      <section>\\n        <p>Founded in 2005, our company has grown from a small startup to an industry leader with clients worldwide.</p>\\n      </section>\\n    </article>\\n  </main>\\n  <!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n<footer>\\n    <p>&copy 2025 Acme, Inc. All rights reserved. barcher@righthere.com</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 360,
  "fields": {
    "learner_github_id": "209769569",
    "learner_name": "Gary Venus",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-05-13T20:35:29.182Z",
    "first_attempt": "2025-05-13T20:30:44.579Z",
    "last_attempt": "2025-05-13T20:35:29.182Z",
    "completed_code": "{'code': 'const topics = [\"Variables\",\"Loops\",\"Arrays\",\"Functions\",\"Objects\",\"Modules\",\"Events\"]\\n\\nfor (const topic of topics) {\\nconsole.log(topic)\\n}\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 361,
  "fields": {
    "learner_github_id": "209769569",
    "learner_name": "Gary Venus",
    "title": "Undefined",
    "slug": "arrays-push",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-30T18:49:32.290Z",
    "first_attempt": "2025-05-13T20:45:59.877Z",
    "last_attempt": "2025-06-22T13:04:09.991Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (let piece of clay) {\\n   const mug = \"coffee mug\"\\ntoFireInKiln.push(mug)\\n}\\nreturn toFireInKiln\\nconsole.log(toFireInKiln)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 362,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T12:11:34.861Z",
    "first_attempt": "2025-05-24T12:11:34.856Z",
    "last_attempt": "2025-05-24T12:11:34.861Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [ yellowFruit, orangeFruit, redFruit, greenFruit, blueFruit]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 363,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T12:11:52.859Z",
    "first_attempt": "2025-05-24T12:11:52.848Z",
    "last_attempt": "2025-05-24T12:11:52.859Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass =  dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 364,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T12:12:12.775Z",
    "first_attempt": "2025-05-24T12:12:12.765Z",
    "last_attempt": "2025-05-24T12:12:12.775Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\"  ]\\n\\nfor (const learn of topics) {\\nconsole.log(learn)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 365,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T12:12:35.599Z",
    "first_attempt": "2025-05-24T12:12:35.595Z",
    "last_attempt": "2025-05-24T12:12:35.599Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (types of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 366,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-14T06:44:04.747Z",
    "first_attempt": "2025-05-14T06:44:04.746Z",
    "last_attempt": "2025-05-14T06:44:04.747Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\n\\nconst makeGreeting = (name) => \"Hello, \" + name + \"!\"\\n\\n// Invoke the function and assign the return value to a variable\\nconst johnGreeting = makeGreeting(\"John\")\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(johnGreeting)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 367,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-14T06:57:01.988Z",
    "first_attempt": "2025-05-14T06:57:01.986Z",
    "last_attempt": "2025-05-14T06:57:01.988Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity,price) => quantity * price\\n\\n// Create calculateTotal here\\nconst calculateTotal = subtotal => 1.08*subtotal\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst purchase = calculateSubtotal(3,4.99)\\n\\n// 2. Calculate the final total with tax\\nconst finalTotal = calculateTotal(purchase)\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $ ${purchase}`)\\nconsole.log(`Total with tax: $${finalTotal}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 368,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-14T07:09:13.026Z",
    "first_attempt": "2025-05-14T07:09:13.025Z",
    "last_attempt": "2025-05-14T07:09:13.026Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\nconst calculateGameScore = (basePoints,bonusMultiplier) => {\\n    const totalPoints = basePoints*bonusMultiplier\\n    if (totalPoints >= 1000){\\n        return \"High Score!\"\\n    } else {\\n        return \"Keep trying!\"\\n    }\\n}\\n\\n  // Call your function with different values and store a result in a variable\\nconst highScore = calculateGameScore(500,2)\\nconst lowScore = calculateGameScore(499,2)\\n\\n  // Log the result to see the output\\nconsole.log(highScore)\\nconsole.log(lowScore)\\n  '}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 369,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-14T07:25:34.406Z",
    "first_attempt": "2025-05-14T07:25:34.404Z",
    "last_attempt": "2025-05-14T07:25:34.406Z",
    "completed_code": "{'code': '// This code has scope problems!\\nlet score = 0\\n\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 370,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-14T07:37:37.804Z",
    "first_attempt": "2025-05-14T07:37:37.803Z",
    "last_attempt": "2025-05-14T07:37:37.804Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\nconst checkHighScore = (playerName,score) => {\\n    if (score > highScore) {\\n        highScore = score\\n        return `${playerName}, congratulations! You now have the new Highest Score!`\\n    } else {\\n        return `The highest score is still ${highScore}.`\\n    }\\n}\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\nconsole.log(checkHighScore(\"Alice\",-50))\\n\\nconsole.log(checkHighScore(\"John\",1))\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 371,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-14T08:01:55.372Z",
    "first_attempt": "2025-05-14T07:59:50.957Z",
    "last_attempt": "2025-05-14T08:01:55.372Z",
    "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\nlet baseTicketPrice = 10\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\nif (isWeekend){\\n    baseTicketPrice += 2\\n}\\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\nif (age < 12 || age >= 65) {\\n    baseTicketPrice = 0.5*baseTicketPrice\\n}\\n      // 4. Return the final ticket price\\n    return baseTicketPrice\\n  }\\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n\\n  // Example:\\n  const adultWeekdayPrice = calculateTicketPrice(12, false);\\n  const adultWeekendPrice = calculateTicketPrice(12,true);\\n  const childWeekdayPrice = calculateTicketPrice(11,false);\\n  const childWeekendPrice = calculateTicketPrice(11,true);\\n  const elderWeekdayPrice = calculateTicketPrice(65,false);\\n  const elderWeekendPrice = calculateTicketPrice(65,true);\\n\\n  console.log(adultWeekdayPrice)\\n  console.log(adultWeekendPrice)\\n  console.log(childWeekdayPrice)\\n  console.log(childWeekendPrice)\\n  console.log(elderWeekdayPrice)\\n  console.log(elderWeekendPrice)\\n\\n  console.log(`Regular Adult Weekday price is $${adultWeekdayPrice}`)\\n  console.log(`Regular Adult Weekend price is $${adultWeekendPrice}`)\\n  console.log(`Regular Child Weekday price is $${childWeekdayPrice}`)\\n  console.log(`Regular Child Weekend price is $${childWeekendPrice}`)\\n  console.log(`Regular Elder Weekday price is $${elderWeekdayPrice}`)\\n  console.log(`Regular Elder Weekend price is $${elderWeekendPrice}`)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 372,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-14T08:32:01.784Z",
    "first_attempt": "2025-05-14T08:32:01.783Z",
    "last_attempt": "2025-05-14T08:32:01.784Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\nlet total = 0\\n      // 2. Loop through all prices in the array and add each to total\\nfor (const price of prices) {\\n    total += price\\n}\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\nif (total > 100) {\\n    total = total*0.90\\n}\\n      // 4. Return the final total\\n      return total\\n  }\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\n\\nconst shoppingTripNoDiscount = calculateCartTotal([4,20,28,16,10])\\nconst shoppingTripDiscount = calculateCartTotal([10,20,30,40,1])\\n\\nconsole.log(shoppingTripDiscount)\\nconsole.log(shoppingTripNoDiscount)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 373,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-15T02:04:55.186Z",
    "first_attempt": "2025-05-14T09:15:43.353Z",
    "last_attempt": "2025-05-15T02:04:55.186Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n        return time*100 + targets*50\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n        if (targets > 10) {\\n            return 1000\\n        } \\n        return 0\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => \\n    calculateBasePoints(time, targets) + calculateBonus(targets);\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\nconst finalScore = calculateFinalScore(2,5)\\nconsole.log(finalScore)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 374,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T05:00:38.123Z",
    "first_attempt": "2025-05-22T05:00:38.122Z",
    "last_attempt": "2025-05-22T05:00:38.123Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n   torsoClothing = \"t-shirt\"\\n   legClothing = \"shorts\"\\n   footWear = \"sandals\"\\n    // Add your code here\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n   torsoClothing = \"t-shirt\"\\n   legClothing = \"shorts\"\\n   footWear = \"sneakers\"\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n   torsoClothing = \"sweater\"\\n   legClothing = \"pants\"\\n   footWear = \"sneakers\"\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n   torsoClothing = \"jacket\"\\n   legClothing = \"pants\"\\n   footWear = \"sneakers\"\\n}\\nelse {\\n   torsoClothing = \"jacket\"\\n   legClothing = \"pants\"\\n   footWear = \"boots\"\\n}\\n\\nconsole.log(`The temperature is ${temperature}. I will wear a ${torsoClothing}, ${legClothing}, and ${footWear}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 375,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Data Types",
    "slug": "leonids-data-types",
    "attempts": 16,
    "complete": true,
    "completed_on": "2025-05-16T18:20:00.628Z",
    "first_attempt": "2025-05-14T14:48:15.115Z",
    "last_attempt": "2025-05-16T18:20:00.628Z",
    "completed_code": "{'code': 'function createToy(name, category, ageRecommendation, isBatteryOperated, features, dimensions) {\\n    return {\\n        name,\\n        category,\\n        ageRecommendation,\\n        isBatteryOperated,\\n        features,\\n        dimensions\\n           \\n    };\\n}\\n\\n// TODO: Call createToy with the correct data types\\nconst myToy = createToy(\"FunTime Timmy\", \"Action Figure\", 8, true, [\"talks\", \"adjustable limbs\", \"voice-recognition\"], {height: 3, width: .0825}  );\\n\\nconsole.log(myToy)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 376,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T05:20:14.949Z",
    "first_attempt": "2025-05-22T05:20:14.947Z",
    "last_attempt": "2025-05-22T05:20:14.949Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos >= 110) {\\n   photoStorage = \"Photo Album\"\\n}\\nelse if (totalPhotos < 110 && totalPhotos >= 50) {\\n   photoStorage = \"Shoe Box\"\\n}\\nelse {\\n   photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n   albumColor = \"plum\"\\n}\\nelse {\\n   albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 377,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-14T16:39:13.701Z",
    "last_attempt": "2025-05-14T16:42:12.064Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 378,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T18:28:49.254Z",
    "first_attempt": "2025-06-03T18:28:49.254Z",
    "last_attempt": "2025-06-03T18:28:49.254Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 379,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T05:25:24.641Z",
    "first_attempt": "2025-05-22T05:25:24.640Z",
    "last_attempt": "2025-05-22T05:25:24.641Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [ yellowFruit, orangeFruit, redFruit, greenFruit, blueFruit ]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 380,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-22T05:29:58.053Z",
    "first_attempt": "2025-05-22T05:29:16.810Z",
    "last_attempt": "2025-05-22T05:29:58.053Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 381,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T05:38:23.517Z",
    "first_attempt": "2025-05-22T05:38:23.516Z",
    "last_attempt": "2025-05-22T05:38:23.517Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\" , \"Loops\" , \"Arrays\" , \"Functions\" , \"Objects\" , \"Modules\" , \"Events\" ]\\n\\nfor (const topicsList of topics) {\\n   console.log(topicsList)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 382,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-14T21:42:48.470Z",
    "first_attempt": null,
    "last_attempt": "2025-05-14T21:42:48.470Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 383,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T05:43:18.617Z",
    "first_attempt": "2025-05-22T05:43:18.615Z",
    "last_attempt": "2025-05-22T05:43:18.617Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const cup of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 384,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-14T22:10:47.938Z",
    "first_attempt": "2025-05-14T22:10:47.935Z",
    "last_attempt": "2025-05-14T22:10:47.938Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 120\\nlet marchBill = 99\\nlet aprilBill = 43\\nlet mayBill = 100\\nlet juneBill = 94\\nlet julyBill = 98\\nlet augustBill = 120\\nlet septemberBill = 88\\nlet octoberBill = 30\\nlet novemberBill = 78\\nlet decemberBill = 100\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 385,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-15T21:19:15.262Z",
    "first_attempt": "2025-05-14T22:22:34.166Z",
    "last_attempt": "2025-05-15T21:19:15.262Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"2020 M1 MacBook Air\"\\nconst phone = \"iPhone 13\"\\nconst television = \"Samgung 65in\"\\nconst refrigerator = \"Frigidaire Gallery Series\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}.`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 386,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T05:56:56.906Z",
    "first_attempt": "2025-05-22T05:56:56.905Z",
    "last_attempt": "2025-05-22T05:56:56.906Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n   if (ingredient === \"egg\") {\\n      finishedFood.push(\"biscuit\")\\n   }\\n   else if (ingredient === \"beef patty\") {\\n      finishedFood.push(\"burger\")\\n   }\\n   else if (ingredient === \"potato\") {\\n      finishedFood.push(\"fries\")\\n   }\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 387,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-15T01:38:25.978Z",
    "first_attempt": null,
    "last_attempt": "2025-05-15T01:38:25.978Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 388,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-15T01:38:26.688Z",
    "first_attempt": null,
    "last_attempt": "2025-05-15T01:38:26.688Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 389,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-15T01:38:27.379Z",
    "first_attempt": null,
    "last_attempt": "2025-05-15T01:38:27.379Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 390,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-15T01:38:28.071Z",
    "first_attempt": null,
    "last_attempt": "2025-05-15T01:38:28.071Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 391,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-15T02:29:46.743Z",
    "first_attempt": "2025-05-15T02:29:46.743Z",
    "last_attempt": "2025-05-15T02:29:46.743Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 392,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-15T02:30:32.260Z",
    "first_attempt": "2025-05-15T02:30:32.259Z",
    "last_attempt": "2025-05-15T02:30:32.260Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor =book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 393,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-15T02:31:56.773Z",
    "first_attempt": "2025-05-15T02:31:56.772Z",
    "last_attempt": "2025-05-15T02:31:56.773Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \"Large Tank\"\\n\\nconsole.log(...Object.entries(goldfish))'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 394,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-15T02:35:48.557Z",
    "first_attempt": "2025-05-15T02:35:48.556Z",
    "last_attempt": "2025-05-15T02:35:48.557Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n\\n// Second, produce the required string\\nconst vl = votingLocation\\nconst address = `${vl.address.street.number} ${vl.address.street.name}`\\nconst cityState = `${vl.address.city}, ${vl.address.state}`\\nconst output = `${vl.manager} manages the ${vl.name} at ${address} in ${cityState}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 395,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-15T02:37:28.498Z",
    "first_attempt": "2025-05-15T02:37:28.496Z",
    "last_attempt": "2025-05-15T02:37:28.498Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  // Otherwise, return \"Hello, [name]!\"\\n    if(time === \"morning\" || name.trim().slice(0,1) === \"A\") {\\n        return `Good morning, ${name}!`\\n    } else if (time === \"afternoon\") {\\n        return `Good afternoon, ${name}!`\\n    } else {\\n        return `Hello, ${name}!`\\n    }\\n}\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  // If topic is \"weather\", return the weather joke\\n  // If topic is \"animals\", return the animals joke\\n  // Otherwise, return the default joke\\n    if(topic === \"weather\") {\\n        return \"What do you call a stormy robot? A thunder-bot!\"\\n    } else if (topic === \"animals\") {\\n        return \"Why did the robot go to the zoo? To study creature features!\"\\n    } else {\\n        return \"Why was the robot tired? Because it had too many bytes!\"\\n    }\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\nlet greetings = []\\n  // Loop through each person in the people array\\n    for (const person of people) {\\n        greetings.push(createGreeting(person,time))\\n    }\\n  // Create a greeting for each person\\n\\n  // Add the greeting to the array\\n\\n  // Return the array of greetings\\n    return greetings\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n    const greeting = createGreeting(name,time)\\n  // Get the joke\\n    const joke = tellJoke(topic)\\n  // Return both together\\n    return `${greeting} ${joke}`\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 396,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Flexbox Item Properties",
    "slug": "leonids-data-types",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-05-15T02:47:29.349Z",
    "first_attempt": "2025-05-15T02:37:46.579Z",
    "last_attempt": "2025-05-15T02:47:29.349Z",
    "completed_code": "{'code': 'function createToy(name, category, ageRecommendation, isBatteryOperated, features, dimensions) {\\n    return {\\n        name,\\n        category,\\n        ageRecommendation,\\n        isBatteryOperated,\\n        features,\\n        dimensions\\n    };\\n}\\n\\n// TODO: Call createToy with the correct data types\\nconst myToy = createToy(\"Becky\",\"dolls\",5,false,[\"poops\",\"pees\"],{width: 2, height:4});'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 397,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Data Structures",
    "slug": "leonids-data-structures",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-15T11:07:01.196Z",
    "first_attempt": "2025-05-15T11:05:50.410Z",
    "last_attempt": "2025-05-15T11:07:01.196Z",
    "completed_code": "{'code': '\\n    const inventory = [\\n  { id: 101, name: \"Hand-Carved Wooden Train\", maker: \"Leonid\" },\\n  { id: 102, name: \"Painted Rocking Horse\", maker: \"Leonid\" },\\n  { id: 103, name: \"Stuffed Bear with Bow Tie\", maker: \"Leonid\" },\\n  { id: 104, name: \"Miniature Sailboat\", maker: \"Leonid\" },\\n  { id: 105, name: \"Patchwork Doll\", maker: \"Leonid\" },\\n  { id: 106, name: \"Wooden Puzzle Box\", maker: \"Leonid\" },\\n  { id: 107, name: \"Knitted Sock Monkey\", maker: \"Leonid\" },\\n  { id: 108, name: \"Spinning Top\", maker: \"Leonid\" },\\n  { id: 109, name: \"Tiny Puppet Theater\", maker: \"Leonid\" },\\n  { id: 110, name: \"Hand-Painted Marbles\", maker: \"Leonid\" },\\n  { id: 111, name: \"Fabric Kite with Tail\", maker: \"Leonid\" },\\n  { id: 112, name: \"Wool-Stuffed Bunny\", maker: \"Leonid\" },\\n  { id: 113, name: \"Wooden Xylophone\", maker: \"Leonid\" },\\n  { id: 114, name: \"Tin Wind-Up Robot\", maker: \"Leonid\" },\\n  { id: 115, name: \"Miniature Toy Chest\", maker: \"Leonid\" }\\n];\\n\\nfunction findToyById(toys, id) {\\n  for(const toy of toys) {\\n    if (toy.id === id) {\\n      return toy\\n    }\\n  }\\n      return null\\n}\\n\\nconst toyOne = findToyById(inventory,101)\\nconst toyTwo = findToyById(inventory,203)\\n\\nconsole.log(toyOne)\\nconsole.log(toyTwo)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 398,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Representing Toys as Objects",
    "slug": "leonids-objects",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-15T11:16:12.900Z",
    "first_attempt": "2025-05-15T11:16:12.899Z",
    "last_attempt": "2025-05-15T11:16:12.900Z",
    "completed_code": "{'code': 'const woodenTrain = {\\n  name: \"Thomas the Tank Engine\",\\n  manufacturer: null,\\n  priceInDollars: 10.50,\\n  inStock: false,\\n  recommendedAgeRange: \"4 to 8 yrs\",\\n  weightInGrams: 6.4,\\n}\\n\\nconst stuffedRabbit = {\\n  name: \"Trix\",\\n  manufacturer: \"Mattel\",\\n  priceInDollars: 10.50,\\n  inStock: false,\\n  recommendedAgeRange: null,\\n  weightInGrams: 6.4,\\n}\\n\\nconst kite = {\\n  name: \"Soaring High!\",\\n  manufacturer: \"Mattel\",\\n  priceInDollars: 3.99,\\n  inStock: true,\\n  recommendedAgeRange: \"4 to 8 yrs\",\\n  weightInGrams: null,\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 399,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-15T15:20:55.014Z",
    "first_attempt": "2025-05-15T15:20:55.012Z",
    "last_attempt": "2025-05-15T15:20:55.014Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [ \"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 400,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-15T15:27:59.487Z",
    "first_attempt": "2025-05-15T15:27:59.485Z",
    "last_attempt": "2025-05-15T15:27:59.487Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 401,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-15T15:45:25.496Z",
    "first_attempt": "2025-05-15T15:45:25.494Z",
    "last_attempt": "2025-05-15T15:45:25.496Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const types of topics) {\\n    console.log(types)\\n\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 402,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-15T16:11:32.872Z",
    "first_attempt": "2025-05-15T16:04:41.755Z",
    "last_attempt": "2025-05-15T16:11:32.872Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const mug of clay ) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 403,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T18:35:44.018Z",
    "first_attempt": "2025-06-03T18:35:44.018Z",
    "last_attempt": "2025-06-03T18:35:44.018Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \"Large Tank\"\\n\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 404,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T18:36:49.826Z",
    "first_attempt": "2025-06-03T18:36:49.826Z",
    "last_attempt": "2025-06-03T18:36:49.826Z",
    "completed_code": "{'code': 'const votingLocation = {\\n    name: \"Commonwealth Community Center\",\\n    address: {\\n        street: {\\n            number: 70,\\n            name: \"Main Street\"\\n        },\\n        city: \"Nashville\",\\n        state: \"TN\",\\n        zipCode: \"37021\"\\n    }\\n}\\n\\n// Add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\nconst output = (`${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`)\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 405,
  "fields": {
    "learner_github_id": "210302946",
    "learner_name": "Michael Phillips",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-12T14:10:31.213Z",
    "first_attempt": null,
    "last_attempt": "2025-05-12T14:10:31.213Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 406,
  "fields": {
    "learner_github_id": "209552604",
    "learner_name": "Stephen",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 12,
    "complete": true,
    "completed_on": "2025-05-15T19:09:45.885Z",
    "first_attempt": "2025-05-15T18:44:50.766Z",
    "last_attempt": "2025-05-15T19:09:45.885Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 407,
  "fields": {
    "learner_github_id": "209552604",
    "learner_name": "Stephen",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-15T19:14:36.622Z",
    "first_attempt": "2025-05-15T19:14:36.621Z",
    "last_attempt": "2025-05-15T19:14:36.622Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 408,
  "fields": {
    "learner_github_id": "209552604",
    "learner_name": "Stephen",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-15T19:16:57.591Z",
    "first_attempt": "2025-05-15T19:15:16.166Z",
    "last_attempt": "2025-05-15T19:16:57.591Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 409,
  "fields": {
    "learner_github_id": "209552604",
    "learner_name": "Stephen",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-15T19:25:04.950Z",
    "first_attempt": "2025-05-15T19:25:04.949Z",
    "last_attempt": "2025-05-15T19:25:04.950Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const list of topics) {\\n console.log(list)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 410,
  "fields": {
    "learner_github_id": "209552604",
    "learner_name": "Stephen",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-15T19:36:34.186Z",
    "first_attempt": "2025-05-15T19:31:48.354Z",
    "last_attempt": "2025-05-15T19:36:34.186Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunk of clay ) {\\n   const  clay =  \"coffee mug\"\\n   toFireInKiln.push(clay)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 411,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-15T21:45:55.207Z",
    "first_attempt": "2025-05-15T21:38:12.334Z",
    "last_attempt": "2025-05-15T21:45:55.208Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome\\ncombinedIncome += spouseIncome\\n\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 412,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-15T21:59:03.512Z",
    "first_attempt": "2025-05-15T21:57:12.941Z",
    "last_attempt": "2025-05-15T21:59:03.512Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `\\nOur combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${myIncome + spouseIncome - phoneBill - mortgage - carInsurance - healthInsurance}.\\n`;  // Use backticks and calculations here\\nconsole.log(statement)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 413,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-05-15T22:11:56.631Z",
    "first_attempt": "2025-05-15T22:05:28.346Z",
    "last_attempt": "2025-05-15T22:11:56.631Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 414,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-15T22:27:27.802Z",
    "first_attempt": "2025-05-15T22:19:27.449Z",
    "last_attempt": "2025-05-15T22:27:27.802Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\n\\nelse {\\n    console.log(\"I binged netflix today.\")\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 415,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-05-16T01:12:15.899Z",
    "first_attempt": "2025-05-16T01:06:34.298Z",
    "last_attempt": "2025-05-16T01:12:15.899Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n}\\n\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n}\\n\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\n\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\n\\nelse {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\"\\n}\\n\\nconsole.log(`I need to wear the following clothes to school: ${torsoClothing}, ${legClothing}, and ${footWear}.`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 416,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-05-16T01:30:27.687Z",
    "first_attempt": "2025-05-16T01:19:32.683Z",
    "last_attempt": "2025-05-16T01:30:27.687Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = malePhotos + femalePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 417,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-21T01:24:56.513Z",
    "first_attempt": null,
    "last_attempt": "2025-05-21T01:24:56.513Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 418,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-16T01:32:25.351Z",
    "first_attempt": "2025-05-16T01:32:25.351Z",
    "last_attempt": "2025-05-16T01:32:25.351Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 419,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-16T01:35:57.354Z",
    "first_attempt": "2025-05-16T01:35:57.353Z",
    "last_attempt": "2025-05-16T01:35:57.354Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 420,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-16T01:46:40.489Z",
    "first_attempt": "2025-05-16T01:46:40.488Z",
    "last_attempt": "2025-05-16T01:46:40.489Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const list of topics) {\\n    console.log(list)\\n}\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 421,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-06T16:59:20.494Z",
    "first_attempt": "2025-05-21T01:45:32.683Z",
    "last_attempt": "2025-06-06T16:59:20.494Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\nlet februaryBill = 178\\nlet marchBill = 184\\nlet aprilBill = 143\\nlet mayBill = 132\\nlet juneBill = 145\\nlet julyBill = 176\\nlet augustBill = 155\\nlet septemberBill = 158\\nlet octoberBill = 125\\nlet novemberBill = 145\\nlet decemberBill = 173\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\nconsole.log(yearlyTotal)\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 422,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Undefined",
    "slug": "string-interpolation",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-06T17:10:35.354Z",
    "first_attempt": "2025-06-06T17:10:09.003Z",
    "last_attempt": "2025-06-22T21:14:23.284Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Apple Macbook Air 2019\"\\nconst phone = \"Iphone 15 Pro\"\\nconst television = \"60 inch Roku\"\\nconst refrigerator = \"GE 27 Cu. Ft. French Door Refrigerator\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}.`\\nconsole.log(allElectronics)\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 423,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Undefined",
    "slug": "math-operations",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-06T17:25:57.540Z",
    "first_attempt": "2025-06-06T17:18:53.178Z",
    "last_attempt": "2025-06-22T21:20:20.484Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome\\ncombinedIncome += spouseIncome\\nconsole.log(combinedIncome)\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome += combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\nconsole.log(netIncome)\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 424,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Undefined",
    "slug": "multiline-strings",
    "attempts": 14,
    "complete": true,
    "completed_on": "2025-06-06T17:57:46.750Z",
    "first_attempt": "2025-05-21T01:27:33.079Z",
    "last_attempt": "2025-06-22T21:45:38.135Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst monthlyIncome = myIncome + spouseIncome\\nconst monthlyExpenses = phoneBill + mortgage + carInsurance + healthInsurance\\nconst netIncome = monthlyIncome - monthlyExpenses\\n\\n\\nconst statement = `Our combined monthly income is ${monthlyIncome}.\\nOur total monthly expenses are ${monthlyExpenses}.\\nOur net monthly income is ${netIncome}.`;  // Use backticks and calculations here\\nconsole.log(statement)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 425,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-06T18:09:01.412Z",
    "first_attempt": "2025-06-06T18:02:21.900Z",
    "last_attempt": "2025-06-06T18:09:01.412Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0,4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 426,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Undefined",
    "slug": "boolean-logic",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-22T20:28:15.700Z",
    "first_attempt": "2025-05-16T02:58:26.257Z",
    "last_attempt": "2025-06-22T20:28:15.700Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === false) {\\n    console.log(\"Yoga was fun today.\")\\n}\\n\\nelse (iWokeUpEarly === true) \\n    console.log (\"I\\'m excited to watch Netflix all day.\")\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 427,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Flexbox Item Properties",
    "slug": "leonids-arrays",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-16T09:08:00.910Z",
    "first_attempt": "2025-05-16T09:02:01.078Z",
    "last_attempt": "2025-05-16T09:08:00.910Z",
    "completed_code": "{'code': 'const toyInventory = [\\r\\n    {\\r\\n        name: \"Hot Rod Car\",\\r\\n        manufacturer: null,\\r\\n        priceInDollars: 4.22,\\r\\n    },\\r\\n    {\\r\\n        name: \"Barbie\",\\r\\n        manufacturer: \"Mattel\",\\r\\n        priceInDollars: 10.99,\\r\\n    },\\r\\n    {\\r\\n        name: \"Scrabble\",\\r\\n        manufacturer: \"Hasbro\",\\r\\n        priceInDollars: 22.98,\\r\\n    }\\r\\n]'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 428,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Displaying Toy Properties",
    "slug": "leonids-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-16T09:14:27.524Z",
    "first_attempt": "2025-05-16T09:14:27.523Z",
    "last_attempt": "2025-05-16T09:14:27.524Z",
    "completed_code": "{'code': 'const toyInventory = [\\r\\n    {\\r\\n        name: \"Wooden Train\",\\r\\n        priceInDollars: 4.22,\\r\\n    },\\r\\n    {\\r\\n        name: \"Stuffed Rabbit\",\\r\\n        priceInDollars: 10.99,\\r\\n    },\\r\\n    {\\r\\n        name: \"Painted Kite\",\\r\\n        priceInDollars: 22.98,\\r\\n    }\\r\\n]\\r\\n\\r\\nfor (const toy of toyInventory) {\\r\\n    console.log(toy.name);\\r\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 429,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "New Toys",
    "slug": "leonids-arrays-push",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-16T09:24:58.174Z",
    "first_attempt": "2025-05-16T09:23:40.905Z",
    "last_attempt": "2025-05-16T09:24:58.174Z",
    "completed_code": "{'code': 'const toyInventory = []\\r\\n\\r\\ntoyInventory.push(\"Wooden Train\")\\r\\ntoyInventory.push(\"Stuffed Rabbit\")\\r\\ntoyInventory.push(\"Painted Kite\")\\r\\n\\r\\nconst toyInventoryCollection = []\\r\\n\\r\\ntoyInventoryCollection.push({\\r\\n        name: \"Wooden Train\",\\r\\n        priceInDollars: 30,\\r\\n})\\r\\ntoyInventoryCollection.push({\\r\\n        name: \"Stuffed Rabbit\",\\r\\n        priceInDollars: 25,\\r\\n})\\r\\ntoyInventoryCollection.push({\\r\\n        name: \"Painted Kite\",\\r\\n        priceInDollars: 20,\\r\\n})'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 430,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Helping Customers Find the Right Toy",
    "slug": "leonids-conditionals",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-16T09:30:46.118Z",
    "first_attempt": "2025-05-16T09:28:21.753Z",
    "last_attempt": "2025-05-16T09:30:46.118Z",
    "completed_code": "{'code': 'const phoneToFind = 2\\r\\n\\r\\n// Define the phones array\\r\\nconst phones = [\\r\\n  {\\r\\n    id: 1,\\r\\n    name: \"iPhone\",\\r\\n    maker: \"Apple, Inc.\",\\r\\n    operatingSystem: \"iOS\",\\r\\n    price: 900,\\r\\n    weight: 1.2\\r\\n  },\\r\\n  {\\r\\n    id: 2,\\r\\n    name: \"Galaxy\",\\r\\n    maker: \"Samsung\",\\r\\n    operatingSystem: \"Android\",\\r\\n    price: 600,\\r\\n    weight: 1.4\\r\\n  },\\r\\n  {\\r\\n    id: 3,\\r\\n    name: \"Pixel\",\\r\\n    maker: \"Google\",\\r\\n    operatingSystem: \"Android\",\\r\\n    price: 750,\\r\\n    weight: 1.3\\r\\n  }\\r\\n]\\r\\n\\r\\nfor (const phone of phones) {\\r\\n    // Only one phone will cause the condition below to evaluate to true\\r\\n    if (phone.id === phoneToFind) {\\r\\n        phone.weight = phone.weight + 0.4\\r\\n        console.log(`The ${phone.maker} ${phone.name} costs ${phone.price} dollars.\\r\\n        It weighs ${phone.weight.toFixed(2)} grams.`)\\r\\n    }\\r\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 431,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Toy Catalog",
    "slug": "leonids-string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-16T09:36:23.708Z",
    "first_attempt": "2025-05-16T09:36:23.707Z",
    "last_attempt": "2025-05-16T09:36:23.708Z",
    "completed_code": "{'code': 'const toyCatalog = [\\r\\n    { name: \"Wooden Train\", priceInDollars: 30, color: \"Red\" },\\r\\n{ name: \"Stuffed Rabbit\", priceInDollars: 25, color: \"Gray\" },\\r\\n{ name: \"Painted Kite\", priceInDollars: 20, color: \"Blue\" }\\r\\n]\\r\\n\\r\\nconst displayCatalog = []\\r\\n\\r\\nfor( const toy of toyCatalog) {\\r\\n    displayCatalog.push(`Toy: ${toy.name} | Price: $${toy.priceInDollars} | Color: ${toy.color}`)\\r\\n}\\r\\n\\r\\nconsole.log(displayCatalog)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 432,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Raising Prices",
    "slug": "leonids-iteration-update",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-16T09:45:23.482Z",
    "first_attempt": "2025-05-16T09:43:20.209Z",
    "last_attempt": "2025-05-16T09:45:23.482Z",
    "completed_code": "{'code': 'const toyCatalog = [\\r\\n  { name: \"Wooden Train\", priceInDollars: 30, color: \"Red\" },\\r\\n  { name: \"Stuffed Rabbit\", priceInDollars: 25, color: \"Gray\" },\\r\\n  { name: \"Painted Kite\", priceInDollars: 20, color: \"Blue\" }\\r\\n];\\r\\n\\r\\nconst displayCatalog = []\\r\\n\\r\\nfor (const toy of toyCatalog) {\\r\\n    const newPrice = toy.priceInDollars*1.05;\\r\\n    displayCatalog.push(`Toy: ${toy.name} | Price: $${newPrice.toFixed(2)} | Color: ${toy.color}`)\\r\\n}\\r\\n\\r\\nconsole.log(displayCatalog)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 433,
  "fields": {
    "learner_github_id": "211104917",
    "learner_name": "Dale Hobbs",
    "title": "Finding the Flowers",
    "slug": "flower-shop",
    "attempts": 8,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-16T11:35:27.174Z",
    "last_attempt": "2025-05-16T11:54:02.887Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 434,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T12:13:35.498Z",
    "first_attempt": "2025-05-24T12:13:35.493Z",
    "last_attempt": "2025-05-24T12:13:35.498Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n  if (ingredient === \"egg\") {\\n   finishedFood.push(\"biscuit\")\\n  }\\n  else if (ingredient === \"beef patty\") {\\n   finishedFood.push(\"burger\")\\n  }\\n  else if (ingredient === \"potato\") {\\n   finishedFood.push(\"fries\")\\n  }\\n}\\n\\nconsole.log(rawIngredients)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 435,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T12:13:55.994Z",
    "first_attempt": "2025-05-24T12:13:55.987Z",
    "last_attempt": "2025-05-24T12:13:55.994Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expenses of monthlyExpenses) {\\n  totalExpense += expenses\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 436,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T12:14:11.990Z",
    "first_attempt": "2025-05-24T12:14:11.978Z",
    "last_attempt": "2025-05-24T12:14:11.990Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 120, 152, 122, 200, 342, 122, 237 ]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const mile of weeklyMiles) {\\ntotalMiles += mile\\n}\\n\\n// Declare a new variable to store the average miles over time\\nlet averageMiles = totalMiles / weeklyMiles.length\\nconsole.log(`I average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 437,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T12:14:44.576Z",
    "first_attempt": "2025-05-24T12:14:44.569Z",
    "last_attempt": "2025-05-24T12:14:44.576Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours) {\\n   if (hour < 7) {\\n   grumpyHours.push(hour)\\n   }\\n   else { happyHours.push(hour)\\n   }\\n}\\nconsole.log(`I was grumpy on ${grumpyHours.length} days.\\nI was happy on ${happyHours.length} days.`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 438,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Data Structures",
    "slug": "leonids-data-structures",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-16T20:16:09.589Z",
    "first_attempt": "2025-05-16T19:16:40.124Z",
    "last_attempt": "2025-05-16T20:16:09.589Z",
    "completed_code": "{'code': '\\nconst inventory = [\\n    { id: 101, name: \"Hand-Carved Wooden Train\", maker: \"Leonid\" },\\n    { id: 102, name: \"Painted Rocking Horse\", maker: \"Leonid\" },\\n    { id: 103, name: \"Stuffed Bear with Bow Tie\", maker: \"Leonid\" },\\n    { id: 104, name: \"Miniature Sailboat\", maker: \"Leonid\" },\\n    { id: 105, name: \"Patchwork Doll\", maker: \"Leonid\" },\\n    { id: 106, name: \"Wooden Puzzle Box\", maker: \"Leonid\" },\\n    { id: 107, name: \"Knitted Sock Monkey\", maker: \"Leonid\" },\\n    { id: 108, name: \"Spinning Top\", maker: \"Leonid\" },\\n    { id: 109, name: \"Tiny Puppet Theater\", maker: \"Leonid\" },\\n    { id: 110, name: \"Hand-Painted Marbles\", maker: \"Leonid\" },\\n    { id: 111, name: \"Fabric Kite with Tail\", maker: \"Leonid\" },\\n    { id: 112, name: \"Wool-Stuffed Bunny\", maker: \"Leonid\" },\\n    { id: 113, name: \"Wooden Xylophone\", maker: \"Leonid\" },\\n    { id: 114, name: \"Tin Wind-Up Robot\", maker: \"Leonid\" },\\n    { id: 115, name: \"Miniature Toy Chest\", maker: \"Leonid\" }\\n];\\n\\nfunction findToyById(toys, id) {\\n    for (let i = 0; i < toys.length; i++) {\\n        if (toys[i].id === id) {\\n            return toys[i]\\n        }\\n    }\\n    return null\\n\\n}\\n\\nlet getToy = findToyById(inventory, 115)\\nlet getToy2 = findToyById(inventory, 116)\\n\\nconsole.log(getToy)\\nconsole.log(getToy2)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 439,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Representing Toys as Objects",
    "slug": "leonids-objects",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-16T20:54:26.950Z",
    "first_attempt": "2025-05-16T20:54:26.949Z",
    "last_attempt": "2025-05-16T20:54:26.950Z",
    "completed_code": "{'code': 'function createToyObject(name, manufacturer, priceInDollars, inStock, recommendedAgeRange, weightInGrams) {\\n    return {\\n        name,\\n        manufacturer,\\n        priceInDollars, \\n        inStock,\\n        recommendedAgeRange,\\n        weightInGrams\\n    }\\n}\\n\\nconst woodenTrain = createToyObject(\"Wood Train\", \"Leonid\", 20, true, null, 456);\\nconst stuffedRabbit = createToyObject(\"Plush Rabbit\", \"Leonid\", 19.99, false, null, 321);\\nconst kite = createToyObject(\"Fly High Kite\", \"Leonid\", 25, true, null, 109)\\n\\nconsole.log(woodenTrain);\\nconsole.log(stuffedRabbit);\\nconsole.log(kite)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 440,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Toy Collection",
    "slug": "leonids-arrays",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-16T21:10:43.893Z",
    "first_attempt": "2025-05-16T21:10:22.789Z",
    "last_attempt": "2025-05-16T21:10:43.893Z",
    "completed_code": "{'code': 'const toyInventory = [\\n    {\\n        name: \"Wood Train\",\\n        manufacturer: \"Leonid\",\\n        priceInDollars: 20\\n    },\\n    {\\n        name: \"Plush Rabbit\",\\n        manufacturer: \"Leonid\",\\n        priceInDollars: 19.99\\n    },\\n    {\\n        name: \"Fly High Kite\",\\n        manufacturer: \"Leonid\",\\n        priceInDollars: null\\n    }\\n]\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 441,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Displaying Toy Properties",
    "slug": "leonids-iteration",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-16T21:39:08.045Z",
    "first_attempt": "2025-05-16T21:35:51.012Z",
    "last_attempt": "2025-05-16T21:39:08.045Z",
    "completed_code": "{'code': 'const toyInventory = [\\n    {\\n        name: \"Wooden Train\",\\n        priceInDollars: 1000000\\n\\n    },\\n    {\\n        name: \"Stuffed Rabbit\",\\n        priceInDollars: 420\\n    },\\n    {\\n        name: \"Painted Kite\",\\n        priceInDollars: 1\\n    }\\n];\\n\\nfor (const toys of toyInventory) {\\n    console.log(toys.name)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 442,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "New Toys",
    "slug": "leonids-arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-16T21:47:32.277Z",
    "first_attempt": "2025-05-16T21:47:32.276Z",
    "last_attempt": "2025-05-16T21:47:32.277Z",
    "completed_code": "{'code': 'let toyInventory = [];\\n\\ntoyInventory.push(\"Wooden Train\");\\ntoyInventory.push(\"Stuffed Rabbit\");\\ntoyInventory.push(\"Painted Kite\");\\n\\nconsole.log(toyInventory);\\n\\nlet toyInventoryCollection = [];\\n\\ntoyInventoryCollection.push({name: \"Wooden Train\", priceInDollars: 30});\\ntoyInventoryCollection.push({name: \"Stuffed Rabbit\", priceInDollars: 25});\\ntoyInventoryCollection.push({name: \"Painted Kite\", priceInDollars: 20})\\n\\nconsole.log(toyInventoryCollection)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 443,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Helping Customers Find the Right Toy",
    "slug": "leonids-conditionals",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-16T23:13:00.445Z",
    "first_attempt": "2025-05-16T21:58:55.732Z",
    "last_attempt": "2025-05-16T23:13:00.445Z",
    "completed_code": "{'code': '// Define the phones array\\nconst phones = [\\n  {\\n    id: 1,\\n    name: \"iPhone\",\\n    maker: \"Apple, Inc.\",\\n    operatingSystem: \"iOS\",\\n    price: 900,\\n    weight: 1.2\\n  },\\n  {\\n    id: 2,\\n    name: \"Galaxy\",\\n    maker: \"Samsung\",\\n    operatingSystem: \"Android\",\\n    price: 600,\\n    weight: 1.4\\n  },\\n  {\\n    id: 3,\\n    name: \"Pixel\",\\n    maker: \"Google\",\\n    operatingSystem: \"Android\",\\n    price: 750,\\n    weight: 1.3\\n  }\\n]\\n\\nconst phoneToFind = 2\\n\\nfor (const phone of phones) {\\n    // Only one phone will cause the condition below to evaluate to true\\n    if (phone.id === phoneToFind) {\\n        phone.weight = phone.weight + 0.4\\n        let roundedNum = phone.weight.toFixed(1)\\n        console.log(`The ${phone.maker} ${phone.name} costs ${phone.price} dollars. It weighs ${roundedNum} grams.`)\\n    }\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 444,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Toy Catalog",
    "slug": "leonids-string-interpolation",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-05-16T23:38:36.797Z",
    "first_attempt": "2025-05-16T23:26:50.909Z",
    "last_attempt": "2025-05-16T23:38:36.797Z",
    "completed_code": "{'code': 'const displayCatalog = [];\\n\\nconst toyCatalog = [\\n    {\\n        name: \"Wooden Train\",\\n        priceInDollars: 30,\\n        color: \"Red\"\\n    },\\n {\\n        name: \"Stuffed Rabbit\",\\n        priceInDollars: 25,\\n        color: \"Gray\"\\n    },\\n     {\\n        name: \"Painted Kite\",\\n        priceInDollars: 20,\\n        color: \"Blue\"\\n    }\\n];\\n\\n\\nfor (const toys of toyCatalog) {\\n    displayCatalog.push(`Toy: ${toys.name} | Price: $${toys.priceInDollars} | Color: ${toys.color}`\\n)\\n}\\n\\nfor (const item of displayCatalog) {\\n    console.log(item)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 445,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Raising Prices",
    "slug": "leonids-iteration-update",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-17T00:51:13.261Z",
    "first_attempt": "2025-05-17T00:49:10.829Z",
    "last_attempt": "2025-05-17T00:51:13.261Z",
    "completed_code": "{'code': 'const toyCatalog = [\\n    { name: \"Wooden Train\", priceInDollars: 30, color: \"Red\" },\\n    { name: \"Stuffed Rabbit\", priceInDollars: 25, color: \"Gray\" },\\n    { name: \"Painted Kite\", priceInDollars: 20, color: \"Blue\" }\\n];\\n\\ndisplayCatalog = [];\\n\\nfor (const toys of toyCatalog) {\\n    let updatedPrice = toys.priceInDollars + (toys.priceInDollars * 0.05)\\n\\n\\n    displayCatalog.push(`Toy: ${toys.name} | Price: $${updatedPrice.toFixed(2)} | Color: ${toys.color}`);\\n\\n}\\n\\nconsole.log(displayCatalog)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 446,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-17T01:46:13.749Z",
    "first_attempt": null,
    "last_attempt": "2025-05-17T01:46:13.749Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 447,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-17T15:36:51.291Z",
    "first_attempt": null,
    "last_attempt": "2025-05-17T15:36:51.291Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 448,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-17T15:36:53.874Z",
    "first_attempt": null,
    "last_attempt": "2025-05-17T15:36:53.874Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 449,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-17T15:37:06.824Z",
    "first_attempt": null,
    "last_attempt": "2025-05-17T15:37:06.824Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 450,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 414,
    "complete": true,
    "completed_on": "2025-05-17T19:54:30.292Z",
    "first_attempt": "2025-05-17T19:19:27.472Z",
    "last_attempt": "2025-05-17T19:54:30.292Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n <h1>How I Became A Software Developer</h1>      <!-- Your content goes here -->\\n <article>\\n  <h2>Nashville Software School</h2>\\n  <section>\\n    Best experience of my life\\n  </section>\\n  <section>\\n    <p>I learned the following skills</p>\\n    <ol>\\n      <li>Variables</li>\\n      <li>Arrays</li>\\n      <li>Objects</li>\\n      <li>Functions</li>\\n      <li>HTML</li>\\n      <li>CSS</li>\\n    </ol>\\n  </section>\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n/* Add your styles here */\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 451,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "HTML Elements",
    "slug": "html-elements",
    "attempts": 359,
    "complete": true,
    "completed_on": "2025-05-29T13:45:53.991Z",
    "first_attempt": "2025-05-17T19:54:34.907Z",
    "last_attempt": "2025-05-29T13:45:53.991Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n<header>\\n  <nav>\\n    <div>Home</div>\\n    <div>Projects</div>\\n    <div>Education</div>\\n  </nav>\\n</header>\\n\\n<main>\\n  <article>\\n    <h1>Erika Hughes</h1>\\n    <section>\\n    15 years in childcare making a career change.\\n    </section>\\n    <section>\\n      Looking for a new career that fullfills my personal goals.\\n    </section>\\n  </article>\\n</main>\\n\\n<footer>\\nErika Hughes, 2025 eriah@gmail.com\\n</footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 452,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T12:15:07.434Z",
    "first_attempt": "2025-05-24T12:15:07.427Z",
    "last_attempt": "2025-05-24T12:15:07.434Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")) {\\n   light++\\n  }\\n  else if (coffee.includes(\"medium\")) {\\n   medium++\\n  }\\n  else if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")) {\\n   toastyDark++\\n  }\\n}\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 453,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T12:15:24.971Z",
    "first_attempt": "2025-05-24T12:15:24.959Z",
    "last_attempt": "2025-05-24T12:15:24.971Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\nconst disorderArray = disorders.split(\"|$|\")\\n\\nconst htmlContent = disorderArray.join(\"</div><div>\")\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\nconst output = `<div>${htmlContent}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 454,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-18T19:10:08.797Z",
    "first_attempt": "2025-05-18T19:10:08.794Z",
    "last_attempt": "2025-05-18T19:10:08.797Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nlet februaryBill = 150\\nlet marchBill = 140\\nlet aprilBill = 135\\nlet mayBill = 133\\nlet juneBill = 131\\nlet julyBill = 131\\nlet augustBill = 130\\nlet septemberBill = 134\\nlet octoberBill = 137\\nlet novemberBill = 146\\nlet decemberBill = 144\\n\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 455,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-18T19:17:15.788Z",
    "first_attempt": "2025-05-18T19:17:15.787Z",
    "last_attempt": "2025-05-18T19:17:15.788Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"2019 Macbook Pro 15-inch\"\\nconst phone = \"iPhone 16 base model\"\\nconst television = \"50-inch Sony flatscreen\"\\nconst refrigerator = \"Samsung large two-door\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices: my ${television} television, my ${computer} computer, my ${refrigerator} refrigerator, and my ${phone} phone`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 456,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-18T19:42:38.045Z",
    "first_attempt": "2025-05-18T19:27:44.650Z",
    "last_attempt": "2025-05-18T19:42:38.045Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunks of clay) {\\n   const mug = \"coffee mug\"\\n    toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 457,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-18T19:37:46.423Z",
    "first_attempt": "2025-05-18T19:30:26.211Z",
    "last_attempt": "2025-05-18T19:37:46.423Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome\\ncombinedIncome += spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome += combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 458,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-18T19:50:34.447Z",
    "first_attempt": "2025-05-18T19:40:00.877Z",
    "last_attempt": "2025-05-18T19:50:34.447Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\nlet combinedIncome = 0;\\ncombinedIncome += myIncome;\\ncombinedIncome += spouseIncome; \\n\\nlet monthlyExpenses = 0; \\nmonthlyExpenses += phoneBill; \\nmonthlyExpenses += mortgage; \\nmonthlyExpenses += carInsurance; \\nmonthlyExpenses += healthInsurance;\\n\\nlet netIncome = 0;\\nnetIncome += combinedIncome; \\nnetIncome -= monthlyExpenses;\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${combinedIncome}.\\nOur total monthly expenses are ${monthlyExpenses}.\\nOur net monthly income is ${netIncome}.`;  // Use backticks and calculations here\\n\\nconsole.log(statement);\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 459,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-18T20:03:13.708Z",
    "first_attempt": "2025-05-18T20:03:13.706Z",
    "last_attempt": "2025-05-18T20:03:13.708Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  if (ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\")\\n  }\\n\\n  else if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n  }\\n  \\n  else if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\")\\n  }\\n  \\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 460,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-19T00:25:59.946Z",
    "first_attempt": "2025-05-19T00:25:23.204Z",
    "last_attempt": "2025-05-19T00:25:59.946Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim();\\nconst formattedPhone = phone.replace(\" \", \"-\");\\nconst formattedName = customerName.toUpperCase();\\nconst containsX = password.includes(\"x\"); \\nconst fileStart = filename.slice(0, 4);\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 461,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-19T00:48:29.453Z",
    "first_attempt": "2025-05-19T00:45:47.998Z",
    "last_attempt": "2025-05-19T00:48:29.453Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false;\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse {\\n   console.log(\"Netflix was fun today.\")\\n   }'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 462,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-19T01:11:55.078Z",
    "first_attempt": "2025-05-19T01:11:55.076Z",
    "last_attempt": "2025-05-19T01:11:55.078Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"t-shirt\";\\n    legClothing = \"shorts\";\\n    footWear = \"sandals\";\\n}\\n\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"t-shirt\";\\n    legClothing = \"shorts\";\\n    footWear = \"sneakers\";\\n}\\n\\nelse if (temperature < 75 && temperature >=50) {\\n   torsoClothing = \"sweater\";\\n   legClothing = \"pants\";\\n   footWear = \"sneakers\";\\n}\\n\\nelse if (temperature < 50 && temperature >= 35) {\\n   torsoClothing = \"jacket\";\\n   legClothing = \"pants\";\\n   footWear = \"sneakers\";\\n}\\n\\nelse {\\n   torsoClothing = \"jacket\";\\n   legClothing = \"pants\";\\n   footWear = \"boots\";\\n}\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 463,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-19T01:42:36.122Z",
    "first_attempt": "2025-05-19T01:26:40.296Z",
    "last_attempt": "2025-05-19T01:42:36.122Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos += femalePhotos; \\ntotalPhotos += malePhotos;\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n   photoStorage = \"Photo Album\"\\n}\\n\\nelse if (totalPhotos >= 50) {\\n   photoStorage = \"Shoe Box\"\\n}\\n\\nelse {\\n   photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n   albumColor = \"plum\"\\n}\\n\\nelse {\\n   albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 464,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-19T11:17:36.286Z",
    "first_attempt": "2025-05-19T11:13:14.859Z",
    "last_attempt": "2025-05-19T11:17:36.286Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const cost of monthlyExpenses) {\\n  // Add the current monthly cost to the value of totalExpense\\n    totalExpense += cost\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 465,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-20T11:42:03.474Z",
    "first_attempt": "2025-05-19T11:23:14.149Z",
    "last_attempt": "2025-05-20T11:42:03.474Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [20, 39, 01, 45, 28, 83, 20, 54]\\n\\n// Declare a variable to store the total. Initial value is 0.\\ntotalMiles = 0\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\n    totalMiles += miles\\n}\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles} each week. \\nI have driven a total of ${totalMiles} miles.`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 466,
  "fields": {
    "learner_github_id": "2614324",
    "learner_name": "Gabriel Cziprusz",
    "title": "Undefined",
    "slug": "multiline-strings",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-20T14:31:16.224Z",
    "last_attempt": "2025-05-20T14:31:16.224Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 467,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T19:33:33.765Z",
    "first_attempt": "2025-06-03T19:33:33.764Z",
    "last_attempt": "2025-06-03T19:33:33.765Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet () {\\n    console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 468,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T19:33:58.368Z",
    "first_attempt": "2025-06-03T19:33:58.368Z",
    "last_attempt": "2025-06-03T19:33:58.368Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n    console.log(\"Touchdown!\")\\n}\\n\\ncelebrateScore()\\ncelebrateScore()\\n\\n// 2. Invoke it twice below\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 469,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T19:34:28.906Z",
    "first_attempt": "2025-06-03T19:34:28.905Z",
    "last_attempt": "2025-06-03T19:34:28.906Z",
    "completed_code": "{'code': 'function isGreaterThanHundred(num) {\\n    return num > 100\\n}\\n\\nfunction displayWelcomeMessage(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\nfunction calculateDiscountedPrice(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 470,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T19:35:08.336Z",
    "first_attempt": "2025-06-03T19:35:08.336Z",
    "last_attempt": "2025-06-03T19:35:08.336Z",
    "completed_code": "{'code': 'function describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 471,
  "fields": {
    "learner_github_id": "210302946",
    "learner_name": "Michael Phillips",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-20T16:37:59.678Z",
    "last_attempt": "2025-05-20T16:37:59.678Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 472,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T19:35:59.404Z",
    "first_attempt": "2025-06-03T19:35:59.404Z",
    "last_attempt": "2025-06-03T19:35:59.404Z",
    "completed_code": "{'code': 'function calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 473,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-20T16:57:01.164Z",
    "first_attempt": "2025-05-20T16:57:01.162Z",
    "last_attempt": "2025-05-20T16:57:01.164Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [ yellowFruit, orangeFruit, redFruit, greenFruit, blueFruit ]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 474,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-20T17:00:35.830Z",
    "first_attempt": "2025-05-20T17:00:23.725Z",
    "last_attempt": "2025-05-20T17:00:35.830Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 475,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Undefined",
    "slug": "flower-shop",
    "attempts": 50,
    "complete": true,
    "completed_on": "2025-05-21T20:29:54.791Z",
    "first_attempt": "2025-05-20T17:38:29.434Z",
    "last_attempt": "2025-05-21T20:29:54.791Z",
    "completed_code": "{'code': '\\nconst flowers = [\\n    {\\n        id: 1,\\n        type: \"Rose\",\\n        colors: [\"White\", \"Red\", \"Violet\", \"Pink\", \"Black\", \"Yellow\"],\\n        price: 2.59,\\n        usdaZones: [3, 4, 5, 6, 7, 8, 9, 10]\\n    },\\n    {\\n        id: 2,\\n        type: \"Tulip\",\\n        colors: [\"Orange\", \"White\", \"Yellow\", \"Violet\", \"Red\"],\\n        price: 1.04,\\n        usdaZones: [5, 6, 7, 8, 9]\\n    },\\n    {\\n        id: 3,\\n        type: \"Daisy\",\\n        colors: [\"Gold\", \"White\", \"Orange\", \"Crimson\"],\\n        price: 0.89,\\n        usdaZones: [3, 4, 5, 6, 7, 8]\\n    },\\n    {\\n        id: 4,\\n        type: \"Carnation\",\\n        colors: [\"Peach\", \"Yellow\", \"Magenta\", \"Pink\", \"Coral\"],\\n        price: 1.59,\\n        usdaZones: [5, 6, 7, 8, 9]\\n    },\\n    {\\n        id: 5,\\n        type: \"Bird of Paradise\",\\n        colors: [\"Orange\", \"White\"],\\n        price: 2.33,\\n        usdaZones: [9, 10, 11]\\n    },\\n    {\\n        id: 6,\\n        type: \"Delphinium\",\\n        colors: [\"Blue\", \"Violet\", \"White\", \"Pink\"],\\n        price: 1.67,\\n        usdaZones: [3, 4, 5, 6, 7]\\n    },\\n    {\\n        id: 7,\\n        type: \"Gladiolus\",\\n        colors: [\"White\", \"Cream\", \"Yellow\", \"Red\", \"Pink\", \"Green\", \"Lavender\", \"Voilet\"],\\n        price: 1.85,\\n        usdaZones: [6, 7, 8, 9, 10]\\n    },\\n    {\\n        id: 8,\\n        type: \"Lilly\",\\n        colors: [\"White\", \"Yellow\", \"Orange\", \"Red\", \"Pink\", \"Lavender\"],\\n        price: 1.52,\\n        usdaZones: [3, 4, 5, 6, 7, 8, 9]\\n    },\\n    {\\n        id: 9,\\n        type: \"Chinese Lantern\",\\n        colors: [\"Orange\"],\\n        price: 2.33,\\n        usdaZones: [3, 4, 5, 6, 7, 8, 9]\\n    }\\n]\\n\\n/*\\n    Below are some functions, in which you will write ALL of your\\n    code. Do not modify the code that defines the functions, and\\n    do not write any code outside of the functions.\\n*/\\n\\n\\n/*\\n    This function should return inexpensive flowers - ones that cost\\n    less than 2.00 per flower.\\n*/\\nconst inexpensiveFlowers = () => {\\n    let filteredFlowers = []  // Do not modify\\n    for ( const flower of flowers) {\\n        if( flower.price < 2.00 ) {\\n            filteredFlowers.push(flower)\\n        }\\n    }\\n\\n\\n    return filteredFlowers  // Do not modify\\n\\n}\\n\\n/*\\n    This function should return flowers that grow in\\n    USDA zones of 3 and 8.\\n*/\\nconst zoneFlowers = () => {\\n    let filteredFlowers = []  // Do not modify\\n\\n    for (const flower of flowers) {\\n        if ( flower.usdaZones.includes(3) && flower.usdaZones.includes(8)) {\\n            filteredFlowers.push(flower)\\n        }\\n    }\\n\\n    return filteredFlowers  // Do not modify\\n}\\n\\n\\n\\n/*\\n    This function should return flowers that come in the color Orange\\n*/\\nconst orangeFlowers = () => {\\n    let filteredFlowers = []  // Do not modify\\n\\n    for ( const flower of flowers) { \\n        if (flower.colors.includes(\"Orange\")) {\\n            filteredFlowers.push(flower)\\n        }\\n    }\\n\\n    return filteredFlowers  // Do not modify\\n}\\n\\n\\n\\n/*\\n    This function should return an HTML representation of each flower.\\n\\n    Expected string format:\\n        <article>\\n            <h1>Bird of Paradise</h1>\\n\\n            <h2>Colors</h2>\\n            <section>White</section>\\n            <section>Orange</section>\\n\\n            <h2>USDA Zones</h2>\\n            <div>9</div>\\n            <div>10</div>\\n            <div>11</div>\\n        </article>\\n*/\\nconst flowersAsHTML = () => {\\n    let flowersHTMLString = \"\"  // Do not modify\\n    for (const flower of flowers) {\\n        flowersHTMLString += `<article>\\n            <h1>${flower.type}</h1>\\n            \\n            <h2>Colors</h2>`\\n\\n            for (let color of flower.colors) {\\n                flowersHTMLString += `<section>${color}</section>`\\n            }\\n            flowersHTMLString += `<h2>USDA Zones</h2>`\\n\\n            for (let zone of flower.usdaZones) {\\n                flowersHTMLString += `<div>${zone}</div>`\\n            }\\n\\n            flowersHTMLString += `</article>`\\n    }\\n\\n    /*\\n        Algorithmic thinking is most important on this one.\\n        We would rather see the correct algorithm than the\\n        correct code. If you have code that works, but no\\n        algorithm, then you failed the exercise.\\n    */\\n    return flowersHTMLString  // Do not modify\\n}\\n\\nlet cheapFlowers = inexpensiveFlowers(flowers);\\nlet suitableZone = zoneFlowers(flowers);\\nlet hasOrangeVariety = orangeFlowers(flowers);\\nlet fullString = flowersAsHTML(flowers);\\n\\nconsole.log(cheapFlowers.length);\\nconsole.log(suitableZone.length);\\nconsole.log(hasOrangeVariety.length);\\nconsole.log(fullString)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 476,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-20T18:41:22.508Z",
    "first_attempt": "2025-05-20T18:41:07.108Z",
    "last_attempt": "2025-05-20T18:41:22.508Z",
    "completed_code": "{'code': '\\n\\n\\nconst topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ];\\n\\nfor (const item of topics) {\\n    console.log(item)\\n};'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 477,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-20T18:47:40.726Z",
    "first_attempt": "2025-05-20T18:47:40.725Z",
    "last_attempt": "2025-05-20T18:47:40.726Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const item of clay) {\\n   const mug = \"coffee mug\";\\n   toFireInKiln.push(mug);\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 478,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-20T19:01:01.963Z",
    "first_attempt": "2025-05-20T18:57:40.998Z",
    "last_attempt": "2025-05-20T19:01:01.963Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n if (ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\")\\n }\\n\\n else if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n }\\n\\n else if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\")\\n }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 479,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-20T19:04:56.375Z",
    "first_attempt": "2025-05-20T19:04:56.374Z",
    "last_attempt": "2025-05-20T19:04:56.375Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ];\\nlet totalExpense = 0;\\n\\nfor (const month of monthlyExpenses) {\\n  totalExpense += month\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length;\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 480,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-20T19:13:54.775Z",
    "first_attempt": "2025-05-20T19:10:10.813Z",
    "last_attempt": "2025-05-20T19:13:54.775Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 125, 511, 55, 301, 144 ];\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0;\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const number of weeklyMiles) {\\n    totalMiles += number\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length; \\n\\nconsole.log(`I average ${averageMiles} each week.\\nI have driven a total of ${totalMiles}.`);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 481,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-20T19:27:50.917Z",
    "first_attempt": "2025-05-20T19:19:27.913Z",
    "last_attempt": "2025-05-20T19:27:50.917Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nlet grumpyHours = []\\nlet happyHours = []\\n\\n\\nfor (const number of hours) {\\n    if (number >= 7) {\\n        happyHours.push(number)\\n    }\\n\\n    else if (number < 7) {\\n        grumpyHours.push(number)\\n    }\\n}\\n\\n\\nconsole.log(`The number of items in grumpyHours is ${grumpyHours.length}.\\nThe number of items in happyHours is ${happyHours.length}.`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 482,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-20T19:36:29.286Z",
    "first_attempt": "2025-05-20T19:36:29.285Z",
    "last_attempt": "2025-05-20T19:36:29.286Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0;\\nlet medium = 0;\\nlet toastyDark = 0;\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")) {\\n    light ++\\n  }\\n\\n  else if (coffee.includes(\"medium\")) {\\n    medium ++\\n  }\\n\\n  else if (coffee.includes(\"dark\") || coffee.includes(\"toasty\")) {\\n    toastyDark ++\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 483,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-20T19:52:57.945Z",
    "first_attempt": "2025-05-20T19:52:57.944Z",
    "last_attempt": "2025-05-20T19:52:57.945Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\");\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\");\\nconsole.log(htmlString);\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`;\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 484,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-20T21:53:25.471Z",
    "first_attempt": "2025-05-20T21:02:57.255Z",
    "last_attempt": "2025-05-20T21:53:25.471Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []        // \"Clothing\"\\nconst entertainment = []   // \"Movie\"\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nconst utilities = []       // \"Utility\"\\nconst largePurchases = []  // Expenses over 100.00\\n\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nlet averageExpense = 0\\n\\n\\n\\nfor (const expense of monthlyExpenses) {\\n    const [item, amountStr] = expense.split(\":\");\\n    const amount = parseFloat(amountStr);\\n\\n    if (amount > 100) {\\n        largePurchases.push(amount);\\n    }\\n\\n    if (item.includes(\"Clothing\")) {\\n        clothing.push(amount)\\n    }\\n\\n    if (item.includes(\"Movie\")) {\\n        entertainment.push(amount)\\n    }\\n\\n    if (item.includes(\"Fuel\") || item.includes(\"Gas\")) {\\n        fuel.push(amount)\\n    }\\n\\n    if (item.includes(\"Utility\")) {\\n        utilities.push(amount)\\n    }\\n\\n    if (item.includes(\"Groceries\") || item.includes(\"Restaurant\"))  {\\n        food.push(amount)\\n    }\\n\\n    if (item.includes(\"Lyft\") || item.includes(\"Uber\"))  {\\n        travel.push(amount)\\n    }\\n\\n    totalExpenses += amount; \\n};\\n\\naverageExpense = totalExpenses / monthlyExpenses.length;\\n\\nconsole.log(averageExpense);\\n\\n\\n\\n\\n\\n/*\\n Use your algorithmic thinking for the steps to\\n categorize, total, and average the expenses.\\n\\n Be patient and take your time. This is challenging.\\n*/\\n\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 485,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-20T21:24:50.492Z",
    "first_attempt": "2025-05-20T21:22:56.893Z",
    "last_attempt": "2025-05-20T21:24:50.492Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours){\\n  if (hour > 6) {\\n    happyHours.push(hour)\\n  }\\n  else {\\n    grumpyHours.push(hour)\\n  }\\n}\\nconsole.log(`I was grumpy on ${grumpyHours.length} days.`)\\nconsole.log(`I was happy on ${happyHours.length} days.`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 486,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-20T21:40:31.634Z",
    "first_attempt": "2025-05-20T21:38:44.235Z",
    "last_attempt": "2025-05-20T21:40:31.634Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  // Add your logic here\\n  if (coffee.includes(\"light\")) {\\n    light++\\n  }\\n\\n  else if (coffee.includes(\"medium\")){\\n    medium++\\n  }\\n\\n    else if (coffee.includes(\"toasty\")|| coffee.includes(\"dark\")){\\n    toastyDark++\\n  }\\n}\\n\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 487,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Finding the Flowers",
    "slug": "flower-shop",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-20T21:38:51.193Z",
    "last_attempt": "2025-05-20T21:40:53.212Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 488,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-05-20T22:08:48.253Z",
    "first_attempt": "2025-05-20T22:01:54.692Z",
    "last_attempt": "2025-05-20T22:08:48.253Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 489,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-20T22:15:47.179Z",
    "last_attempt": "2025-05-20T22:18:43.207Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 490,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-20T22:21:40.634Z",
    "first_attempt": "2025-05-20T22:20:57.134Z",
    "last_attempt": "2025-05-20T22:21:40.634Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n  name: \"Jeremy Landy\",\\n  location: \"Phoenix, AR\",\\n  gender: \"male\",\\n  age: 31\\n}\\n\\nconsole.log(student)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 491,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-20T22:24:04.049Z",
    "first_attempt": "2025-05-20T22:24:04.048Z",
    "last_attempt": "2025-05-20T22:24:04.049Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\ncolor: \"blue\",\\nstemLength: 10,\\ngrowingSeason: \"Summer\",\\nthorny: false\\n}\\n\\n// Complete the rose object\\nconst rose = {\\ncolor: \"red\",\\nstemLength: 14,\\ngrowingSeason: \"Spring\",\\nthorny: true\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 492,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-05-21T21:10:16.428Z",
    "first_attempt": "2025-05-20T22:32:58.496Z",
    "last_attempt": "2025-05-21T21:10:16.428Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Iterate the array and create appointment strings\\nfor (const appointment of appointments) {\\n    schedule += `Patient ${appointment.firstName} ${appointment.lastName} has an appointment at ${appointment.appointmentTime}\\\\n`\\n}\\n\\nconsole.log(schedule)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 493,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T00:09:03.478Z",
    "first_attempt": "2025-05-21T00:09:03.476Z",
    "last_attempt": "2025-05-21T00:09:03.478Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n    name: \"Jeremy Landy\", \\n    location: \"Phoenix, AR\", \\n    gender: \"male\", \\n    age: 31,\\n}\\n\\nconsole.log(student);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 494,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T00:20:24.664Z",
    "first_attempt": "2025-05-21T00:20:24.663Z",
    "last_attempt": "2025-05-21T00:20:24.664Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n    color: \"yellow\", \\n    stemLength: 15, \\n    growingSeason: \"Spring\",\\n    thorny: false,\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n    color: \"red\", \\n    stemLength: 10, \\n    growingSeason: \"Summer\",\\n    thorny: true,\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 495,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T00:49:20.216Z",
    "first_attempt": "2025-05-21T00:49:20.215Z",
    "last_attempt": "2025-05-21T00:49:20.216Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\nfor (const patient of appointments) {\\n    schedule += `Patient ${patient.firstName} ${patient.lastName} has an appointment at ${patient.appointmentTime}\\\\n`\\n}\\n\\n\\n\\n\\nconsole.log(schedule)\\n\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 496,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T01:15:11.210Z",
    "first_attempt": "2025-05-21T01:15:11.209Z",
    "last_attempt": "2025-05-21T01:15:11.210Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email;\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 497,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T01:21:51.177Z",
    "first_attempt": "2025-05-21T01:21:51.175Z",
    "last_attempt": "2025-05-21T01:21:51.177Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName;\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName;\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 498,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T01:24:54.219Z",
    "first_attempt": "2025-05-21T01:24:54.217Z",
    "last_attempt": "2025-05-21T01:24:54.219Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \"Large Tank\"; \\n\\nconsole.log(goldfish.location);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 499,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-21T01:24:54.495Z",
    "first_attempt": null,
    "last_attempt": "2025-05-21T01:24:54.495Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 500,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-21T01:24:55.230Z",
    "first_attempt": null,
    "last_attempt": "2025-05-21T01:24:55.230Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 501,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-21T01:24:55.846Z",
    "first_attempt": null,
    "last_attempt": "2025-05-21T01:24:55.846Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 502,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T01:31:19.822Z",
    "first_attempt": "2025-05-21T01:31:19.821Z",
    "last_attempt": "2025-05-21T01:31:19.822Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\";\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`;\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 503,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T01:36:02.284Z",
    "first_attempt": "2025-05-21T01:36:02.283Z",
    "last_attempt": "2025-05-21T01:36:02.284Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet () {\\n    console.log(\"Good dog!\");\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet();\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 504,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T01:40:13.358Z",
    "first_attempt": "2025-05-21T01:40:13.358Z",
    "last_attempt": "2025-05-21T01:40:13.358Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore () {\\n    console.log(\"Touchdown!\")\\n};\\n\\n// 2. Invoke it twice below\\ncelebrateScore(); \\ncelebrateScore();\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 505,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-21T01:46:17.817Z",
    "first_attempt": "2025-05-21T01:45:54.359Z",
    "last_attempt": "2025-05-21T01:46:17.817Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreaterThanOneHundred(num) {\\n    return num > 100\\n};\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayGreeting(name) {\\n    console.log(\"Welcome \" + name)\\n};\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscountedPrice(price) {\\n    return price * 0.8\\n};'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 506,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-21T01:51:45.206Z",
    "first_attempt": "2025-05-21T01:50:54.983Z",
    "last_attempt": "2025-05-21T01:51:45.206Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\ndescribeActivity(\"eating\");'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 507,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T02:03:58.046Z",
    "first_attempt": "2025-05-21T02:03:58.045Z",
    "last_attempt": "2025-05-21T02:03:58.046Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\ncalculateTotal(50);\\n// 2. Calculate total for $99.99\\ncalculateTotal(99.99);\\n// 3. Calculate total for $25.50\\ncalculateTotal(25.50);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 508,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T02:11:19.650Z",
    "first_attempt": "2025-05-21T02:11:19.649Z",
    "last_attempt": "2025-05-21T02:11:19.650Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore (playerName, points) {\\n    console.log(`${playerName} scored ${points} points!`)\\n};\\n\\ndisplayGameScore(\"Clint\", 27);\\n\\n\\n// Then invoke the function with different player names and scores\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 509,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 5,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-21T02:25:54.196Z",
    "last_attempt": "2025-05-21T02:51:21.890Z",
    "completed_code": null,
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 510,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T03:08:49.120Z",
    "first_attempt": "2025-05-21T03:08:49.119Z",
    "last_attempt": "2025-05-21T03:08:49.120Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\nconst makeGreeting = (name) => `Hello, ${name}!`;  \\n\\n\\n// Invoke the function and assign the return value to a variable\\nconst helloJohn = makeGreeting(\"John\");\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(helloJohn);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 511,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-21T03:28:14.374Z",
    "first_attempt": "2025-05-21T03:27:48.031Z",
    "last_attempt": "2025-05-21T03:28:14.374Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => quantity * price;\\n\\n// Create calculateTotal here\\nconst calculateTotal = (subtotal) => subtotal * 1.08;\\n\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(3, 4.99);\\n\\n// 2. Calculate the final total with tax\\nconst finalTotal = calculateTotal(subtotal);\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $ ${subtotal}`)\\nconsole.log(`Total with tax: $${finalTotal.toFixed(2)}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 512,
  "fields": {
    "learner_github_id": "209533182",
    "learner_name": "Patrick McIsaac",
    "title": "Undefined",
    "slug": "functions-review",
    "attempts": 16,
    "complete": true,
    "completed_on": "2025-05-21T16:56:19.764Z",
    "first_attempt": "2025-04-29T22:28:40.578Z",
    "last_attempt": "2025-05-21T16:56:19.764Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  if(time === \\'morning\\' || name.startsWith(\\'A\\')){\\n    return `Good morning, ${name}!`\\n    // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  }else if(time ===\\'afternoon\\'){\\n    return `Good afternoon, ${name}!`\\n  }else {\\n    return `Hello, ${name}!`\\n  }\\n  // Otherwise, return \"Hello, [name]!\"\\n}\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  // If topic is \"weather\", return the weather joke\\n  if(topic === \\'weather\\'){\\n    return \"What do you call a stormy robot? A thunder-bot!\"\\n  }else if(topic === \\'animals\\'){// If topic is \"animals\", return the animals joke\\n    return \"Why did the robot go to the zoo? To study creature features!\"\\n    }else {\\n        return \"Why was the robot tired? Because it had too many bytes!\"\\n    }// Otherwise, return the default joke\\n\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n  const greetings = []\\n  // Loop through each person in the people array\\n  for (const person of people){\\n    const greet = createGreeting(person, time)\\n    greetings.push(greet)\\n  }\\n  return greetings\\n  // Create a greeting for each person\\n\\n  // Add the greeting to the array\\n\\n  // Return the array of greetings\\n\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n  const greet = createGreeting(name, time)\\n  // Get the joke\\n  const joke = tellJoke(topic)\\n  // Return both together\\n  return `${greet} ${joke}`\\n\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 513,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T16:36:58.748Z",
    "first_attempt": "2025-05-21T16:36:58.746Z",
    "last_attempt": "2025-05-21T16:36:58.748Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\n\\n  const calculateGameScore = (basePoints, bonusMultiplier) => {\\n\\n    if (basePoints * bonusMultiplier >= 1000) {\\n      return \"High Score!\"\\n    }\\n\\n    else {\\n      return \"Keep trying!\"\\n    }\\n\\n  }; \\n\\n\\n  // Call your function with different values and store a result in a variable\\nconst score1 = calculateGameScore(400, 4); \\nconst score2 = calculateGameScore(200, 3);\\n\\n  // Log the result to see the output\\n\\nconsole.log(score1);\\nconsole.log(score2);\\n\\n  '}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 514,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T16:45:10.398Z",
    "first_attempt": "2025-05-21T16:45:10.396Z",
    "last_attempt": "2025-05-21T16:45:10.398Z",
    "completed_code": "{'code': '// This code has scope problems!\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\nlet score = 0\\ndisplayScore()\\nupdateScore()\\ndisplayScore()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 515,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-21T16:45:11.930Z",
    "last_attempt": "2025-05-21T16:45:26.583Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 516,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-21T16:51:09.231Z",
    "last_attempt": "2025-05-21T16:51:30.273Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 517,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-21T16:52:50.981Z",
    "first_attempt": "2025-05-21T16:52:05.621Z",
    "last_attempt": "2025-05-21T16:52:50.981Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  if(time === \\'morning\\' || name.startsWith(\\'A\\')){\\n    return `Good morning, ${name}!`\\n    // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  }else if(time ===\\'afternoon\\'){\\n    return `Good afternoon, ${name}!`\\n  }else {\\n    return `Hello, ${name}!`\\n  }\\n  // Otherwise, return \"Hello, [name]!\"\\n}\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  // If topic is \"weather\", return the weather joke\\n  if(topic === \\'weather\\'){\\n    return \"What do you call a stormy robot? A thunder-bot!\"\\n  }else if(topic === \\'animals\\'){// If topic is \"animals\", return the animals joke\\n    return \"Why did the robot go to the zoo? To study creature features!\"\\n    }else {\\n        return \"Why was the robot tired? Because it had too many bytes!\"\\n    }// Otherwise, return the default joke\\n}\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n  const greetings = []\\n  // Loop through each person in the people array\\n  for (const person of people){\\n    const greet = createGreeting(person, time)\\n    greetings.push(greet)\\n  }\\n  return greetings\\n  // Create a greeting for each person\\n  // Add the greeting to the array\\n  // Return the array of greetings\\n}\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n  const greet = createGreeting(name, time)\\n  // Get the joke\\n  const joke = tellJoke(topic)\\n  // Return both together\\n  return `${greet} ${joke}`\\n}\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 518,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-21T16:58:01.795Z",
    "first_attempt": "2025-05-21T16:57:00.899Z",
    "last_attempt": "2025-05-21T16:58:01.795Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\nconst checkHighScore = (playerName, score) => {\\n  if (score > highScore) {\\n    highScore = score; \\n    return `Congratulations, ${playerName}, you\\'ve set a new high score of ${score}!`\\n  }\\n\\n  else {\\n    return `Nice try, ${playerName}, but you\\'re still shy of the high score of ${highScore}.`\\n  }\\n};\\n\\n\\nconsole.log(checkHighScore(\"John\", 70))\\nconsole.log(checkHighScore (\"Alice\", 50));\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 519,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 3,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-21T17:11:36.428Z",
    "last_attempt": "2025-05-21T17:18:52.984Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 520,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T17:27:50.213Z",
    "first_attempt": "2025-05-21T17:27:50.211Z",
    "last_attempt": "2025-05-21T17:27:50.213Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n  // 1. Create a variable to store the total, starting at 0\\n  let total = 0;\\n  // 2. Loop through all prices in the array and add each to total\\n  for (const price of prices) {\\n   total += price\\n  }; \\n  // 3. Check if total is over $100, and if so apply a 10% discount\\n  if (total > 100) {\\n    total = total - (total * .1)\\n  };\\n  // 4. Return the final total\\n  return total\\n};\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\n\\nconst totalUnderHundred = calculateCartTotal([5, 15, 32, 12, 17]);\\nconsole.log(totalUnderHundred);\\n\\nconst totalOverHundred = calculateCartTotal([34, 44, 75]);\\nconsole.log(totalOverHundred);\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 521,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T17:49:49.743Z",
    "first_attempt": "2025-05-21T17:49:49.740Z",
    "last_attempt": "2025-05-21T17:49:49.743Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n  return time * 100 + targets * 50\\n};\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n  if (targets > 10) {\\n  return 1000\\n  }\\n\\n  else {\\n    return 0\\n  }\\n};\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n  const basePoints = calculateBasePoints(time, targets);\\n  const bonusPoints = calculateBonus(targets);\\n    // Add the results together and return the sum\\n  return basePoints + bonusPoints\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\n\\nfinalScoreTest = calculateFinalScore(2, 5);\\nconsole.log(finalScoreTest)\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 522,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T19:46:36.018Z",
    "first_attempt": "2025-06-03T19:46:36.018Z",
    "last_attempt": "2025-06-03T19:46:36.018Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(playerName, points) {\\n    console.log(playerName + \" scored \" + points + \" points!\")\\n}\\n\\n\\n// Then invoke the function with different player names and scores\\ndisplayGameScore(\"William\", 100)\\ndisplayGameScore(\"Elizabeth\", 50)\\ndisplayGameScore(\"Jamal\", 75)\\n\\n// Then invoke the function with different player names and scores\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 523,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T19:54:13.052Z",
    "first_attempt": "2025-06-03T19:54:13.050Z",
    "last_attempt": "2025-06-03T19:54:13.052Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\n\\nconst add = (x, y) => {\\n    return x + y\\n}\\n\\nconst greet = (name) => {\\n    return \"Hello, \" + name + \"!\"\\n}\\n\\nconst getRandomNumber = () => {\\n    return Math.random()\\n}\\n\\n// After converting, test your functions by invoking them here\\nconst random = 2\\nconst greeting = `Joeseph`\\nconst sum = (2, 5)\\n\\nconsole.log(random, greeting, sum)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 524,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T19:41:32.123Z",
    "first_attempt": "2025-05-21T19:41:32.120Z",
    "last_attempt": "2025-05-21T19:41:32.123Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\n\\nconst greetMorning = (name) => {\\n  return `Good morning, ${name}!`\\n}; \\n\\nconst greetAfternoon = (name) => {\\n  return `Good afternoon, ${name}!`\\n}; \\n\\nconst greet = (name) => {\\n  return `Hello, ${name}!`\\n}; \\n\\n\\nconst createGreeting = (name, time) => {\\n  if (time === \"morning\" || name.startsWith(\"A\")) {\\n    return greetMorning(name)\\n  }\\n\\n  else if (time === \"afternoon\") {\\n    return greetAfternoon(name)\\n  }\\n\\n  else {\\n    return greet(name)\\n  }\\n};\\n\\n// const greetClintMorning = createGreeting(\"Clint\", \"morning\"); \\n// const greetClintAfternoon = createGreeting(\"Clint\", \"afternoon\");\\n// const greetClint = createGreeting(\"Clint\", \"evening\");\\n\\n// console.log(greetClintMorning); \\n// console.log(greetClintAfternoon); \\n// console.log(greetClint);\\n\\nconst weatherJoke = () => { \\n  return \"What do you call a stormy robot? A thunder-bot!\"\\n};\\n\\nconst animalJoke = () => {\\n  return \"Why did the robot go to the zoo? To study creature features!\"\\n}; \\n\\nconst defaultJoke = () => {\\n  return \"Why was the robot tired? Because it had too many bytes!\"\\n}; \\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n\\n  if (topic === \"weather\") {\\n    return weatherJoke()\\n  }\\n\\n  else if (topic === \"animals\") {\\n    return animalJoke()\\n  }\\n\\n  else {\\n    return defaultJoke()\\n  }\\n};\\n\\n// const tellJokeWeather = tellJoke(\"weather\"); \\n// const tellJokeWAnimals = tellJoke(\"animals\"); \\n// const tellJokeDefault = tellJoke(\"blah\"); \\n\\n// console.log(tellJokeWeather); \\n// console.log(tellJokeWAnimals); \\n// console.log(tellJokeDefault);\\n\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n let greetings = [];\\n  // Loop through each person in the people array\\n for (const person of people) {\\n  const greeting = createGreeting(person, time); \\n  greetings.push(greeting)\\n };\\n\\nreturn greetings\\n}\\n\\n// const greet3 = greetPeople([\"clint\", \"john\", \"alex\"], \"morning\");\\n// console.log(greet3);\\n\\n// const greet4 = greetPeople([\"clint\", \"john\", \"mary\", \"alex\"], \"afternoon\");\\n// console.log(greet4);\\n\\n\\n\\n// 4. Create a robot interaction function\\n\\nconst robotInteraction = (name, time, topic) => {\\n  let message = [];\\n  // Get the greeting\\n  const greeting = createGreeting(name, time);\\n  message.push(greeting);\\n  // Get the joke\\n  const joke = tellJoke(topic);\\n  message.push(joke);\\n  // Return both together\\n  return message.join(\" \");\\n}\\n\\n// const robotInteractionClint = robotInteraction(\"Clint\", \"afternoon\", \"weather\");\\n// console.log(robotInteractionClint);\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 525,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T21:13:59.758Z",
    "first_attempt": "2025-05-21T21:13:59.757Z",
    "last_attempt": "2025-05-21T21:13:59.758Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 526,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T21:18:21.910Z",
    "first_attempt": "2025-05-21T21:18:21.909Z",
    "last_attempt": "2025-05-21T21:18:21.910Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 527,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T21:19:33.004Z",
    "first_attempt": "2025-05-21T21:19:33.003Z",
    "last_attempt": "2025-05-21T21:19:33.004Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \"Large Tank\"'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 528,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-05-21T21:26:42.686Z",
    "first_attempt": "2025-05-21T21:21:06.270Z",
    "last_attempt": "2025-05-21T21:26:42.686Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 529,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T21:32:22.649Z",
    "first_attempt": "2025-05-21T21:32:22.648Z",
    "last_attempt": "2025-05-21T21:32:22.649Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet() {\\n  console.log(\"Good Dog\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 530,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-21T21:34:14.505Z",
    "first_attempt": "2025-05-21T21:34:14.504Z",
    "last_attempt": "2025-05-21T21:34:14.505Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n  console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\n\\ncelebrateScore()\\ncelebrateScore()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 531,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-21T21:37:50.420Z",
    "first_attempt": null,
    "last_attempt": "2025-05-21T21:37:50.420Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 532,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-21T21:37:52.984Z",
    "first_attempt": null,
    "last_attempt": "2025-05-21T21:37:52.984Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 533,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-21T21:56:17.006Z",
    "first_attempt": null,
    "last_attempt": "2025-05-21T21:56:17.006Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 534,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-21T22:09:15.549Z",
    "first_attempt": "2025-05-21T22:08:38.200Z",
    "last_attempt": "2025-05-21T22:09:15.549Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isOverOneHundred(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayWelcome(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculatePriceWithDiscount(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 535,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-21T22:14:54.330Z",
    "first_attempt": "2025-05-21T22:12:58.599Z",
    "last_attempt": "2025-05-21T22:14:54.330Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\ndescribeActivity(\"biking\")'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 536,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-23T21:53:06.678Z",
    "first_attempt": "2025-05-21T22:23:44.063Z",
    "last_attempt": "2025-05-23T21:53:06.678Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\ncalculateTotal(50/1.1)\\ncalculateTotal(99.99/1.1)\\ncalculateTotal(25.50/1.1)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 537,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-23T21:53:20.865Z",
    "first_attempt": "2025-05-21T22:32:29.025Z",
    "last_attempt": "2025-05-23T21:53:20.865Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/function displayGameScore(playerName, pointsScored){\\n  console.log(`${playerName} scored ${pointsScored} points!`)\\n}\\n\\n\\n// Then invoke the function with different player names and scores\\ndisplayGameScore(\"Mario\", 100)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 538,
  "fields": {
    "learner_github_id": "202809763",
    "learner_name": "Dylan Johnson",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-21T23:09:08.745Z",
    "last_attempt": "2025-05-21T23:09:08.745Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 539,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T06:03:33.287Z",
    "first_attempt": "2025-05-22T06:03:33.286Z",
    "last_attempt": "2025-05-22T06:03:33.287Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const month of monthlyExpenses) {\\n   totalExpense += month\\n  // Add the current monthly cost to the value of totalExpense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 540,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T06:10:31.521Z",
    "first_attempt": "2025-05-22T06:10:31.520Z",
    "last_attempt": "2025-05-22T06:10:31.521Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 25, 44, 36, 10, 43, 60, 23  ]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\n   totalMiles += miles\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\nconsole.log(`\\nI average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.\\n`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 541,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 6,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-22T10:57:48.789Z",
    "last_attempt": "2025-05-22T11:02:21.952Z",
    "completed_code": null,
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 542,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T16:10:40.770Z",
    "first_attempt": "2025-05-22T16:10:40.767Z",
    "last_attempt": "2025-05-22T16:10:40.770Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours) {\\n  if (hour < 7) {\\n    grumpyHours.push(hour)\\n  }\\n  else {\\n    happyHours.push(hour)\\n  }\\n}\\n\\nconsole.log(`\\nI was grumpy on ${grumpyHours} days.\\nI was happy on ${happyHours} days.`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 543,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T16:56:13.128Z",
    "first_attempt": "2025-05-22T16:56:13.127Z",
    "last_attempt": "2025-05-22T16:56:13.128Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n   if (coffee.includes(\"light\")) {\\n      light++\\n   }\\n   else if (coffee.includes(\"medium\")) {\\n      medium++\\n   }\\n   else if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")) {\\n      toastyDark++\\n   }\\n  // Add your logic here\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `\\nI need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 544,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-22T17:33:25.384Z",
    "first_attempt": "2025-05-22T17:33:25.383Z",
    "last_attempt": "2025-05-22T17:33:25.384Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 545,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 344,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-22T23:56:30.989Z",
    "last_attempt": "2025-05-23T00:06:37.981Z",
    "completed_code": null,
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 546,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Introduction to HTML",
    "slug": "html-elements",
    "attempts": 301,
    "complete": true,
    "completed_on": "2025-05-23T00:48:37.742Z",
    "first_attempt": "2025-05-23T00:06:46.875Z",
    "last_attempt": "2025-05-23T00:48:37.742Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n\\n  <main>\\n    <article>\\n      <h1>Clant Prichard</h1>\\n\\n      <section>\\n        <p>My career is badass af.</p>\\n      </section>\\n\\n      <section>\\n        <p>I want to be a software developer because it\\'s badass af.</p>\\n      </section>\\n\\n    </article>\\n  </main>\\n  <!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n  <footer>\\n    <p>Clinton Parker, 2025, clint.parker9@gmail.com<p/>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 547,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 126,
    "complete": true,
    "completed_on": "2025-05-23T01:39:10.090Z",
    "first_attempt": "2025-05-23T00:48:40.617Z",
    "last_attempt": "2025-05-23T01:39:10.090Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: lightblue;\\n}\\n\\narticle {\\n  border: 1px solid black;\\n  padding: 1rem;\\n}\\n\\np {\\n  color: purple;\\n}\\n\\nimg {\\n  height: 10rem;\\n}\\n\\n/* Add your CSS styles here */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 548,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "CSS Basics",
    "slug": "css-selectors",
    "attempts": 278,
    "complete": true,
    "completed_on": "2025-05-23T02:03:08.298Z",
    "first_attempt": "2025-05-23T01:39:18.044Z",
    "last_attempt": "2025-05-23T02:03:08.298Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n  background-color: purple;\\n}\\n\\nh1 {\\n  color: white;\\n}\\n\\nfooter {\\n  background-color: green;\\n  margin: 1em; \\n  text-align: center;\\n}\\n\\n#basics {\\n  background-color: green;\\n}\\n\\n.form-group {\\n  background-color: green;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 549,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "CSS Selectors",
    "slug": "flexbox-intro",
    "attempts": 322,
    "complete": true,
    "completed_on": "2025-05-23T21:23:11.196Z",
    "first_attempt": "2025-05-23T02:03:11.241Z",
    "last_attempt": "2025-05-23T21:34:46.492Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links {\\n  list-style: none;\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-evenly;\\n  background-color: orange;\\n  padding: 10px;\\n  color: black;\\n  border: 2px solid black;\\n}\\n\\n/* Make the navbar a flex container and style it */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 550,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-container",
    "attempts": 103,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-23T21:23:15.759Z",
    "last_attempt": "2025-05-23T21:40:35.948Z",
    "completed_code": null,
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 551,
  "fields": {
    "learner_github_id": "190650404",
    "learner_name": "Clinton Parker",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 357,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-23T21:29:45.818Z",
    "last_attempt": "2025-05-23T21:40:23.041Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 552,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-23T22:05:59.376Z",
    "first_attempt": "2025-05-23T22:00:31.082Z",
    "last_attempt": "2025-05-23T22:05:59.376Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\n const makeGreeting = (name) => `Hello, ${name}!`\\n\\n\\n// Invoke the function and assign the return value to a variable\\nconst greeting = makeGreeting(\"Chris\")\\n\\n// Console log the variable you used above to see the greeting\\n\\nconsole.log(greeting)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 553,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 12,
    "complete": true,
    "completed_on": "2025-05-24T02:27:02.862Z",
    "first_attempt": "2025-05-24T02:09:54.960Z",
    "last_attempt": "2025-05-24T02:27:02.862Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => {\\n   return quantity * price\\n} \\n\\n// Create calculateTotal here\\nconst calculateTotal = (subtotal) => {\\n   return subtotal * 1.08\\n}\\n\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(3, 4.99)\\nconsole.log(\"Subtotal: $\" + subtotal.toFixed(2))\\n\\n// 2. Calculate the final total with tax\\nconst finalTotal = calculateTotal(subtotal)\\nconsole.log(\"Total with tax: $\" + finalTotal.toFixed(2))\\n// 3. Use console.log to display both results\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 554,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-05-24T02:55:33.134Z",
    "first_attempt": "2025-05-24T02:45:00.145Z",
    "last_attempt": "2025-05-24T02:55:33.134Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\nconst calculateGameScore = (basePoints, multiplier) => {\\n   const total = basePoints * multiplier\\n   if (total >= 1000) {\\n      return \"High Score!\"\\n   } else {\\n      return \"Keep trying!\"\\n   }\\n}\\n\\n  // Call your function with different values and store a result in a variable\\nconst result1 = calculateGameScore(100, 5)\\nconst result2 = calculateGameScore(900, 2)\\n\\n  // Log the result to see the output\\nconsole.log(result1)\\nconsole.log(result2)\\n  '}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 555,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-24T13:32:24.341Z",
    "first_attempt": "2025-05-24T13:30:11.778Z",
    "last_attempt": "2025-05-24T13:32:24.341Z",
    "completed_code": "{'code': '// This code has scope problems!\\nlet score = 0\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 556,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-24T17:28:06.662Z",
    "first_attempt": "2025-05-24T17:27:30.810Z",
    "last_attempt": "2025-05-24T17:28:06.662Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n  name: \"Jeremy Landy\",\\n  location: \"Phoenix, AR\",\\n  gender: \"male\",\\n  age: 31\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 557,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-24T17:41:20.708Z",
    "first_attempt": "2025-05-24T17:29:39.986Z",
    "last_attempt": "2025-05-24T17:41:20.708Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 80\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\nconst checkHighScore = (playerName, score) => {\\n   if (score > highScore) {\\n      highScore = score\\n      return`${playerName} has the new high score with ${score} points! `\\n   }\\n   else {\\n      return `${playerName} scored ${score} points. The high score is still ${highScore}.`\\n   }\\n}\\n   \\n\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\nconsole.log(checkHighScore(\"Alice\", 50))\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 558,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-24T17:35:33.531Z",
    "first_attempt": null,
    "last_attempt": "2025-05-24T17:35:33.531Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 559,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-24T17:56:15.521Z",
    "first_attempt": "2025-05-24T17:49:10.286Z",
    "last_attempt": "2025-05-24T17:56:15.521Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nlet februaryBill = 150\\nlet marchBill = 250\\nlet aprilBill = 300\\nlet mayBill = 290\\nlet juneBill = 230\\nlet julyBill = 250\\nlet augustBill = 220\\nlet septemberBill = 200\\nlet octoberBill = 190\\nlet novemberBill = 150\\nlet decemberBill = 130\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 560,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-05-24T18:01:46.429Z",
    "first_attempt": "2025-05-24T17:51:21.267Z",
    "last_attempt": "2025-05-24T18:01:46.429Z",
    "completed_code": "{'code': \"\\nconst calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\n      let basePrice = 10\\n      if (isWeekend){\\n      basePrice += 2\\n      }\\n\\n      if (age < 12 || age >= 65) {\\n      basePrice = basePrice * .5\\n      }\\n      return basePrice\\n}\\n\\nconst person = calculateTicketPrice(10, true)\\nconsole.log(person)\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n     \\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n\\n      // 4. Return the final ticket price\\n  \\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n\\n  // Example:\\n  // const adultWeekdayPrice = calculateTicketPrice(25, false);\\n\"}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 561,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T18:01:32.980Z",
    "first_attempt": "2025-05-24T18:01:32.979Z",
    "last_attempt": "2025-05-24T18:01:32.980Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Macbook\"\\nconst phone = \"iPhone\"\\nconst television = \"LG\"\\nconst refrigerator = \"LG\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television} television, my ${computer} computer, my ${refrigerator} refrigerator, and my ${phone} phone`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 562,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-24T18:06:08.125Z",
    "first_attempt": "2025-05-24T18:05:46.877Z",
    "last_attempt": "2025-05-24T18:06:08.125Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = myIncome + spouseIncome - internetBill - waterBill - electricBill - fuelExpenses - foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 563,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T18:13:34.512Z",
    "first_attempt": "2025-05-24T18:13:34.512Z",
    "last_attempt": "2025-05-24T18:13:34.512Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst monthlyIncome = myIncome + spouseIncome\\nconst monthlyExpenses = phoneBill + mortgage + carInsurance + healthInsurance\\nconst netIncome = monthlyIncome - monthlyExpenses\\n\\nconst statement = `Our combined monthly income is ${monthlyIncome}.\\nOur total monthly expenses are ${monthlyExpenses}.\\nOur net monthly income is ${netIncome}.`;  // Use backticks and calculations here\\n\\nconsole.log(statement)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 564,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-24T18:25:57.095Z",
    "first_attempt": "2025-05-24T18:25:19.399Z",
    "last_attempt": "2025-05-24T18:25:57.095Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"X\")\\nconst fileStart = filename.slice(0,4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 565,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T20:25:01.915Z",
    "first_attempt": "2025-05-24T20:25:01.914Z",
    "last_attempt": "2025-05-24T20:25:01.915Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse{\\n    console.log(\"I watched my favorite shows on Netflix all day.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 566,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-24T20:40:23.784Z",
    "first_attempt": "2025-05-24T20:27:24.444Z",
    "last_attempt": "2025-05-24T20:40:23.784Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"t-shirt \"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals \"\\n}\\nelse if (temperature < 95 && temperature >= 75){\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n}\\nelse if (temperature < 75 && temperature >= 50){\\n    torsoClothing = \"weater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\nelse if (temperature < 50 && temperature >= 35){\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\nelse{\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\"  \\n}\\nconsole.log(torsoClothing)\\nconsole.log(legClothing)\\nconsole.log(footWear)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 567,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-24T20:56:47.682Z",
    "first_attempt": "2025-05-24T20:55:39.341Z",
    "last_attempt": "2025-05-24T20:56:47.682Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif(totalPhotos > 110){\\n    photoStorage = \"Photo Album\"\\n}\\nelse if(totalPhotos < 110 && totalPhotos >= 50){\\n    photoStorage = \"Shoe Box\"\\n}\\nelse{\\n    photoStorage = \"Envelope\"\\n}\\n// Determine album color based on gender comparison\\nif(femalePhotos > malePhotos){\\n    albumColor = \"plum\"\\n}\\nelse{\\n    albumColor = \"gray\"\\n}\\n// Create the expected output string using string interpolation\\nconst output = `\\nThere are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 568,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-24T20:58:57.737Z",
    "first_attempt": "2025-05-24T20:57:43.618Z",
    "last_attempt": "2025-05-24T20:58:57.737Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [ yellowFruit , orangeFruit , redFruit , greenFruit , blueFruit ]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 569,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T21:01:13.065Z",
    "first_attempt": "2025-05-24T21:01:13.065Z",
    "last_attempt": "2025-05-24T21:01:13.065Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 570,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T21:04:16.329Z",
    "first_attempt": "2025-05-24T21:04:16.328Z",
    "last_attempt": "2025-05-24T21:04:16.329Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\" , \"Loops\" , \"Arrays\" , \"Functions\" , \"Objects\" , \"Modules\" , \"Events\" ]\\n\\nfor (const name of topics) {\\n    console.log(name)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 571,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T21:09:47.119Z",
    "first_attempt": "2025-05-24T21:09:47.119Z",
    "last_attempt": "2025-05-24T21:09:47.119Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunk of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 572,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-24T21:24:41.945Z",
    "first_attempt": "2025-05-24T21:22:49.159Z",
    "last_attempt": "2025-05-24T21:24:41.945Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n    if (ingredient === \"egg\"){\\n        finishedFood.push(\"biscuit\")\\n    }\\n    else if (ingredient === \"beef patty\"){\\n        finishedFood.push(\"burger\")\\n    }\\n    else if (ingredient === \"potato\"){\\n        finishedFood.push(\"fries\")\\n    }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 573,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T21:28:35.033Z",
    "first_attempt": "2025-05-24T21:28:35.032Z",
    "last_attempt": "2025-05-24T21:28:35.033Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const Expense of monthlyExpenses) {\\n    totalExpense += Expense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 574,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T21:35:29.168Z",
    "first_attempt": "2025-05-24T21:35:29.167Z",
    "last_attempt": "2025-05-24T21:35:29.168Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 5 , 10 , 7 , 3 , 2 ]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\n    totalMiles += miles\\n}\\n\\n// Declare a new variable to store the average miles over time\\naverageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 575,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-24T21:42:14.308Z",
    "first_attempt": "2025-05-24T21:40:59.252Z",
    "last_attempt": "2025-05-24T21:42:14.308Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours){\\n    if (hour < 7){\\n    grumpyHours.push(hour)\\n    }\\n    else {\\n        happyHours.push(hour)\\n    }\\n}\\n\\nconsole.log(`\\nI was grumpy on ${grumpyHours.length} days.\\nI was happy on ${happyHours.length} days.\\n`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 576,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T22:40:45.426Z",
    "first_attempt": "2025-05-24T22:40:45.426Z",
    "last_attempt": "2025-05-24T22:40:45.426Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")){\\n    light++\\n  }\\n    else if (coffee.includes(\"medium\")){\\n    medium++\\n  }\\n    else if (coffee.includes(\"dark\") || coffee.includes(\"toasty\")){\\n    toastyDark++\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 577,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-24T22:49:11.547Z",
    "first_attempt": "2025-05-24T22:49:11.546Z",
    "last_attempt": "2025-05-24T22:49:11.547Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 578,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-25T00:27:01.791Z",
    "first_attempt": "2025-05-25T00:26:45.870Z",
    "last_attempt": "2025-05-25T00:27:01.791Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n    name: \"Jeremy Landy\",\\n    location: \"Phoenix, AR\",\\n    gender: \"male\",\\n    age: 31,\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 579,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-25T00:30:23.842Z",
    "first_attempt": "2025-05-25T00:30:03.828Z",
    "last_attempt": "2025-05-25T00:30:23.842Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n    color: \"purple\",\\n    stemLength: 5,\\n    growingSeason: \"Summer\",\\n    thorny: false\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n    color: \"red\",\\n    stemLength: 3,\\n    growingSeason: \"spring\",\\n    thorny: true\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 580,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-25T00:37:24.628Z",
    "first_attempt": "2025-05-25T00:37:24.628Z",
    "last_attempt": "2025-05-25T00:37:24.628Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\n\\nfor (const patient of appointments){\\n    schedule += `Patient ${patient.firstName} ${patient.lastName} has an appointment at ${patient.appointmentTime}\\\\n`\\n}\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 581,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-25T01:14:36.963Z",
    "first_attempt": "2025-05-25T01:14:36.953Z",
    "last_attempt": "2025-05-25T01:14:36.964Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n];\\n\\n// Arrays for categories and the words to look for\\nconst clothing = [];\\nconst entertainment = [];\\nconst food = [];\\nconst fuel = [];\\nconst travel = [];\\nconst utilities = [];\\nconst largePurchases = [];\\n\\n// Totals and averages\\nlet totalExpenses = 0;\\nlet averageExpense = 0;\\n\\n// Iterate through each expense string\\nfor (const expenseString of monthlyExpenses) { \\n    const parts = expenseString.split(\\':\\'); \\n    const vendor = parts[0];\\n    const amountString = parts[1];\\n\\n    const amount = parseFloat(amountString);\\n\\n    // Categorize expenses\\n    if (amount > 100.00) {\\n        largePurchases.push(amount);\\n    }\\n\\n    if (vendor.includes(\"Clothing\")) {\\n        clothing.push(amount); \\n    } else if (vendor.includes(\"Movie\")) { \\n        entertainment.push(amount);\\n    } else if (vendor.includes(\"Groceries\") || vendor.includes(\"Restaurant\")) { \\n        food.push(amount); \\n    } else if (vendor.includes(\"Fuel\") || vendor.includes(\"Gas\")) { \\n        fuel.push(amount); \\n    } else if (vendor.includes(\"Lyft\") || vendor.includes(\"Uber\")) { \\n        travel.push(amount); \\n    } else if (vendor.includes(\"Utility\")) { \\n        utilities.push(amount); \\n    }\\n\\n    // Accumulate total expenses\\n    totalExpenses += amount;\\n}\\n\\n// Calculate average expenses\\naverageExpense = totalExpenses / monthlyExpenses.length; //\\n\\nconsole.log(\"Total Expenses:\", totalExpenses);\\nconsole.log(\"Average Expense:\", averageExpense);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 582,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-25T01:47:52.673Z",
    "first_attempt": "2025-05-25T01:46:56.839Z",
    "last_attempt": "2025-05-25T01:47:52.673Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n   name: \"Jeremy Landy\",\\n   location: \"Phoenix, AR\",\\n   gender: \"Male\",\\n   age: 31\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 583,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-25T02:19:28.681Z",
    "first_attempt": "2025-05-25T02:15:18.047Z",
    "last_attempt": "2025-05-25T02:19:28.681Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\ncolor: \"Yellow\",\\nstemLength: 10,\\ngrowingSeason: \"Summer\",\\nthorny: false\\n}\\n\\n// Complete the rose object\\nconst rose = {\\ncolor: \"Red\",\\nstemLength: 25,\\ngrowingSeason: \"Spring\",\\nthorny: true\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(tulip.stemLength)\\nconsole.log(tulip.growingSeason)\\nconsole.log(tulip.thorny)\\nconsole.log(rose.stemLength)\\nconsole.log(rose.color)\\nconsole.log(rose.growingSeason)\\nconsole.log(rose.thorny)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 584,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-06-02T20:39:10.302Z",
    "first_attempt": "2025-05-25T02:28:26.285Z",
    "last_attempt": "2025-06-02T20:39:10.302Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Iterate the array and create appointment strings\\nfor (const appointment of appointments) {\\n    schedule += `Patient ${appointment.firstName} ${appointment.lastName} has an appointment at ${appointment.appointmentTime}\\\\n`\\n}\\n\\nconsole.log(schedule)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 585,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-25T12:06:27.775Z",
    "first_attempt": "2025-05-25T11:57:35.516Z",
    "last_attempt": "2025-05-25T12:06:27.775Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\nlet storeTotal = 0\\n      // 2. Loop through all prices in the array and add each to total\\nfor (price of prices) {\\n   storeTotal = storeTotal + price\\n} \\n      // 3. Check if total is over $100, and if so apply a 10% discount\\nif (storeTotal > 100) {\\n   storeTotal = storeTotal * .9\\n}\\n      // 4. Return the final total\\n return storeTotal\\n  }\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\nconst prices = [2,6,13,19,41,32,54]\\nconst tripTotal = calculateCartTotal(prices)\\nconsole.log(tripTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 586,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 12,
    "complete": true,
    "completed_on": "2025-05-25T12:37:13.711Z",
    "first_attempt": "2025-05-25T12:23:49.870Z",
    "last_attempt": "2025-05-25T12:37:13.711Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n return (time * 100) + (targets * 50)\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n   if (targets > 10) {\\n      return 1000\\n   }\\n      return 0\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\nconst basePoints = calculateBasePoints(time, targets)\\nconst bonusPoints = calculateBonus(targets)\\nreturn basePoints + bonusPoints\\n    // Add the results together and return the sum\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\nconst finalScore = calculateFinalScore(2,12)\\nconsole.log(finalScore)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 587,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-25T14:46:14.589Z",
    "first_attempt": "2025-05-25T14:46:14.589Z",
    "last_attempt": "2025-05-25T14:46:14.589Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 588,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-25T14:47:28.614Z",
    "first_attempt": "2025-05-25T14:47:28.614Z",
    "last_attempt": "2025-05-25T14:47:28.614Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 589,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-25T14:48:47.086Z",
    "first_attempt": "2025-05-25T14:48:47.086Z",
    "last_attempt": "2025-05-25T14:48:47.086Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = (\"Large Tank\")'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 590,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-25T14:57:37.624Z",
    "first_attempt": "2025-05-25T14:57:37.624Z",
    "last_attempt": "2025-05-25T14:57:37.624Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = (\"Abigail Brown\")\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}` \\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 591,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-25T15:01:15.826Z",
    "first_attempt": "2025-05-25T15:01:02.099Z",
    "last_attempt": "2025-05-25T15:01:15.826Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet () {\\n    console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 592,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-25T15:03:00.716Z",
    "first_attempt": "2025-05-25T15:03:00.715Z",
    "last_attempt": "2025-05-25T15:03:00.716Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore () {\\n    console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore() \\ncelebrateScore()\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 593,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-05-25T15:10:14.219Z",
    "first_attempt": "2025-05-25T15:05:50.339Z",
    "last_attempt": "2025-05-25T15:10:14.219Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isNum100(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayWelcome(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculatePrice(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 594,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-25T15:13:56.951Z",
    "first_attempt": "2025-05-25T15:12:44.302Z",
    "last_attempt": "2025-05-25T15:13:56.951Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 595,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-25T15:19:14.478Z",
    "first_attempt": "2025-05-25T15:19:14.478Z",
    "last_attempt": "2025-05-25T15:19:14.478Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 596,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-25T15:22:46.461Z",
    "first_attempt": "2025-05-25T15:22:46.461Z",
    "last_attempt": "2025-05-25T15:22:46.461Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(name, score) {\\n    console.log(`${name} scored ${score} points!`)\\n}\\n\\n// Then invoke the function with different player names and scores\\ndisplayGameScore(\"Mario\", \"100\")\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 597,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-25T15:47:55.072Z",
    "first_attempt": "2025-05-25T15:31:31.384Z",
    "last_attempt": "2025-05-25T15:47:55.072Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\n\\nconst add = (x, y) => x + y\\n\\nconst greet = name => \"Hello, \" + name + \"!\"\\n\\nconst getRandomNumber = () => Math.random()\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber()\\nconst msg = greet(\"Bob\")\\nconst number = add(1, 2)\\n\\nconsole.log(random, msg, number)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 598,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 11,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-25T17:35:24.719Z",
    "last_attempt": "2025-05-25T18:03:48.376Z",
    "completed_code": null,
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 599,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-25T19:54:02.459Z",
    "first_attempt": "2025-05-25T19:49:24.487Z",
    "last_attempt": "2025-05-25T19:54:02.459Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\n\\nconst makeGreeting = name => {\\n    return `Hello, ${name}`\\n}\\n\\n// Invoke the function and assign the return value to a variable\\nconst greeting = makeGreeting(\"John\")\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(greeting)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 600,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-05-25T20:15:52.015Z",
    "first_attempt": "2025-05-25T20:05:54.744Z",
    "last_attempt": "2025-05-25T20:15:52.015Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => {\\n    return quantity * price\\n}\\n\\n// Create calculateTotal here\\nconst calculateTotal = (subtotal) => {\\n    return subtotal * 1.08\\n}\\n\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(3, 4.99)\\n\\n// 2. Calculate the final total with tax\\nconst finalTotal = calculateTotal(subtotal)\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $ ${subtotal}`)\\nconsole.log(`Total with tax: $${total}`)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 601,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 270,
    "complete": true,
    "completed_on": "2025-05-25T20:37:35.803Z",
    "first_attempt": "2025-05-25T20:32:30.134Z",
    "last_attempt": "2025-05-25T20:37:35.803Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n      <!-- Your content goes here -->\\n<h1>How I Became A Software Developer</h1>\\n<article>\\n  <h2>Nashville Software School</h2>\\n  <section>\\n    <p>I am excited to attend NSS!</p>\\n  </section>\\n   <section>\\n    <p>I learned the following skills</p>\\n    <ol>\\n      <li>Variables</li>\\n      <li>Arrays</li>\\n      <li>Objects</li>\\n      <li>Functions</li>\\n      <li>HTML</li>\\n      <li>CSS</li>\\n    </ol>\\n  </section>\\n</article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 602,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "HTML Elements",
    "slug": "html-elements",
    "attempts": 268,
    "complete": true,
    "completed_on": "2025-05-25T20:46:44.707Z",
    "first_attempt": "2025-05-25T20:37:39.230Z",
    "last_attempt": "2025-05-25T20:46:44.707Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n<header>\\n  <nav>\\n    <div>Home</div>\\n    <div>Projects</div>\\n    <div>Education</div>\\n  </nav>\\n</header>\\n<main>\\n  <article>\\n    <h1>Chris Jent</h1>\\n    <section>\\n      <p>Lorem ipsum dolor sit amet consectetur adipiscing elit, ultrices phasellus cras rutrum augue nullam, pellentesque metus donec ligula class ad. Torquent tincidunt blandit lacinia euismod quam erat justo nibh, volutpat ridiculus hac maecenas viverra dictumst facilisi tempus sed, vulputate venenatis potenti litora est duis dictum.</p>\\n    </section>\\n    <section>\\n      <p>Lacus montes non eu tristique tempor molestie velit metus magnis per, donec quis praesent interdum ridiculus ac sed maecenas aliquam auctor massa, vestibulum natoque dapibus hac fusce platea mattis primis dignissim. </p>\\n    </section>\\n  </article>\\n</main>\\n<footer>\\n  <p>Chris Jent - 2025 - chris.jent@gmail.com</p>\\n</footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 603,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-25T20:46:49.416Z",
    "last_attempt": "2025-05-25T20:46:49.435Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 604,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-25T20:46:49.416Z",
    "last_attempt": "2025-05-25T20:46:49.416Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 605,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "CSS Selectors",
    "slug": "css-selectors",
    "attempts": 276,
    "complete": true,
    "completed_on": "2025-05-25T21:15:44.663Z",
    "first_attempt": "2025-05-25T20:50:06.282Z",
    "last_attempt": "2025-05-25T21:15:44.663Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\nh1, h2 {\\n  color: blue;\\n  text-transform: uppercase;\\n}\\n\\np {\\n  color: darkgray;\\n  font-size: 20px;\\n}\\n\\n.highlight {\\n  background-color: yellow;\\n  color: black;\\n}\\n\\n#basics {\\n  background-color: white;\\n  border: 1px solid black;\\n  padding: 20px\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 606,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-25T21:07:18.359Z",
    "first_attempt": "2025-05-25T21:07:18.353Z",
    "last_attempt": "2025-05-25T21:07:18.359Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 607,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-25T21:14:15.365Z",
    "first_attempt": "2025-05-25T21:14:15.358Z",
    "last_attempt": "2025-05-25T21:14:15.365Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 608,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-25T21:15:52.751Z",
    "last_attempt": "2025-05-25T21:15:52.772Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 609,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-25T21:15:52.751Z",
    "last_attempt": "2025-05-25T21:15:52.763Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 610,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-25T21:27:07.886Z",
    "first_attempt": "2025-05-25T21:21:50.681Z",
    "last_attempt": "2025-05-25T21:27:07.886Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n// Adding new property\\ngoldfish.location = \"Large Tank\"\\nconsole.log(goldfish.location)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 611,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-25T22:04:57.146Z",
    "first_attempt": "2025-05-25T21:43:23.575Z",
    "last_attempt": "2025-05-25T22:04:57.146Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 612,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-container",
    "attempts": 122,
    "complete": true,
    "completed_on": "2025-05-25T22:38:01.140Z",
    "first_attempt": "2025-05-25T21:45:19.639Z",
    "last_attempt": "2025-05-25T22:38:01.140Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Base styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n/* Card styles */\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.card h3 {\\n  margin-top: 0;\\n  color: #2c3e50;\\n}\\n\\n/* Flexbox container properties */\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  align-items: flex-start;\\n  gap: 20px;\\n  padding: 10px;\\n}\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 613,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Flexbox Item Properties",
    "slug": "flexbox-items",
    "attempts": 311,
    "complete": true,
    "completed_on": "2025-05-25T22:49:41.918Z",
    "first_attempt": "2025-05-25T22:38:11.416Z",
    "last_attempt": "2025-05-26T12:35:07.843Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n/* Add your flexbox properties below */\\nnav {\\n  display: flex;\\n  <!-- justify-content: space-evenly; -->\\n  flex: 1 1 auto;\\n}\\nul {\\n  display: flex;\\n  justify-content: space-evenly;\\n}\\n\\n.content {\\n  display: flex;\\n  flex: 1 1 auto;\\n  justify-content: space-evenly;\\n  flex-wrap: wrap;\\n}\\n.sidebar {\\n  display: flex;\\n  flex: 1 1 auto;\\n  justify-content: space-evenly;\\n  flex-wrap: wrap;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 614,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Flexbox Item Properties",
    "slug": "leonids-data-types",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-05-26T12:40:33.802Z",
    "first_attempt": "2025-05-25T22:49:53.808Z",
    "last_attempt": "2025-05-26T12:40:33.802Z",
    "completed_code": "{'code': 'function createToy(name, category, ageRecommendation, isBatteryOperated, features, dimensions) {\\n    return {\\n        name,\\n        category,\\n        ageRecommendation,\\n        isBatteryOperated,\\n        features,\\n        dimensions\\n    };\\n}\\n\\n// TODO: Call createToy with the correct data types\\nconst myToy = createToy(\"Chris Jent\", \"Action Figure\", 10, false, [\"small, red, cool\"], {height: 5, width: 7});\\nconsole.log(myToy)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 615,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-25T22:58:53.223Z",
    "first_attempt": null,
    "last_attempt": "2025-05-25T22:58:53.223Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 616,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Undefined",
    "slug": "variables-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-05T17:12:41.535Z",
    "first_attempt": "2025-05-25T23:14:37.232Z",
    "last_attempt": "2025-07-05T17:12:41.535Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nlet februaryBill = 160;\\nlet marchBill = 140;\\nlet aprilBill = 120;\\nlet mayBill = 130;\\nlet juneBill = 140;\\nlet julyBill = 145;\\nlet augustBill = 150;\\nlet septemberBill = 130;\\nlet octoberBill = 120;\\nlet novemberBill = 135;\\nlet decemberBill = 140;\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = (januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill)\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 617,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Undefined",
    "slug": "string-interpolation",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-05T17:16:12.459Z",
    "first_attempt": "2025-05-25T23:27:30.043Z",
    "last_attempt": "2025-07-05T17:16:12.459Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"MacBook\"\\nconst phone = \"iPhone\"\\nconst television = \"BigOleBoy\"\\nconst refrigerator = \"ColdUns\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television} television, my ${computer} computer, my ${refrigerator} refrigerator, and my ${phone} phone`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 618,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Undefined",
    "slug": "math-operations",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-07-05T17:21:54.223Z",
    "first_attempt": "2025-05-25T23:38:32.546Z",
    "last_attempt": "2025-07-05T17:21:54.223Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = (myIncome + spouseIncome)\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = (combinedIncome - internetBill - waterBill - electricBill - foodExpenses - fuelExpenses)\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 619,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-25T23:50:29.047Z",
    "first_attempt": "2025-05-25T23:50:29.047Z",
    "last_attempt": "2025-05-25T23:50:29.047Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\nconst calculateGameScore = (basepoints, multiplier) => {\\n  const gameScore = basepoints * multiplier\\n  if (gameScore >= 1000) return \"High Score!\"\\n  if (gameScore < 1000) return \"Keep trying!\"\\n}\\n\\n  // Call your function with different values and store a result in a variable\\nconst win = calculateGameScore(500, 3)\\nconst lose = calculateGameScore(900, 1)\\n\\n  // Log the result to see the output\\nconsole.log(win)\\nconsole.log(lose)\\n  '}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 620,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-25T23:55:09.708Z",
    "first_attempt": "2025-05-25T23:54:21.932Z",
    "last_attempt": "2025-05-25T23:55:09.708Z",
    "completed_code": "{'code': '// This code has scope problems!\\nlet score = 0\\n\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 621,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-26T00:05:25.449Z",
    "first_attempt": "2025-05-26T00:01:31.043Z",
    "last_attempt": "2025-05-26T00:05:25.449Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\n\\nconst checkHighScore = (playerName, score) => {\\n  if (score > highScore) {\\n    highScore = score\\n    return `${playerName}\\'s new high score is ${score}`\\n  }\\n  else {\\n    return \"Try again!\"\\n  }\\n}\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\nconsole.log(checkHighScore(\"Alice\", 50))\\nconsole.log(checkHighScore(\"Alice\", 30))\\nconsole.log(checkHighScore(\"Tom\", 20))\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 622,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Undefined",
    "slug": "multiline-strings",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-07-05T17:40:38.637Z",
    "first_attempt": "2025-05-26T00:05:08.343Z",
    "last_attempt": "2025-07-05T17:40:38.637Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\nconst combinedIncome = (myIncome + spouseIncome)\\nconst combinedExpenses = (phoneBill + mortgage + carInsurance + healthInsurance)\\nconst netIncome = (combinedIncome - combinedExpenses)\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${combinedIncome}.\\nOur total monthly expenses are ${combinedExpenses}.\\nOur net monthly income is ${netIncome}.`;  // Use backticks and calculations here\\n\\nconsole.log(statement)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 623,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-26T00:21:24.410Z",
    "first_attempt": "2025-05-26T00:15:56.660Z",
    "last_attempt": "2025-05-26T00:21:24.410Z",
    "completed_code": "{'code': 'const calculateTicketPrice = (age, isWeekend) => {\\n      let ticketPrice = 10\\n\\n      if (isWeekend === true) {\\n        ticketPrice += 2\\n      }\\n\\n      if (age < 12 || age >= 65) {\\n        ticketPrice /= 2\\n    }\\n    return ticketPrice\\n}\\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n\\nadultWeekdayPrice = calculateTicketPrice(25, false);\\nadultWeekendPrice = calculateTicketPrice(25, true);\\noldFartWeekendPrice = calculateTicketPrice(70, true);\\n\\n  // Example:\\n  // const adultWeekdayPrice = calculateTicketPrice(25, false);\\n\\nconsole.log(adultWeekdayPrice)\\nconsole.log(adultWeekendPrice)\\nconsole.log(oldFartWeekendPrice)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 624,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Undefined",
    "slug": "string-methods",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-06T20:55:11.129Z",
    "first_attempt": "2025-05-26T00:19:07.290Z",
    "last_attempt": "2025-07-06T20:55:11.129Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 625,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-26T00:42:37.990Z",
    "first_attempt": "2025-05-26T00:26:57.487Z",
    "last_attempt": "2025-05-26T00:42:37.990Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\n  let cartTotal = 0\\n      // 2. Loop through all prices in the array and add each to total\\n  for (const price of prices){\\n    cartTotal += price\\n  }\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\n  if (cartTotal > 100) {\\n    return cartTotal = cartTotal * .9\\n  }\\n  else {\\n    return cartTotal\\n  }\\n}\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\n\\nconst firstCart = calculateCartTotal([20, 30, 40])\\nconsole.log(firstCart)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 626,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Undefined",
    "slug": "boolean-logic",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-07-06T20:58:30.762Z",
    "first_attempt": "2025-05-26T00:32:00.335Z",
    "last_attempt": "2025-07-06T20:58:30.762Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n} else {\\n    console.log(\"Netflix was fun today.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 627,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Undefined",
    "slug": "evaluations",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-07-07T03:08:37.218Z",
    "first_attempt": "2025-05-26T00:59:26.142Z",
    "last_attempt": "2025-07-07T03:08:37.218Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n      torsoClothing = \"t-shirt\"\\n      legClothing = \"shorts\"\\n      footWear = \"sandals\"\\n    // Add your code here\\n    } else if (temperature < 95 && temperature >= 75) {\\n      torsoClothing = \"t-shirt\"\\n      legClothing = \"shorts\"\\n      footWear = \"sneakers\"\\n    } else if (temperature < 75 && temperature >= 50) {\\n      torsoClothing = \"sweater\"\\n      legClothing = \"pants\"\\n      footWear = \"sneakers\"\\n    } else if (temperature < 50 && temperature >= 35) {\\n      torsoClothing = \"jacket\"\\n      legClothing = \"pants\"\\n      footWear = \"sneakers\"\\n    } else {\\n      torsoClothing = \"jacket\"\\n      legClothing = \"pants\"\\n      footWear = \"boots\"\\n    }\\n\\n\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 628,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-26T01:22:02.107Z",
    "first_attempt": "2025-05-26T01:22:02.105Z",
    "last_attempt": "2025-05-26T01:22:02.107Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos;\\n\\n// Determine storage type based on total\\nif (totalPhotos >= 110) {\\n   photoStorage = \"Photo Album\";\\n}\\nelse if (totalPhotos < 110 && totalPhotos >= 50) {\\n   photoStorage = \"Shoe Box\";\\n}\\nelse {\\n   photoStorage = \"Envelopes\";\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n   albumColor = \"plum\";\\n}\\nelse {\\n   albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 629,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T19:55:35.057Z",
    "first_attempt": "2025-06-03T19:55:35.057Z",
    "last_attempt": "2025-06-03T19:55:35.057Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\nconst makeGreeting = (name) => (`Hello, ${name}!`)\\n\\n// Invoke the function and assign the return value to a variable\\nconst greeting = makeGreeting(\"John\")\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(greeting)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 630,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Data Structures",
    "slug": "leonids-data-structures",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-26T19:46:27.704Z",
    "first_attempt": "2025-05-26T17:24:43.724Z",
    "last_attempt": "2025-05-26T19:46:27.704Z",
    "completed_code": "{'code': 'const inventory = [\\n  { id: 101, name: \"Hand-Carved Wooden Train\", maker: \"Leonid\" },\\n  { id: 102, name: \"Painted Rocking Horse\", maker: \"Leonid\" },\\n  { id: 103, name: \"Stuffed Bear with Bow Tie\", maker: \"Leonid\" },\\n  { id: 104, name: \"Miniature Sailboat\", maker: \"Leonid\" },\\n  { id: 105, name: \"Patchwork Doll\", maker: \"Leonid\" },\\n  { id: 106, name: \"Wooden Puzzle Box\", maker: \"Leonid\" },\\n  { id: 107, name: \"Knitted Sock Monkey\", maker: \"Leonid\" },\\n  { id: 108, name: \"Spinning Top\", maker: \"Leonid\" },\\n  { id: 109, name: \"Tiny Puppet Theater\", maker: \"Leonid\" },\\n  { id: 110, name: \"Hand-Painted Marbles\", maker: \"Leonid\" },\\n  { id: 111, name: \"Fabric Kite with Tail\", maker: \"Leonid\" },\\n  { id: 112, name: \"Wool-Stuffed Bunny\", maker: \"Leonid\" },\\n  { id: 113, name: \"Wooden Xylophone\", maker: \"Leonid\" },\\n  { id: 114, name: \"Tin Wind-Up Robot\", maker: \"Leonid\" },\\n  { id: 115, name: \"Miniature Toy Chest\", maker: \"Leonid\" }\\n];\\n\\nfunction findToyById(toys, id) {\\n  // Iterate through the toys array\\n  for (const toy of toys) {\\n    // If the current toy\\'s id matches the id we\\'re looking for, return the toy\\n    if (toy.id === id) {\\n      return toy;\\n    }\\n  }\\n  \\n  // If no toy with the matching id is found, return null\\n  return null;\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 631,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T20:02:43.783Z",
    "first_attempt": "2025-06-03T20:02:43.782Z",
    "last_attempt": "2025-06-03T20:02:43.783Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => {\\n    return quantity * price\\n}\\n\\n// Create calculateTotal here\\nconst calculateTotal = (subtotal) => {\\n    return subtotal * 1.08\\n}\\n\\n// Test your functions:\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(3, 4.99)\\nconsole.log(\"Subtotal: $\" + subtotal.toFixed(2))\\n\\n// 2. Calculate the final total with tax\\nconst finalTotal = calculateTotal(subtotal)\\nconsole.log(\"Total with tax: $\" + finalTotal.toFixed(2))\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 632,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Representing Toys as Objects",
    "slug": "leonids-objects",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-26T19:53:16.427Z",
    "first_attempt": "2025-05-26T19:51:36.447Z",
    "last_attempt": "2025-05-26T19:53:16.427Z",
    "completed_code": "{'code': 'const woodenTrain = {\\n    name: \"Wooden Train\",\\n    manufacturer: \"Matel\",\\n    priceInDollars: 20,\\n    inStock: true,\\n    recommendedAgeRange: \"4-10 yrs\",\\n    weightInGrams: null\\n}\\n\\nconst stuffedRabbit = {\\n    name: \"Stuffed Rabbit\",\\n    manufacturer: \"Matel\",\\n    priceInDollars: 15,\\n    inStock: false,\\n    recommendedAgeRange: null,\\n    weightInGrams: 20\\n}\\n\\nconst kite = {\\n    name: \"Kite\",\\n    manufacturer: null,\\n    priceInDollars: 9.99,\\n    inStock: true,\\n    recommendedAgeRange: \"10yrs and older\",\\n    weightInGrams: 22\\n}\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 633,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Toy Collection",
    "slug": "leonids-arrays",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-26T20:12:38.111Z",
    "first_attempt": "2025-05-26T20:00:05.313Z",
    "last_attempt": "2025-05-26T20:12:38.111Z",
    "completed_code": "{'code': 'const toyInventory = [\\n    {\\n    name: \"Train\",\\n    manufacturer: \"Matel\",\\n    priceInDollars: 20\\n    },\\n\\n    {\\n    name: \"Ball\",\\n    manufacturer: null,\\n    priceInDollars: 10\\n    },\\n\\n    {\\n    name: \"Kite\",\\n    manufacturer: \"Toys-R-Us\",\\n    priceInDollars: 12\\n    }\\n\\n]\\n\\nconsole.log(toyInventory)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 634,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-26T20:03:12.333Z",
    "first_attempt": "2025-05-26T20:03:12.331Z",
    "last_attempt": "2025-05-26T20:03:12.333Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  if (ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\")\\n  }\\n  else if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n  }\\n  else if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\")\\n  }\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 635,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-26T20:15:08.086Z",
    "first_attempt": "2025-05-26T20:15:08.084Z",
    "last_attempt": "2025-05-26T20:15:08.086Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const costs of monthlyExpenses) {\\n totalExpense += costs\\n  // Add the current monthly cost to the value of totalExpense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 636,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Displaying Toy Properties",
    "slug": "leonids-iteration",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-27T21:13:05.586Z",
    "first_attempt": "2025-05-26T20:24:49.628Z",
    "last_attempt": "2025-05-27T21:13:05.586Z",
    "completed_code": "{'code': 'const toyInventory = [\\n    {\\n        name: \"Wooden Train\",\\n        priceInDollars: 20\\n    },\\n    {\\n        name: \"Stuffed Rabbit\",\\n        priceInDollars: 50\\n    },\\n    {\\n        name: \"Painted Kite\",\\n        priceInDollars: 40\\n    }\\n]\\n\\nfor (const toy of toyInventory)  {\\n    console.log(toy.name)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 637,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-26T21:53:39.551Z",
    "first_attempt": null,
    "last_attempt": "2025-05-26T21:53:39.551Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 638,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-26T21:53:40.334Z",
    "first_attempt": null,
    "last_attempt": "2025-05-26T21:53:40.334Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 639,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-26T21:58:03.538Z",
    "first_attempt": null,
    "last_attempt": "2025-05-26T21:58:03.538Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 640,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-26T21:59:07.021Z",
    "first_attempt": null,
    "last_attempt": "2025-05-26T21:59:07.021Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 641,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-26T22:06:37.362Z",
    "first_attempt": "2025-05-26T22:06:00.088Z",
    "last_attempt": "2025-05-26T22:06:37.362Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    const basePoints = time * 100 + targets * 50\\n    return basePoints\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    let bonus = 0\\n    if (targets > 10) {\\n        bonus = bonus + 1000\\n    }\\n    return bonus\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n    let basePoints = calculateBasePoints(time, targets)\\n    let bonus = calculateBonus(targets)\\n    // Add the results together and return the sum\\n    const finalScore = basePoints + bonus\\n    return finalScore\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\nconst firstScore = calculateFinalScore(2, 5)\\nconsole.log(firstScore)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 642,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-26T22:52:53.311Z",
    "first_attempt": "2025-05-26T22:40:00.419Z",
    "last_attempt": "2025-05-26T22:52:53.311Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n    let greeting;\\n    if (time === \"morning\" || (typeof name === \\'string\\' && name.startsWith(`A`))){\\n        greeting = `Good morning, ${name}!`\\n    }\\n    else if (time === \"afternoon\") {\\n        greeting = `Good afternoon, ${name}!`\\n    }\\n    else {\\n        greeting = `Hello, ${name}!`\\n    }\\n    return greeting\\n}\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n    let tellJoke\\n  // If topic is \"weather\", return the weather joke\\n    if (topic === \"weather\") {\\n        tellJoke = \"What do you call a stormy robot? A thunder-bot!\"\\n    }\\n    else if (topic === \"animals\") {\\n        tellJoke = \"Why did the robot go to the zoo? To study creature features!\"\\n    }\\n  // If topic is \"animals\", return the animals joke\\n    else {\\n        tellJoke = \"Why was the robot tired? Because it had too many bytes!\"\\n    }\\n  // Otherwise, return the default joke\\n    return tellJoke\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n    const greetings = []\\n  // Loop through each person in the people array\\n    for (person of people) {\\n        let greeting = createGreeting(person, time)\\n        greetings.push(greeting)\\n    }\\n return greetings\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n   let greeting = createGreeting(name, time)\\n  // Get the joke\\n   let joke = tellJoke(topic)\\n  // Return both together\\n    return `${greeting} ${joke}`\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 643,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 226,
    "complete": true,
    "completed_on": "2025-05-26T23:06:04.539Z",
    "first_attempt": "2025-05-26T22:53:06.559Z",
    "last_attempt": "2025-05-26T23:06:04.539Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n      <!-- Your content goes here -->\\n       <h1>How I Became A Software Developer<h2>\\n      <article>\\n      <h2>Nashville Software School<h2>\\n        <section><p>Text about stuff</p></section>\\n      <section>\\n       <p>I learned the following skills</p>\\n       <ol>\\n        <li>Variables</i>\\n       <li>Arrays</i>\\n       <li>Objects</i>\\n       <li>Functions</i>\\n       <li>HTML</i>\\n       <li>CSS</i>\\n       </ol> \\n      </section>\\n      </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 644,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Introduction to HTML",
    "slug": "html-elements",
    "attempts": 425,
    "complete": true,
    "completed_on": "2025-05-26T23:13:08.023Z",
    "first_attempt": "2025-05-26T23:06:10.664Z",
    "last_attempt": "2025-05-26T23:13:08.023Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n\\n  <main>\\n    <article>\\n      <h1>Charles Merriman</h1>\\n      <section>Previous Food Industry Manager</section>\\n      <section>I want to be a software developer because why on earth would I want to work in the food industry. Also I like coding and computers, which helps.</section>\\n    </article>\\n  </main>\\n\\n  <footer>Charles Merriman, 2025, zacmerr@gmail.com</footer>\\n\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 645,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-26T23:13:09.941Z",
    "last_attempt": "2025-05-26T23:13:09.961Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 646,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-26T23:13:09.941Z",
    "last_attempt": "2025-05-26T23:13:09.941Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 647,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "CSS Basics",
    "slug": "css-selectors",
    "attempts": 205,
    "complete": true,
    "completed_on": "2025-05-26T23:28:38.285Z",
    "first_attempt": "2025-05-26T23:18:18.202Z",
    "last_attempt": "2025-05-26T23:37:52.430Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\np {\\ncolor: pink;\\n}\\n\\nheader {\\ncolor: red;\\n}\\n\\n.highlight {\\n  color: black\\n}\\n\\n#main-header {\\n  background-color: white\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 648,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "CSS Selectors",
    "slug": "flexbox-intro",
    "attempts": 162,
    "complete": true,
    "completed_on": "2025-05-26T23:42:32.516Z",
    "first_attempt": "2025-05-26T23:28:39.957Z",
    "last_attempt": "2025-05-26T23:54:16.547Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links {\\n  display: flex;\\n  flex-direction: row;\\n  background-color: #f0f0f0;\\n  padding: 10px;\\n  list-style: none;\\n  justify-content: space-evenly;\\n}\\n\\n/* Make the navbar a flex container and style it */\\n\\n.nav-bar {\\n  display: flex;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 649,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-container",
    "attempts": 147,
    "complete": true,
    "completed_on": "2025-05-26T23:51:51.506Z",
    "first_attempt": "2025-05-26T23:42:40.284Z",
    "last_attempt": "2025-05-27T00:02:01.386Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Base styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n/* Card styles */\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.card h3 {\\n  margin-top: 0;\\n  color: #2c3e50;\\n}\\n\\n/* Flexbox container properties */\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  align-items: flex-start;\\n  gap: 20px;\\n  padding: 10px;\\n}\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 650,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 186,
    "complete": true,
    "completed_on": "2025-05-27T00:02:07.030Z",
    "first_attempt": "2025-05-26T23:52:07.943Z",
    "last_attempt": "2025-05-27T00:02:07.030Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n/* Add your flexbox properties below */\\n.nav-links {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-evenly;\\n}\\n\\nmain {\\n  display: flex;\\n  \\n}\\n\\n.sidebar {\\n  display: flex-direction\\n}\\n\\n.cards {\\n  display: flex\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 651,
  "fields": {
    "learner_github_id": "209395146",
    "learner_name": "cmerriman",
    "title": "Flexbox Item Properties",
    "slug": "arrays-review",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-27T00:02:42.668Z",
    "last_attempt": "2025-05-27T00:02:42.668Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 652,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-27T17:04:53.420Z",
    "first_attempt": "2025-05-27T17:04:53.419Z",
    "last_attempt": "2025-05-27T17:04:53.420Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 78, 102, 84, 96 ]\\nlet totalMiles = 0\\n// Declare a variable to store the total. Initial value is 0.\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\n  totalMiles += miles\\n}\\n\\nconst averageMiles = totalMiles / weeklyMiles.length\\n// Declare a new variable to store the average miles over time\\n\\nconsole.log(`I average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 653,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-27T17:25:17.361Z",
    "first_attempt": "2025-05-27T17:21:51.803Z",
    "last_attempt": "2025-05-27T17:25:17.361Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const sleep of hours) {\\n  if (sleep < 7) {\\n    grumpyHours.push(sleep)\\n  }\\n  else {\\n    happyHours.push(sleep)\\n  }\\n}\\n\\nconsole.log(`I was grumpy on ${grumpyHours} days.\\nI was happy on ${happyHours} days.`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 654,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T20:05:45.268Z",
    "first_attempt": "2025-06-03T20:05:45.268Z",
    "last_attempt": "2025-06-03T20:05:45.268Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\n\\n\\n  // Call your function with different values and store a result in a variable\\n// Create your arrow function here\\n  const calculateGameScore = (points, multiplier) => {\\n      const total = points * multiplier\\n      if (total >= 1000) {\\n          return \"High Score!\"\\n      } else {\\n          return \"Keep trying!\"\\n      }\\n  }\\n\\n  // Call your function with different values and store a result in a variable\\n  const result1 = calculateGameScore(500, 2.5)\\n  const result2 = calculateGameScore(400, 2)\\n\\n  // Log the result to see the output\\n  console.log(`Result 1: ${result1}`)\\n  console.log(`Result 2: ${result2}`)\\n\\n  // Log the result to see the output\\n\\n  '}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 655,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-05-27T18:42:18.772Z",
    "first_attempt": "2025-05-27T17:49:51.080Z",
    "last_attempt": "2025-05-27T18:42:18.772Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\nfor (const coffee of coffees) {\\n    if (coffee.includes(\"light\")) {\\n        light++\\n    }\\n    else if (coffee.includes(\"medium\")) {\\n        medium++\\n    }\\n    else if (coffee.includes(\"dark\") || coffee.includes(\"toasty\")) {\\n        toastyDark++\\n    }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 656,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-02T00:50:22.811Z",
    "first_attempt": "2025-05-27T18:30:04.323Z",
    "last_attempt": "2025-07-02T00:50:22.811Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 150\\nlet marchBill = 155\\nlet aprilBill = 140\\nlet mayBill = 120\\nlet juneBill = 145\\nlet julyBill = 160\\nlet augustBill = 125\\nlet septemberBill = 130\\nlet octoberBill = 155\\nlet novemberBill = 165\\nlet decemberBill = 160\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill +septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 657,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-27T18:39:02.550Z",
    "first_attempt": "2025-05-27T18:39:02.549Z",
    "last_attempt": "2025-05-27T18:39:02.550Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"2020 Macbook Pro\"\\nconst phone = \"Iphone 16 pro max\"\\nconst television = \"FireTv\"\\nconst refrigerator = \"thermador\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `all of my insured electtronics in the house consist of my ${computer}, my  ${phone}, my ${television}, and my ${refrigerator}.`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 658,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-27T18:59:28.755Z",
    "first_attempt": "2025-05-27T18:57:46.665Z",
    "last_attempt": "2025-05-27T18:59:28.755Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 659,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "New Toys",
    "slug": "leonids-arrays-push",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-27T21:39:30.564Z",
    "first_attempt": "2025-05-27T21:37:56.148Z",
    "last_attempt": "2025-05-27T21:39:30.564Z",
    "completed_code": "{'code': 'const toyInventory = []\\n\\ntoyInventory.push(\"Wooden Train\")\\ntoyInventory.push(\"Stuffed Rabbit\")\\ntoyInventory.push(\"Painted Kite\")\\n\\nconst toyInventoryCollection = []\\ntoyInventoryCollection.push({\\n    name: \"Wooden Train\",\\n    priceInDollars: 30\\n})\\n\\ntoyInventoryCollection.push({\\n    name: \"Stuffed Rabbit\",\\n    priceInDollars: 25\\n})\\n\\ntoyInventoryCollection.push({\\n    name: \"Painted Kite\",\\n    priceInDollars: 20\\n})'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 660,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Helping Customers Find the Right Toy",
    "slug": "leonids-conditionals",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-05-27T21:52:18.482Z",
    "first_attempt": "2025-05-27T21:45:12.823Z",
    "last_attempt": "2025-05-27T21:52:18.482Z",
    "completed_code": "{'code': '// Define the phones array\\nconst phones = [\\n  {\\n    id: 1,\\n    name: \"iPhone\",\\n    maker: \"Apple, Inc.\",\\n    operatingSystem: \"iOS\",\\n    price: 900,\\n    weight: 1.2\\n  },\\n  {\\n    id: 2,\\n    name: \"Galaxy\",\\n    maker: \"Samsung\",\\n    operatingSystem: \"Android\",\\n    price: 600,\\n    weight: 1.4\\n  },\\n  {\\n    id: 3,\\n    name: \"Pixel\",\\n    maker: \"Google\",\\n    operatingSystem: \"Android\",\\n    price: 750,\\n    weight: 1.3\\n  }\\n]\\nconst phoneToFind = 2\\n\\nfor (const phone of phones) {\\n    // Only one phone will cause the condition below to evaluate to true\\n    if (phone.id === phoneToFind) {\\n        phone.weight = phone.weight + 0.4\\n        console.log(\"The \" + phone.maker + \" \" + phone.name + \" costs \" + phone.price + \" dollars. It weighs \" + phone.weight.toFixed(1) + \" grams.\")\\n    }\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 661,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Toy Catalog",
    "slug": "leonids-string-interpolation",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-05-27T22:10:14.028Z",
    "first_attempt": "2025-05-27T22:01:35.996Z",
    "last_attempt": "2025-05-27T22:10:14.028Z",
    "completed_code": "{'code': 'const toyCatalog = [\\n    {\\n        name: \"Wooden Train\",\\n        priceInDollars: 30,\\n        color: \"Red\"\\n    },\\n    {\\n        name: \"Stuffed Rabbit\",\\n        priceInDollars: 25,\\n        color: \"Gray\"\\n    },\\n    {\\n        name: \"Painted Kite\",\\n        priceInDollars: 20,\\n        color: \"Blue\"\\n    },\\n]\\n\\nconst displayCatalog = [];\\nfor (const toy of toyCatalog) {\\n    const line = `Toy: ${toy.name} | Price: $${toy.priceInDollars} | Color: ${toy.color}`\\n    displayCatalog.push(line);\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 662,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T00:45:49.036Z",
    "first_attempt": "2025-05-28T00:45:49.034Z",
    "last_attempt": "2025-05-28T00:45:49.036Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet() {\\n    console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 663,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T21:11:48.775Z",
    "first_attempt": "2025-05-28T21:11:48.773Z",
    "last_attempt": "2025-05-28T21:11:48.775Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 137\\nlet marchBill = 256\\nlet aprilBill = 127\\nlet mayBill = 169\\nlet juneBill = 234\\nlet julyBill = 447\\nlet augustBill = 93\\nlet septemberBill = 245\\nlet octoberBill = 312\\nlet novemberBill = 127\\nlet decemberBill = 45\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 664,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T21:12:47.836Z",
    "first_attempt": "2025-05-28T21:12:47.835Z",
    "last_attempt": "2025-05-28T21:12:47.836Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Acer\"\\nconst phone = \"Apple\"\\nconst television = \"LG\"\\nconst refrigerator = \"Samsung\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television} television, my ${computer} computer, my ${refrigerator} refrigerator, and my ${phone} phone`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 665,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T21:13:51.626Z",
    "first_attempt": "2025-05-28T21:13:51.625Z",
    "last_attempt": "2025-05-28T21:13:51.627Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - internetBill - waterBill - electricBill - fuelExpenses - foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 666,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-28T21:16:18.139Z",
    "first_attempt": "2025-05-28T21:15:42.527Z",
    "last_attempt": "2025-05-28T21:16:18.139Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${myIncome + spouseIncome - phoneBill - mortgage - carInsurance - healthInsurance}.`  // Use backticks and calculations here\\n\\nconsole.log(statement)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 667,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T21:19:04.087Z",
    "first_attempt": "2025-05-28T21:19:04.085Z",
    "last_attempt": "2025-05-28T21:19:04.087Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim();\\nconst formattedPhone = phone.replace(\" \", \"-\");\\nconst formattedName = customerName.toUpperCase();\\nconst containsX = password.includes(\"x\");\\nconst fileStart = filename.slice(0,4);\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 668,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-28T21:20:14.647Z",
    "first_attempt": "2025-05-28T21:19:53.191Z",
    "last_attempt": "2025-05-28T21:20:14.647Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n} else {\\n   if (iWokeUpEarly === false) {\\n      console.log(\"Netflix and chill\")\\n   }\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 669,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T01:18:21.903Z",
    "first_attempt": "2025-05-28T01:18:21.899Z",
    "last_attempt": "2025-05-28T01:18:21.903Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n    console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore()\\ncelebrateScore()\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 670,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-28T21:28:34.943Z",
    "first_attempt": "2025-05-28T21:27:42.722Z",
    "last_attempt": "2025-05-28T21:28:34.943Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nlet shoeOptions = [\"sandals\", \"sneakers\", \"boots\"];\\nlet pantOptions = [\"shorts\", \"pants\"];\\nlet shirtOptions = [\"t-shirt\", \"sweater\", \"jacket\"];\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    // Add your code here\\n    torsoClothing = shirtOptions[0];\\n    legClothing = pantOptions[0];\\n    footWear = shoeOptions[0];\\n} else if (temperature < 95 && temperature >=75) {\\n   torsoClothing = shirtOptions[0];\\n   legClothing = pantOptions[0];\\n   footWear = shoeOptions[1];\\n} else if (temperature < 75 && temperature >=50) {\\n   torsoClothing = shirtOptions[1];\\n   legClothing = pantOptions[1];\\n   footWear = shoeOptions[1];\\n} else if (temperature < 50 && temperature >=35) {\\n   torsoClothing = shirtOptions[2];\\n   legClothing = pantOptions[1];\\n   footWear = shoeOptions[1];\\n} else if (temperature < 35) {\\n   torsoClothing = shirtOptions[2];\\n   legClothing = pantOptions[1];\\n   footWear = shoeOptions[2];\\n}\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 671,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-28T21:32:07.095Z",
    "first_attempt": "2025-05-28T21:31:54.381Z",
    "last_attempt": "2025-05-28T21:32:07.096Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n   photoStorage = \"Photo Album\"\\n} else if (totalPhotos < 110 && totalPhotos >= 50) {\\n   photoStorage = \"Shoe Box\"\\n} else {\\n   photoStorage = \"Enveloples\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n   albumColor = \"plum\"\\n} else {\\n   albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 672,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 14,
    "complete": true,
    "completed_on": "2025-05-28T01:55:42.878Z",
    "first_attempt": "2025-05-28T01:42:09.889Z",
    "last_attempt": "2025-05-28T01:55:42.878Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction checkGreaterNumber(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayWelcomeMessage(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscountPrice(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 673,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T21:33:07.538Z",
    "first_attempt": "2025-05-28T21:33:07.538Z",
    "last_attempt": "2025-05-28T21:33:07.538Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [yellowFruit, orangeFruit, redFruit, greenFruit, blueFruit]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 674,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T21:33:25.846Z",
    "first_attempt": "2025-05-28T21:33:25.845Z",
    "last_attempt": "2025-05-28T21:33:25.846Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 675,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-28T21:35:10.501Z",
    "first_attempt": "2025-05-28T21:35:02.499Z",
    "last_attempt": "2025-05-28T21:35:10.501Z",
    "completed_code": "{'code': 'const topics = [\"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\"]\\n\\nfor (const topic of topics) {\\n   console.log(topic)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 676,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T21:35:50.792Z",
    "first_attempt": "2025-05-28T21:35:50.791Z",
    "last_attempt": "2025-05-28T21:35:50.792Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunk of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 677,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-28T21:38:44.367Z",
    "first_attempt": "2025-05-28T21:37:12.970Z",
    "last_attempt": "2025-05-28T21:38:44.367Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n  if (ingredient === \"egg\") {\\n   finishedFood.push(\"biscuit\")\\n  } else if (ingredient === \"beef patty\") {\\n   finishedFood.push(\"burger\")\\n  } else if (ingredient === \"potato\") {\\n   finishedFood.push(\"fries\")\\n  }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 678,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-28T02:18:24.015Z",
    "first_attempt": "2025-05-28T02:03:46.837Z",
    "last_attempt": "2025-05-28T02:18:24.015Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(coding) {\\n    console.log(`I love ${coding}!`)\\n}\\n\\ndescribeActivity(\"coding\")\\ndescribeActivity(\"running\")\\ndescribeActivity(\"swimming\")'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 679,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T21:39:51.681Z",
    "first_attempt": "2025-05-28T21:39:51.680Z",
    "last_attempt": "2025-05-28T21:39:51.681Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expense of monthlyExpenses) {\\n  // Add the current monthly cost to the value of totalExpense\\n   totalExpense += expense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense/monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 680,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T21:41:27.723Z",
    "first_attempt": "2025-05-28T21:41:27.721Z",
    "last_attempt": "2025-05-28T21:41:27.723Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [127, 153, 268, 47, 53, 143  ]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (week of weeklyMiles) {\\n   totalMiles += week\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles/weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 681,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T21:42:52.809Z",
    "first_attempt": "2025-05-28T21:42:52.807Z",
    "last_attempt": "2025-05-28T21:42:52.809Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\n\\nfor (const night of hours) {\\n   if (night < 7) {\\n      grumpyHours.push(night)\\n   } else {\\n      happyHours.push(night)\\n   }\\n}\\n\\nconsole.log(`I was grumpy on ${grumpyHours.length} days.\\nI was happy on ${happyHours.length} days.`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 682,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T02:06:30.490Z",
    "first_attempt": "2025-05-28T02:06:30.489Z",
    "last_attempt": "2025-05-28T02:06:30.490Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${myIncome + spouseIncome - phoneBill - mortgage - carInsurance - healthInsurance}.`  // Use backticks and calculations here\\n\\nconsole.log(statement)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 683,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-28T21:45:09.964Z",
    "first_attempt": "2025-05-28T21:44:51.150Z",
    "last_attempt": "2025-05-28T21:45:09.964Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  // Add your logic here\\n  if (coffee.includes(\"light\")) {\\n   light += 1\\n  } else if (coffee.includes(\"medium\")) {\\n   medium += 1\\n  } else if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")) {\\n   toastyDark += 1\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 684,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T02:11:45.901Z",
    "first_attempt": "2025-05-28T02:11:45.900Z",
    "last_attempt": "2025-05-28T02:11:45.901Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nlet februaryBill = 145\\nlet marchBill = 120\\nlet aprilBill = 131\\nlet mayBill = 146\\nlet juneBill = 155\\nlet julyBill = 132\\nlet augustBill = 133\\nlet septemberBill = 119\\nlet octoberBill = 122\\nlet novemberBill = 132\\nlet decemberBill = 143\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 685,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T02:13:32.716Z",
    "first_attempt": "2025-05-28T02:13:32.714Z",
    "last_attempt": "2025-05-28T02:13:32.716Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"2025 Macbook\"\\nconst phone = \"iPhone XS\"\\nconst television = \"big TV\"\\nconst refrigerator = \"old refrigerator\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}.`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 686,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-28T21:48:19.687Z",
    "first_attempt": "2025-05-28T21:46:31.151Z",
    "last_attempt": "2025-05-28T21:48:19.687Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 687,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T02:16:10.996Z",
    "first_attempt": "2025-05-28T02:16:10.994Z",
    "last_attempt": "2025-05-28T02:16:10.996Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - internetBill - waterBill - electricBill - fuelExpenses - foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 688,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-28T21:54:13.619Z",
    "first_attempt": "2025-05-28T21:53:03.811Z",
    "last_attempt": "2025-05-28T21:54:13.619Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []        // \"Clothing\"\\nconst entertainment = []   // \"Movie\"\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nconst utilities = []       // \"Utility\"\\nconst largePurchases = []  // Expenses over 100.00\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nlet averageExpense = 0\\n\\n\\n/*\\n Use your algorithmic thinking for the steps to\\n categorize, total, and average the expenses.\\n\\n Be patient and take your time. This is challenging.\\n*/\\n\\n\\nfor (const expense of monthlyExpenses) {\\n   let expenseAmount = parseFloat(expense.split(\":\")[1])\\n   totalExpenses += expenseAmount\\n\\n   if (expenseAmount > 100) {\\n      largePurchases.push(expenseAmount)\\n   }\\n\\n   if (expense.includes(\"Clothing\")) {\\n      clothing.push(expenseAmount)\\n   } else if (expense.includes(\"Movie\")) {\\n      entertainment.push(expenseAmount)\\n   } else if (expense.includes(\"Groceries\") || expense.includes(\"Restaurant\")) {\\n      food.push(expenseAmount)\\n   } else if (expense.includes(\"Fuel\") || expense.includes(\"Gas\")) {\\n      fuel.push(expenseAmount)\\n   } else if (expense.includes(\"Lyft\") || expense.includes(\"Uber\")) {\\n      travel.push(expenseAmount)\\n   } else if (expense.includes(\"Utility\")) {\\n      utilities.push(expenseAmount)\\n   }\\n}\\n\\naverageExpense = totalExpenses/monthlyExpenses.length\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 689,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T21:55:07.046Z",
    "first_attempt": "2025-05-28T21:55:07.046Z",
    "last_attempt": "2025-05-28T21:55:07.046Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n   name: \"Jeremy Landy\",\\n   location: \"Phoenix, AR\",\\n   gender: \"male\",\\n   age: 31\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 690,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-28T21:56:02.195Z",
    "first_attempt": "2025-05-28T21:55:52.728Z",
    "last_attempt": "2025-05-28T21:56:02.195Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n   color: \"red\",\\n   stemLength: 6,\\n   growingSeason: \"Spring\",\\n   thorny: false\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n   color: \"red\",\\n   stemLength: 6,\\n   growingSeason: \"Srping\",\\n   thorny: true\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 691,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T21:57:23.652Z",
    "first_attempt": "2025-05-28T21:57:23.651Z",
    "last_attempt": "2025-05-28T21:57:23.652Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\nfor (const appointment of appointments) {\\n   schedule += `Patient ${appointment.firstName} ${appointment.lastName} has an appointment at ${appointment.appointmentTime}\\\\n`\\n}\\n\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 692,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T21:57:44.476Z",
    "first_attempt": "2025-05-28T21:57:44.475Z",
    "last_attempt": "2025-05-28T21:57:44.476Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 693,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T21:58:05.796Z",
    "first_attempt": "2025-05-28T21:58:05.795Z",
    "last_attempt": "2025-05-28T21:58:05.796Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 694,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T21:58:24.533Z",
    "first_attempt": "2025-05-28T21:58:24.532Z",
    "last_attempt": "2025-05-28T21:58:24.533Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \"Large Tank\"'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 695,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-28T22:00:29.261Z",
    "first_attempt": "2025-05-28T22:00:17.597Z",
    "last_attempt": "2025-05-28T22:00:29.261Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 696,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T03:07:18.381Z",
    "first_attempt": "2025-05-28T03:07:18.378Z",
    "last_attempt": "2025-05-28T03:07:18.381Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0,4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 697,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T03:18:44.520Z",
    "first_attempt": "2025-05-28T03:18:44.517Z",
    "last_attempt": "2025-05-28T03:18:44.520Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse {\\n    console.log(\"Yay! I get to watch my favorite show all day.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 698,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T22:01:30.294Z",
    "first_attempt": "2025-05-28T22:01:30.293Z",
    "last_attempt": "2025-05-28T22:01:30.294Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet () {\\n   console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 699,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-28T22:02:07.952Z",
    "first_attempt": "2025-05-28T22:01:59.789Z",
    "last_attempt": "2025-05-28T22:02:07.952Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore () {\\n   console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore()\\ncelebrateScore()\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 700,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T22:03:03.155Z",
    "first_attempt": "2025-05-28T22:03:03.153Z",
    "last_attempt": "2025-05-28T22:03:03.155Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreaterThan100(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayGreeting(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscount(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 701,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T22:03:30.802Z",
    "first_attempt": "2025-05-28T22:03:30.800Z",
    "last_attempt": "2025-05-28T22:03:30.802Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 702,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T03:34:29.802Z",
    "first_attempt": "2025-05-28T03:34:29.800Z",
    "last_attempt": "2025-05-28T03:34:29.802Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    // Add your code here\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n}\\n\\nelse if (temperature < 90 && temperature >= 75) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n}\\n\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\n\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\n\\nelse {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\"\\n}\\n\\nconsole.log(`Today the temperature is ${temperature} degrees, so I will wear a ${torsoClothing}, ${legClothing}, and ${footWear}.`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 703,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T22:03:55.332Z",
    "first_attempt": "2025-05-28T22:03:55.331Z",
    "last_attempt": "2025-05-28T22:03:55.332Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\ncalculateTotal(50);\\ncalculateTotal(99.99);\\ncalculateTotal(25.50);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 704,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T22:05:05.111Z",
    "first_attempt": "2025-05-28T22:05:05.109Z",
    "last_attempt": "2025-05-28T22:05:05.111Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(name, points) {\\n   console.log(`${name} scored ${points} points!`)\\n}\\n\\n// Then invoke the function with different player names and scores\\n\\ndisplayGameScore(\"Ryan\", 100)\\ndisplayGameScore(\"Lexi\", 110)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 705,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T22:06:10.425Z",
    "first_attempt": "2025-05-28T22:06:10.424Z",
    "last_attempt": "2025-05-28T22:06:10.425Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\n\\nconst add = (x, y) => {\\n    return x + y\\n}\\n\\nconst greet = (name) => {\\n    return \"Hello, \" + name + \"!\"\\n}\\n\\nconst getRandomNumber = () => {\\n    return Math.random()\\n}\\n\\n// After converting, test your functions by invoking them here\\n\\n\\nconsole.log(add, greet, getRandomNumber)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 706,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T22:07:32.157Z",
    "first_attempt": "2025-05-28T22:07:32.155Z",
    "last_attempt": "2025-05-28T22:07:32.157Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\nconst makeGreeting = (name) => {\\n   return `Hello, ${name}!`\\n}\\n\\n\\n// Invoke the function and assign the return value to a variable\\nconst test = makeGreeting(\"Ryan\")\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(test)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 707,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-28T22:10:10.253Z",
    "first_attempt": "2025-05-28T22:09:36.768Z",
    "last_attempt": "2025-05-28T22:10:10.253Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => {\\n   return quantity * price\\n}\\n\\n// Create calculateTotal here\\nconst calculateTotal = (subtotal) => {\\n   return subtotal * 1.08\\n}\\n\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(3,4.99)\\n\\n// 2. Calculate the final total with tax\\nconst finalTotal = calculateTotal(subtotal)\\n\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $ ${subtotal}`)\\nconsole.log(`Total with tax: $${finalTotal}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 708,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-28T22:16:22.224Z",
    "first_attempt": "2025-05-28T22:14:39.776Z",
    "last_attempt": "2025-05-28T22:16:22.224Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\nconst calculateGameScore = (base, multiplier) => {\\n   const finalScore = base * multiplier\\n\\n   if (finalScore >= 1000) {\\n      return `High Score!`\\n   } else {\\n      return `Keep trying!`\\n   }\\n}\\n\\n  // Call your function with different values and store a result in a variable\\nconst test = calculateGameScore(50.100);\\nconst testagain = calculateGameScore(1000,50);\\nconst testalso= calculateGameScore(13,47);\\n\\n  // Log the result to see the output\\n  console.log(test)\\n  console.log(testagain)\\n  console.log(testalso)\\n\\n  '}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 709,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-28T22:17:18.447Z",
    "first_attempt": "2025-05-28T22:17:09.831Z",
    "last_attempt": "2025-05-28T22:17:18.447Z",
    "completed_code": "{'code': '// This code has scope problems!\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\nlet score = 0\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 710,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-28T22:21:04.061Z",
    "first_attempt": "2025-05-28T22:20:40.787Z",
    "last_attempt": "2025-05-28T22:21:04.061Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\nconst checkHighScore = (playerName, score) => {\\n   if (score > highScore) {\\n      highScore = score\\n      return `Congratulations ${playerName}! You have the new high score!`\\n   } else {\\n      `Keep trying ${playerName}!`\\n   }\\n}\\n\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\n\\ncheckHighScore(\"Ryan\", 10);\\ncheckHighScore(\"Lexi\", 1);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 711,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T22:23:51.769Z",
    "first_attempt": "2025-05-28T22:23:51.767Z",
    "last_attempt": "2025-05-28T22:23:51.769Z",
    "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\n      let price = 10\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n      if (isWeekend) {\\n         price += 2\\n      } \\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n      if (age < 12 || age >= 65) {\\n         price *= .5\\n      }\\n      // 4. Return the final ticket price\\n      return price\\n  }\\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n\\n  // Example:\\n  // const adultWeekdayPrice = calculateTicketPrice(25, false);\\nlet firstTest =  calculateTicketPrice(11, true);\\nlet secondTest = calculateTicketPrice(43, false);\\n\\nconsole.log(firstTest);\\nconsole.log(secondTest)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 712,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T22:27:16.983Z",
    "first_attempt": "2025-05-28T22:27:16.982Z",
    "last_attempt": "2025-05-28T22:27:16.983Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\n      let total = 0\\n      // 2. Loop through all prices in the array and add each to total\\n   for (const price of prices) {\\n      total += price\\n   }\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\n   if (total > 100) {\\n      total *= .9\\n   }\\n\\n   return total\\n      // 4. Return the final total\\n  }\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\n\\n   const firstTotal = calculateCartTotal([13,27,19,23])\\n   const secondTotal = calculateCartTotal([11,78,34,98,7])\\n\\n   console.log(firstTotal)\\n   console.log(secondTotal)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 713,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-28T22:30:35.208Z",
    "first_attempt": "2025-05-28T22:30:24.130Z",
    "last_attempt": "2025-05-28T22:30:35.208Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n   return time * 100 + targets * 50\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n   if (targets > 10) {\\n      return 1000\\n   } else {\\n      return 0\\n   }\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n   const basePoints = calculateBasePoints(time, targets)\\n   const bonusPoints = calculateBonus(targets)\\n    // Add the results together and return the sum\\n    return basePoints + bonusPoints\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\n\\nconst result = calculateFinalScore(2,5)\\nconsole.log(result)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 714,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-28T22:36:53.305Z",
    "first_attempt": "2025-05-28T22:36:04.830Z",
    "last_attempt": "2025-05-28T22:36:53.305Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  // Otherwise, return \"Hello, [name]!\"\\n  if (time === \"morning\" || name.startsWith(\"A\")) {\\n   return `Good morning, ${name}!`\\n  } else if (time === \"afternoon\") {\\n   return `Good afternoon, ${name}!`\\n  } else {\\n   return `Hello, ${name}!`\\n  }\\n\\n}\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  // If topic is \"weather\", return the weather joke\\n  // If topic is \"animals\", return the animals joke\\n  // Otherwise, return the default joke\\n  if (topic === \"weather\") {\\n   return \"What do you call a stormy robot? A thunder-bot!\"\\n  } else if (topic === \"animals\") {\\n   return \"Why did the robot go to the zoo? To study creature features!\"\\n  } else {\\n   return \"Why was the robot tired? Because it had too many bytes!\"\\n  }\\n\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n  let greetings = []\\n\\n  // Loop through each person in the people array\\n  for (let person of people) {\\n   greetings.push(createGreeting(person,time))\\n  }\\n\\n  return greetings\\n\\n  // Create a greeting for each person\\n\\n  // Add the greeting to the array\\n\\n  // Return the array of greetings\\n\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n   const greeting = createGreeting(name, time)\\n  // Get the joke\\n   const joke = tellJoke(topic);\\n  // Return both together\\n   return greeting + \" \" + joke\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 715,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 750,
    "complete": true,
    "completed_on": "2025-05-28T22:49:02.041Z",
    "first_attempt": "2025-05-28T22:38:48.941Z",
    "last_attempt": "2025-05-28T22:49:02.041Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n      <!-- Your content goes here -->\\n  <h1>How I Became A Software Developer</h1>\\n  <article>\\n    <h2>Nashville Software School</h2>\\n    <section>\\n      <p>I start the NSS on June 30th</p>\\n    </section>\\n    <section>\\n      <p>I learned the following skills</p>\\n      <ol>\\n        <li>Variables</li>\\n        <li>Arrays</li>\\n        <li>Objects</li>\\n        <li>Functions</li>\\n        <li>HTML</li>\\n        <li>CSS</li>\\n      </ol>\\n    </section>\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 716,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "HTML Elements",
    "slug": "html-elements",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-28T04:29:33.123Z",
    "last_attempt": "2025-05-28T04:29:33.147Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 717,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "HTML Elements",
    "slug": "html-elements",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-28T04:29:33.123Z",
    "last_attempt": "2025-05-28T04:29:33.123Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 718,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 144,
    "complete": true,
    "completed_on": "2025-05-28T22:56:18.684Z",
    "first_attempt": "2025-05-28T22:54:20.793Z",
    "last_attempt": "2025-05-28T22:56:18.684Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: lightblue;\\n}\\n\\n/* Add your CSS styles here */\\narticle {\\n  border: 1px solid black;\\n  padding: 1rem;\\n}\\n\\np {\\n  color: purple;\\n}\\n\\nimg {\\n  height: 10rem;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 719,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "CSS Selectors",
    "slug": "css-selectors",
    "attempts": 210,
    "complete": true,
    "completed_on": "2025-05-28T23:04:49.788Z",
    "first_attempt": "2025-05-28T22:56:19.740Z",
    "last_attempt": "2025-05-28T23:04:49.788Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\nh1 {\\n  color: lightblue;\\n}\\n\\np {\\n  font-family: arial;\\n}\\n\\nnav {\\n  border: 1px black solid;\\n}\\n\\n.highlight {\\n  background-color: yellow;\\n}\\n\\n#basics {\\n  border: 1px red solid;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 720,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 284,
    "complete": true,
    "completed_on": "2025-05-28T23:12:25.533Z",
    "first_attempt": "2025-05-28T23:04:53.845Z",
    "last_attempt": "2025-05-28T23:12:25.533Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links {\\n  list-style: none;\\n  display: flex;\\n  gap: 10px;\\n}\\n\\n/* Make the navbar a flex container and style it */\\n.navbar {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-evenly;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 721,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-container",
    "attempts": 101,
    "complete": true,
    "completed_on": "2025-05-28T23:14:22.123Z",
    "first_attempt": "2025-05-28T23:12:38.047Z",
    "last_attempt": "2025-05-28T23:14:22.123Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  font-size: 0.8rem;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n}\\n\\n/* Add your flexbox container properties below */\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  gap: 25px;\\n}\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 722,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Flexbox Item Properties",
    "slug": "flexbox-items",
    "attempts": 179,
    "complete": true,
    "completed_on": "2025-05-28T23:16:33.246Z",
    "first_attempt": "2025-05-28T23:14:23.083Z",
    "last_attempt": "2025-05-28T23:16:33.246Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n/* Add your flexbox properties below */\\n\\n.nav-links {\\n  display: flex;\\n  gap: 25px;\\n  justify-content: center;\\n}\\n\\n.content {\\n  display: flex;\\n  flex-direction: column;\\n\\n}\\n\\n.cards {\\n  display: flex;\\n  flex-wrap: wrap;\\n  flex: auto;\\n}\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 723,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-28T05:27:38.747Z",
    "first_attempt": null,
    "last_attempt": "2025-05-28T05:27:38.747Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 724,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-28T05:27:39.294Z",
    "first_attempt": null,
    "last_attempt": "2025-05-28T05:27:39.294Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 725,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-28T05:27:39.932Z",
    "first_attempt": null,
    "last_attempt": "2025-05-28T05:27:39.932Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 726,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-28T05:27:41.193Z",
    "first_attempt": null,
    "last_attempt": "2025-05-28T05:27:41.193Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 727,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Raising Prices",
    "slug": "leonids-iteration-update",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-05-28T22:05:42.941Z",
    "first_attempt": "2025-05-28T11:42:30.598Z",
    "last_attempt": "2025-05-28T22:05:42.941Z",
    "completed_code": "{'code': 'const toyCatalog = [\\n  { name: \"Wooden Train\", priceInDollars: 30, color: \"Red\" },\\n  { name: \"Stuffed Rabbit\", priceInDollars: 25, color: \"Gray\" },\\n  { name: \"Painted Kite\", priceInDollars: 20, color: \"Blue\" }\\n];\\n\\nconst displayCatalog = [];\\nfor (const toy of toyCatalog) {\\n    const newPrice = (toy.priceInDollars * 1.05).toFixed(2);\\n    const line = `Toy: ${toy.name} | Price: $${newPrice} | Color: ${toy.color}`;\\n    displayCatalog.push(line)\\n}\\n\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 728,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T20:06:28.358Z",
    "first_attempt": "2025-06-03T20:06:28.358Z",
    "last_attempt": "2025-06-03T20:06:28.358Z",
    "completed_code": "{'code': \"// This code has scope problems!\\nlet score = 0    // Changed to let since we're updating it\\n\\nconst displayScore = () => {\\n    console.log(`Score: ${score}`)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 729,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T20:07:54.422Z",
    "first_attempt": "2025-06-03T20:07:54.419Z",
    "last_attempt": "2025-06-03T20:07:54.422Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\nconst checkHighScore = (playerName, score) => {\\n    if (score > highScore) {\\n        highScore = score\\n        return (`${playerName} set a new high score of ${score}!`)\\n    } else {\\n        return (`${playerName} scored ${score}. High score is still ${highScore}`)\\n    }\\n}\\n\\n// Test your function with multiple calls below\\nconsole.log(checkHighScore(\"Alice\", 50))\\nconsole.log(checkHighScore(\"Bob\", 30))\\nconsole.log(checkHighScore(\"Charlie\", 80))\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 730,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-07-02T01:02:03.848Z",
    "first_attempt": "2025-05-28T20:54:29.949Z",
    "last_attempt": "2025-07-02T01:02:03.848Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388.\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512.\\n\\n// Monthly bills\\nconst internetBill = 158.\\nconst waterBill = 68.\\nconst electricBill = 129.\\nconst fuelExpenses = 295.\\nconst foodExpenses = 503.\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome = myIncome + spouseIncome\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nconst expenses = internetBill + waterBill + electricBill + fuelExpenses + foodExpenses\\nnetIncome = combinedIncome - expenses\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 731,
  "fields": {
    "learner_github_id": "166393285",
    "learner_name": "Chris J",
    "title": "Finding the Flowers",
    "slug": "flower-shop",
    "attempts": 16,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-28T22:09:44.240Z",
    "last_attempt": "2025-05-29T12:53:04.702Z",
    "completed_code": null,
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 732,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Flexbox Item Properties",
    "slug": "leonids-data-types",
    "attempts": 15,
    "complete": true,
    "completed_on": "2025-05-28T23:58:04.746Z",
    "first_attempt": "2025-05-28T23:17:01.247Z",
    "last_attempt": "2025-05-28T23:58:04.746Z",
    "completed_code": "{'code': 'function createToy(name, category, ageRecommendation, isBatteryOperated, features, dimensions) {\\r\\n    return {\\r\\n        name,\\r\\n        category,\\r\\n        ageRecommendation,\\r\\n        isBatteryOperated,\\r\\n        features,\\r\\n        dimensions\\r\\n    };\\r\\n}\\r\\n\\r\\n// TODO: Call createToy with the correct data types\\r\\nconst myToy = createToy(\"Stuffed Rabbit\", \"Stuffed Animal\", 7, false,[], {width:7, height: 7} );'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 733,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Displaying Toy Properties",
    "slug": "leonids-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-28T23:49:00.158Z",
    "first_attempt": "2025-05-28T23:49:00.157Z",
    "last_attempt": "2025-05-28T23:49:00.158Z",
    "completed_code": "{'code': 'const toyInventory = [\\r\\n    {name: \"Wooden Train\",\\r\\n    priceInDollars: 40},\\r\\n    {name: \"Stuffed Rabbit\",\\r\\n    priceInDollars: 100},\\r\\n    {name: \"Painted Kite\",\\r\\n    priceInDollars:25}\\r\\n]\\r\\n\\r\\n\\r\\nfor (const toy of toyInventory) {\\r\\n    console.log(toy.name)\\r\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 734,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "New Toys",
    "slug": "leonids-arrays-push",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-28T23:52:58.468Z",
    "first_attempt": "2025-05-28T23:52:43.433Z",
    "last_attempt": "2025-05-28T23:52:58.468Z",
    "completed_code": "{'code': 'const toyInventory = []\\r\\n\\r\\ntoyInventory.push(\"Wooden Train\");\\r\\ntoyInventory.push(\"Stuffed Rabbit\");\\r\\ntoyInventory.push(\"Painted Kite\");\\r\\n\\r\\nconst toyInventoryCollection = []\\r\\n\\r\\ntoyInventoryCollection.push(\\r\\n    {\\r\\n        name: toyInventory[0],\\r\\n        priceInDollars: 30\\r\\n    }\\r\\n)\\r\\n\\r\\ntoyInventoryCollection.push(\\r\\n    {\\r\\n        name: toyInventory[1],\\r\\n        priceInDollars: 25\\r\\n    }\\r\\n)\\r\\n\\r\\ntoyInventoryCollection.push(\\r\\n    {\\r\\n        name: toyInventory[2],\\r\\n        priceInDollars: 20\\r\\n    }\\r\\n)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 735,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Data Structures",
    "slug": "leonids-data-structures",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-29T00:03:00.249Z",
    "first_attempt": "2025-05-28T23:58:38.404Z",
    "last_attempt": "2025-05-29T00:03:00.249Z",
    "completed_code": "{'code': '\\r\\n    const inventory = [\\r\\n  { id: 101, name: \"Hand-Carved Wooden Train\", maker: \"Leonid\" },\\r\\n  { id: 102, name: \"Painted Rocking Horse\", maker: \"Leonid\" },\\r\\n  { id: 103, name: \"Stuffed Bear with Bow Tie\", maker: \"Leonid\" },\\r\\n  { id: 104, name: \"Miniature Sailboat\", maker: \"Leonid\" },\\r\\n  { id: 105, name: \"Patchwork Doll\", maker: \"Leonid\" },\\r\\n  { id: 106, name: \"Wooden Puzzle Box\", maker: \"Leonid\" },\\r\\n  { id: 107, name: \"Knitted Sock Monkey\", maker: \"Leonid\" },\\r\\n  { id: 108, name: \"Spinning Top\", maker: \"Leonid\" },\\r\\n  { id: 109, name: \"Tiny Puppet Theater\", maker: \"Leonid\" },\\r\\n  { id: 110, name: \"Hand-Painted Marbles\", maker: \"Leonid\" },\\r\\n  { id: 111, name: \"Fabric Kite with Tail\", maker: \"Leonid\" },\\r\\n  { id: 112, name: \"Wool-Stuffed Bunny\", maker: \"Leonid\" },\\r\\n  { id: 113, name: \"Wooden Xylophone\", maker: \"Leonid\" },\\r\\n  { id: 114, name: \"Tin Wind-Up Robot\", maker: \"Leonid\" },\\r\\n  { id: 115, name: \"Miniature Toy Chest\", maker: \"Leonid\" }\\r\\n];\\r\\n\\r\\nfunction findToyById(toys, id) {\\r\\n  // Your code here\\r\\n    for (const toy of toys) {\\r\\n        if (id === toy.id) {\\r\\n            return toy\\r\\n        } else {\\r\\n            return null\\r\\n        }\\r\\n    }\\r\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 736,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Representing Toys as Objects",
    "slug": "leonids-objects",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-29T00:30:00.961Z",
    "first_attempt": "2025-05-29T00:29:27.291Z",
    "last_attempt": "2025-05-29T00:30:00.961Z",
    "completed_code": "{'code': 'const toyFactory = (name, manufacturer, priceInDollars, inStock, recommendedAgeRange, weightInGrams) => {\\r\\n    return {\\r\\n        name: name,\\r\\n        manufacturer: manufacturer,\\r\\n        priceInDollars: priceInDollars,\\r\\n        inStock: inStock,\\r\\n        recommendedAgeRange: recommendedAgeRange,\\r\\n        weightInGrams: weightInGrams\\r\\n    }\\r\\n}\\r\\n\\r\\nconst woodenTrain = toyFactory(\"Wooden Train\", \"Hasbro\", null, true, \"4-11\", 150)\\r\\nconst stuffedRabbit = toyFactory(\"Stuffed Rabbit\", null, 10, false, \"1-99\", 15)\\r\\nconst kite = toyFactory(\"Kite\", \"Flite\", 25, true, \"7-99\", null)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 737,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Toy Collection",
    "slug": "leonids-arrays",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-05-29T00:32:02.913Z",
    "first_attempt": "2025-05-29T00:31:54.161Z",
    "last_attempt": "2025-05-29T00:32:02.913Z",
    "completed_code": "{'code': 'const toyInventory = [\\r\\n    {\\r\\n        name: \"Wooden Train\",\\r\\n        manufacturer: \"Hasbro\",\\r\\n        priceInDollars: 150\\r\\n    },\\r\\n    {\\r\\n        name: \"Stuffed Rabbit\",\\r\\n        manufacturer: \"Ty Inc\",\\r\\n        priceInDollars: 15\\r\\n    },\\r\\n    {\\r\\n        name: \"Kite\",\\r\\n        manufacturer: \"Flite\",\\r\\n        priceInDollars: null\\r\\n    }\\r\\n\\r\\n]'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 738,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Helping Customers Find the Right Toy",
    "slug": "leonids-conditionals",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-29T00:38:12.168Z",
    "first_attempt": "2025-05-29T00:32:44.451Z",
    "last_attempt": "2025-05-29T00:38:12.168Z",
    "completed_code": "{'code': '// Define the phones array\\r\\nconst phones = [\\r\\n  {\\r\\n    id: 1,\\r\\n    name: \"iPhone\",\\r\\n    maker: \"Apple, Inc.\",\\r\\n    operatingSystem: \"iOS\",\\r\\n    price: 900,\\r\\n    weight: 1.2\\r\\n  },\\r\\n  {\\r\\n    id: 2,\\r\\n    name: \"Galaxy\",\\r\\n    maker: \"Samsung\",\\r\\n    operatingSystem: \"Android\",\\r\\n    price: 600,\\r\\n    weight: 1.4\\r\\n  },\\r\\n  {\\r\\n    id: 3,\\r\\n    name: \"Pixel\",\\r\\n    maker: \"Google\",\\r\\n    operatingSystem: \"Android\",\\r\\n    price: 750,\\r\\n    weight: 1.3\\r\\n  }\\r\\n]\\r\\n\\r\\nconst phoneToFind = 2\\r\\n\\r\\nfor (const phone of phones) {\\r\\n    // Only one phone will cause the condition below to evaluate to true\\r\\n    if (phone.id === phoneToFind) {\\r\\n        Math.round(phone.weight += 0.4)\\r\\n        console.log(`The ${phone.maker} ${phone.name} costs ${phone.price} dollars. It weighs 1.8 grams.`)\\r\\n    }\\r\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 739,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Toy Catalog",
    "slug": "leonids-string-interpolation",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-05-29T00:42:35.768Z",
    "first_attempt": "2025-05-29T00:41:22.311Z",
    "last_attempt": "2025-05-29T00:42:35.768Z",
    "completed_code": "{'code': 'const toyCatalog = [\\r\\n    {\\r\\n        name: \"Wooden Train\",\\r\\n        priceInDollars: 30,\\r\\n        color: \"Red\"\\r\\n    },\\r\\n    {\\r\\n        name: \"Stuffed Rabbit\",\\r\\n        priceInDollars: 25,\\r\\n        color: \"Gray\"\\r\\n    },\\r\\n    {\\r\\n        name: \"Painted Kite\",\\r\\n        priceInDollars: 20,\\r\\n        color: \"Blue\"\\r\\n    }\\r\\n]\\r\\n\\r\\nconst displayCatalog = []\\r\\n\\r\\nfor (const toy of toyCatalog) {\\r\\n    displayCatalog.push(`Toy: ${toy.name} | Price: $${toy.priceInDollars} | Color: ${toy.color}`)\\r\\n}\\r\\n\\r\\nconsole.log(displayCatalog)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 740,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Raising Prices",
    "slug": "leonids-iteration-update",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-29T00:57:52.887Z",
    "first_attempt": "2025-05-29T00:44:02.146Z",
    "last_attempt": "2025-05-29T00:57:52.887Z",
    "completed_code": "{'code': 'const toyCatalog = [\\r\\n  { name: \"Wooden Train\", priceInDollars: 30, color: \"Red\" },\\r\\n  { name: \"Stuffed Rabbit\", priceInDollars: 25, color: \"Gray\" },\\r\\n  { name: \"Painted Kite\", priceInDollars: 20, color: \"Blue\" }\\r\\n];\\r\\n\\r\\nlet displayCatalog = [];\\r\\n  for (const toy of toyCatalog) {\\r\\n  const increasedPrice = (toy.priceInDollars * 1.05).toFixed(2);\\r\\n  const line = `Toy: ${toy.name} | Price: $${increasedPrice} | Color: ${toy.color}`;\\r\\n  displayCatalog.push(line);\\r\\n}\\r\\n\\r\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 741,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-05-29T01:14:44.566Z",
    "first_attempt": "2025-05-29T01:09:18.598Z",
    "last_attempt": "2025-05-29T01:14:44.566Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []        // \"Clothing\"\\nconst entertainment = []   // \"Movie\"\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nconst utilities = []       // \"Utility\"\\nconst largePurchases = []  // Expenses over 100.00\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nlet averageExpense = 0\\n\\nlet type = \"\"\\nlet cost = \"\"\\n\\nfor (const expense of monthlyExpenses) {\\n    [type, cost] = expense.split(\":\")\\n    amountSpent = parseFloat(cost)\\n\\n    totalExpenses += amountSpent\\n\\n    if (expense.includes (\"Clothing\")){\\n        clothing.push(amountSpent)\\n    }\\n    else if (expense.includes (\"Movie\")) {\\n        entertainment.push(amountSpent)\\n    }\\n    else if (expense.includes (\"Fuel\")||expense.includes (\"Gas\")) {\\n        fuel.push(amountSpent)\\n    }\\n    else if (expense.includes (\"Utility\")) {\\n        utilities.push(amountSpent)\\n    }\\n    else if (expense.includes (\"Groceries\")||expense.includes(\"Restaurant\")) {\\n        food.push(amountSpent)\\n    }\\n    else if (expense.includes (\"Uber\")||expense.includes(\"Lyft\")){\\n        travel.push(amountSpent)\\n    }\\n\\n    if (amountSpent > 100) {\\n        largePurchases.push (amountSpent)\\n    }\\n}\\n\\naverageExpense = totalExpenses/monthlyExpenses.length\\n\\n/*\\n Use your algorithmic thinking for the steps to\\n categorize, total, and average the expenses.\\n\\n Be patient and take your time. This is challenging.\\n*/\\n\\nconsole.log(`My Total Monthly Expenses are ${totalExpenses}\\nMy Average Monthly Expenses are ${averageExpense}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 742,
  "fields": {
    "learner_github_id": "96952211",
    "learner_name": "Caleb  Pittman",
    "title": "Undefined",
    "slug": "flower-shop",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-05-29T01:38:57.532Z",
    "first_attempt": "2025-05-29T01:31:06.235Z",
    "last_attempt": "2025-05-29T01:38:57.532Z",
    "completed_code": "{'code': '\\r\\nconst flowers = [\\r\\n    {\\r\\n        id: 1,\\r\\n        type: \"Rose\",\\r\\n        colors: [\"White\", \"Red\", \"Violet\", \"Pink\", \"Black\", \"Yellow\"],\\r\\n        price: 2.59,\\r\\n        usdaZones: [3, 4, 5, 6, 7, 8, 9, 10]\\r\\n    },\\r\\n    {\\r\\n        id: 2,\\r\\n        type: \"Tulip\",\\r\\n        colors: [\"Orange\", \"White\", \"Yellow\", \"Violet\", \"Red\"],\\r\\n        price: 1.04,\\r\\n        usdaZones: [5, 6, 7, 8, 9]\\r\\n    },\\r\\n    {\\r\\n        id: 3,\\r\\n        type: \"Daisy\",\\r\\n        colors: [\"Gold\", \"White\", \"Orange\", \"Crimson\"],\\r\\n        price: 0.89,\\r\\n        usdaZones: [3, 4, 5, 6, 7, 8]\\r\\n    },\\r\\n    {\\r\\n        id: 4,\\r\\n        type: \"Carnation\",\\r\\n        colors: [\"Peach\", \"Yellow\", \"Magenta\", \"Pink\", \"Coral\"],\\r\\n        price: 1.59,\\r\\n        usdaZones: [5, 6, 7, 8, 9]\\r\\n    },\\r\\n    {\\r\\n        id: 5,\\r\\n        type: \"Bird of Paradise\",\\r\\n        colors: [\"Orange\", \"White\"],\\r\\n        price: 2.33,\\r\\n        usdaZones: [9, 10, 11]\\r\\n    },\\r\\n    {\\r\\n        id: 6,\\r\\n        type: \"Delphinium\",\\r\\n        colors: [\"Blue\", \"Violet\", \"White\", \"Pink\"],\\r\\n        price: 1.67,\\r\\n        usdaZones: [3, 4, 5, 6, 7]\\r\\n    },\\r\\n    {\\r\\n        id: 7,\\r\\n        type: \"Gladiolus\",\\r\\n        colors: [\"White\", \"Cream\", \"Yellow\", \"Red\", \"Pink\", \"Green\", \"Lavender\", \"Voilet\"],\\r\\n        price: 1.85,\\r\\n        usdaZones: [6, 7, 8, 9, 10]\\r\\n    },\\r\\n    {\\r\\n        id: 8,\\r\\n        type: \"Lilly\",\\r\\n        colors: [\"White\", \"Yellow\", \"Orange\", \"Red\", \"Pink\", \"Lavender\"],\\r\\n        price: 1.52,\\r\\n        usdaZones: [3, 4, 5, 6, 7, 8, 9]\\r\\n    },\\r\\n    {\\r\\n        id: 9,\\r\\n        type: \"Chinese Lantern\",\\r\\n        colors: [\"Orange\"],\\r\\n        price: 2.33,\\r\\n        usdaZones: [3, 4, 5, 6, 7, 8, 9]\\r\\n    }\\r\\n]\\r\\n\\r\\n/*\\r\\n    Below are some functions, in which you will write ALL of your\\r\\n    code. Do not modify the code that defines the functions, and\\r\\n    do not write any code outside of the functions.\\r\\n*/\\r\\n\\r\\n\\r\\n/*\\r\\n    This function should return inexpensive flowers - ones that cost\\r\\n    less than 2.00 per flower.\\r\\n*/\\r\\nconst inexpensiveFlowers = () => {\\r\\n    let filteredFlowers = []  // Do not modify\\r\\n\\r\\n\\r\\n    // Write your algorithm first, and then your code. Feel free to remove this comment\\r\\n    for (const flower of flowers) {\\r\\n        if (flower.price < 2.00) {\\r\\n            filteredFlowers.push(flower)\\r\\n        } \\r\\n    }\\r\\n    return filteredFlowers  // Do not modify\\r\\n\\r\\n}\\r\\n\\r\\n/*\\r\\n    This function should return flowers that grow in\\r\\n    USDA zones of 3 and 8.\\r\\n*/\\r\\nconst zoneFlowers = () => {\\r\\n    let filteredFlowers = []  // Do not modify\\r\\n\\r\\n\\r\\n    // Write your algorithm first, and then your code. Feel free to remove this comment\\r\\n\\r\\n    for (const flower of flowers) {\\r\\n        if (flower.usdaZones.includes(3) && flower.usdaZones.includes(8)) {\\r\\n            filteredFlowers.push(flower)\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    return filteredFlowers  // Do not modify\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/*\\r\\n    This function should return flowers that come in the color Orange\\r\\n*/\\r\\nconst orangeFlowers = () => {\\r\\n    let filteredFlowers = []  // Do not modify\\r\\n\\r\\n\\r\\n\\r\\n    // Write your algorithm first, and then your code. Feel free to remove this comment\\r\\n    for (const flower of flowers) {\\r\\n        if (flower.colors.includes(\"Orange\")) {\\r\\n            filteredFlowers.push(flower)\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    return filteredFlowers  // Do not modify\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/*\\r\\n    This function should return an HTML representation of each flower.\\r\\n\\r\\n    Expected string format:\\r\\n        <article>\\r\\n            <h1>Bird of Paradise</h1>\\r\\n\\r\\n            <h2>Colors</h2>\\r\\n            <section>White</section>\\r\\n            <section>Orange</section>\\r\\n\\r\\n            <h2>USDA Zones</h2>\\r\\n            <div>9</div>\\r\\n            <div>10</div>\\r\\n            <div>11</div>\\r\\n        </article>\\r\\n*/\\r\\nconst flowersAsHTML = () => {\\r\\n    let flowersHTMLString = \"\"  // Do not modify\\r\\n\\r\\n\\r\\n    /*\\r\\n        Algorithmic thinking is most important on this one.\\r\\n        We would rather see the correct algorithm than the\\r\\n        correct code. If you have code that works, but no\\r\\n        algorithm, then you failed the exercise.\\r\\n    */\\r\\n\\r\\n    for (const flower of flowers) {\\r\\n        flowersHTMLString += \\r\\n            `<article>\\r\\n                <h1>${flower.type}</h1>\\r\\n                \\r\\n                <h2>Colors</h2>\\r\\n                <section>`\\r\\n\\r\\n        flowersHTMLString += (flower.colors.join(\"</section>\\\\n<section>\"))\\r\\n        flowersHTMLString += (\"</section>\\\\n\\\\n<h2>USDA Zones</h2>\\\\n<div>\")\\r\\n        flowersHTMLString += (flower.usdaZones.join(\"</div>\\\\n<div>\"))\\r\\n        flowersHTMLString += (\"</div>\\\\n</article>\\\\n\")\\r\\n    }\\r\\n\\r\\n    return flowersHTMLString  // Do not modify\\r\\n}\\r\\n\\r\\n//console.log(inexpensiveFlowers());\\r\\n//console.log(zoneFlowers());\\r\\n//console.log(orangeFlowers());\\r\\nconsole.log(flowersAsHTML());\\r\\n\\r\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 743,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-29T13:45:58.911Z",
    "last_attempt": "2025-05-29T13:45:58.931Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 744,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-05-29T13:45:58.911Z",
    "last_attempt": "2025-05-29T13:45:58.911Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 745,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-30T00:46:10.304Z",
    "first_attempt": "2025-05-30T00:46:10.303Z",
    "last_attempt": "2025-05-30T00:46:10.304Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\ncalculateTotal(50)\\n// 2. Calculate total for $99.99\\ncalculateTotal(99.99)\\n// 3. Calculate total for $25.50\\ncalculateTotal(25.50)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 746,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-30T01:50:11.254Z",
    "first_attempt": "2025-05-30T01:50:11.240Z",
    "last_attempt": "2025-05-30T01:50:11.254Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(prayerName, score) {\\n    console.log(`${prayerName} scored ${score} points!`)\\n}\\n\\n// Then invoke the function with different player names and scores\\ndisplayGameScore(\"Mario\", 100)\\ndisplayGameScore(\"Herbert\", 120)\\ndisplayGameScore(\"Pollard\", 112)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 747,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-30T15:29:24.784Z",
    "first_attempt": null,
    "last_attempt": "2025-05-30T15:29:24.784Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 748,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-30T15:29:25.267Z",
    "first_attempt": null,
    "last_attempt": "2025-05-30T15:29:25.267Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 749,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-30T15:29:25.697Z",
    "first_attempt": null,
    "last_attempt": "2025-05-30T15:29:25.697Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 750,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-30T15:29:26.226Z",
    "first_attempt": null,
    "last_attempt": "2025-05-30T15:29:26.226Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 751,
  "fields": {
    "learner_github_id": "209552604",
    "learner_name": "Stephen",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-30T16:13:50.473Z",
    "first_attempt": "2025-05-30T16:13:50.472Z",
    "last_attempt": "2025-05-30T16:13:50.473Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  if (ingredient === \"egg\"){\\n    finishedFood.push(\"biscuit\")\\n  }\\n  else if (ingredient === \"beef patty\"){\\n    finishedFood.push(\"burger\")\\n  }\\n  else if (ingredient === \"potato\"){\\n    finishedFood.push(\"fries\")\\n  }\\n   /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n}\\n\\nconsole.log()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 752,
  "fields": {
    "learner_github_id": "209552604",
    "learner_name": "Stephen",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-30T16:31:18.404Z",
    "first_attempt": "2025-05-30T16:31:18.403Z",
    "last_attempt": "2025-05-30T16:31:18.404Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expenses of monthlyExpenses) {\\n  totalExpense += expenses\\n  // Add the current monthly cost to the value of totalExpense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 753,
  "fields": {
    "learner_github_id": "209552604",
    "learner_name": "Stephen",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-30T18:26:38.872Z",
    "first_attempt": "2025-05-30T18:26:38.871Z",
    "last_attempt": "2025-05-30T18:26:38.872Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 20, 45, 65, 30, 10, 80 ];\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0;\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\ntotalMiles += miles\\n};\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length;\\n\\nconsole.log(`\\nI average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.`\\n)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 754,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-30T20:50:34.956Z",
    "first_attempt": null,
    "last_attempt": "2025-05-30T20:50:34.956Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 755,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 14,
    "complete": true,
    "completed_on": "2025-05-31T15:48:35.313Z",
    "first_attempt": "2025-05-31T14:57:41.757Z",
    "last_attempt": "2025-05-31T15:48:35.313Z",
    "completed_code": "{'code': '// Converted to arrow functions\\n\\nconst add = (x, y) => x + y\\n\\nconst greet = (name) => `Hello, ${name}!`\\n\\nconst getRandomNumber = () => Math.random()\\n\\n// To test the functions by invoking them\\nconst number = add(5, 3);\\nconst msg = greet(\"Herbert\");\\nconst random = getRandomNumber();\\n\\nconsole.log(number, msg, random);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 756,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-05-31T16:08:44.728Z",
    "first_attempt": "2025-05-31T16:08:44.721Z",
    "last_attempt": "2025-05-31T16:08:44.728Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\nconst makeGreeting = (name) => `Hello, ${name}!`\\nconst greeting = makeGreeting(\"Herbert\"); // Stores the returned value\\n\\n\\n// Invoke the function and assign the return value to a variable\\n\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(greeting)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 757,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "CSS Selectors",
    "slug": "css-selectors",
    "attempts": 850,
    "complete": true,
    "completed_on": "2025-06-01T21:35:06.821Z",
    "first_attempt": "2025-06-01T13:35:17.188Z",
    "last_attempt": "2025-06-01T21:35:06.821Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\n#main-header {\\n  background-color: olive;\\n  color: gold;\\n  font-family: georgia;\\n  padding: 1em;\\n  text-align: center;\\n}\\n\\nbutton {\\n  color: red;\\n  background-color: gold;\\n}\\n\\nbody {\\ncolor: forestgreen;\\nfont-family: cursive;\\n}\\n\\n.example {\\n  color: olive;\\n}\\n\\nli {\\n  color: red\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 758,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-06-01T17:08:37.413Z",
    "first_attempt": "2025-06-01T15:59:51.554Z",
    "last_attempt": "2025-06-01T17:08:37.413Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\nlet februaryBill = 235\\nlet marchBill = 122\\nlet aprilBill = 144\\nlet mayBill = 147\\nlet juneBill = 166\\nlet julyBill = 188\\nlet augustBill = 155\\nlet septemberBill = 195\\nlet octoberBill = 198\\nlet novemberBill = 200\\nlet decemberBill = 205\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n\\n\\n\\nconsole.log(yearlyTotal)\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 759,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 15,
    "complete": true,
    "completed_on": "2025-06-01T17:53:39.389Z",
    "first_attempt": "2025-06-01T16:33:19.533Z",
    "last_attempt": "2025-06-01T17:53:39.389Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"2025 MacBook Pro\"\\nconst phone = \"Google Pixel 8Pro\"\\nconst television = \"55-inch Sony Bravio\"\\nconst refrigerator = \"Samsung Fridgeair\"\\n\\nconst allElectronics = `I have the following electronic devices. My ${television} television, my ${computer} computer, my ${refrigerator} refrigerator, and my ${phone} phone`\\n// Use string interpolation to create a sentence with all electronics\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 760,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-06-01T17:42:20.606Z",
    "first_attempt": "2025-06-01T17:30:13.902Z",
    "last_attempt": "2025-06-01T17:42:20.606Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 761,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-01T18:01:05.996Z",
    "first_attempt": "2025-06-01T18:00:24.082Z",
    "last_attempt": "2025-06-01T18:01:05.996Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 762,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-01T18:12:54.494Z",
    "first_attempt": "2025-06-01T18:11:59.979Z",
    "last_attempt": "2025-06-01T18:12:54.494Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 763,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-01T18:43:04.806Z",
    "first_attempt": "2025-06-01T18:17:41.967Z",
    "last_attempt": "2025-06-01T18:43:04.806Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome\\ncombinedIncome += spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome = combinedIncome - internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 764,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-01T18:27:30.606Z",
    "first_attempt": "2025-06-01T18:27:30.604Z",
    "last_attempt": "2025-06-01T18:27:30.606Z",
    "completed_code": "{'code': 'const topics = [\"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\"]\\n\\nfor (const type of topics) {\\n    console.log(type)\\n\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 765,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-01T18:59:05.054Z",
    "first_attempt": "2025-06-01T18:51:00.528Z",
    "last_attempt": "2025-06-01T18:59:05.054Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst combinedIncome = myIncome + spouseIncome\\nconst monthlyExpenses = phoneBill + mortgage + carInsurance + healthInsurance\\nconst netMonthlyIncome = combinedIncome - monthlyExpenses\\n\\n\\n\\nconst statement = `\\nOur combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${netMonthlyIncome}.`;  // Use backticks and calculations here'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 766,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-01T18:56:48.566Z",
    "first_attempt": "2025-06-01T18:56:48.565Z",
    "last_attempt": "2025-06-01T18:56:48.566Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor ([] of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 767,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-01T19:03:22.212Z",
    "first_attempt": "2025-06-01T19:03:22.212Z",
    "last_attempt": "2025-06-01T19:03:22.212Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n    if (ingredient === \"egg\") {\\n        finishedFood.push(\"biscuit\")\\n    }\\n    else if (ingredient === \"beef patty\") {\\n        finishedFood.push(\"burger\")\\n    }\\n    else if (ingredient === \"potato\") {\\n        finishedFood.push(\"fries\")\\n    }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 768,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-01T19:12:37.034Z",
    "first_attempt": "2025-06-01T19:12:21.413Z",
    "last_attempt": "2025-06-01T19:12:37.034Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const cost of monthlyExpenses) {\\n    totalExpense += cost\\n  // Add the current monthly cost to the value of totalExpense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 769,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-01T19:12:26.881Z",
    "first_attempt": "2025-06-01T19:12:26.880Z",
    "last_attempt": "2025-06-01T19:12:26.881Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \",\"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0,4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 770,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-01T19:17:29.320Z",
    "first_attempt": "2025-06-01T19:17:29.318Z",
    "last_attempt": "2025-06-01T19:17:29.320Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 771,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-01T19:38:16.916Z",
    "first_attempt": "2025-06-01T19:27:51.272Z",
    "last_attempt": "2025-06-01T19:38:16.916Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    // Add your code here\\n    torsoClothing = \\'t-shirt\\'\\n    legClothing = \\'shorts\\'\\n    footWear = \\'sandals\\'\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \\'t-shirt\\'\\n    legClothing = \\'shorts\\'\\n    footWear = \\'sneakers\\'\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \\'sweater\\'\\n    legClothing = \\'pants\\'\\n    footWear = \\'sneakers\\'\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \\'jacket\\'\\n    legClothing = \\'pants\\'\\n    footWear = \\'sneakers\\'\\n}\\nelse {\\n    torsoClothing = \\'jacket\\'\\n    legClothing = \\'pants\\'\\n    footWear = \\'boots\\'\\n}\\n\\n\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 772,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-01T19:38:18.088Z",
    "first_attempt": "2025-06-01T19:38:18.087Z",
    "last_attempt": "2025-06-01T19:38:18.088Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 21, 30, 17, 16, 22, 27, 19, 32, 28 ]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const mile of weeklyMiles) {\\n    totalMiles += mile\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 773,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 17,
    "complete": true,
    "completed_on": "2025-06-01T20:32:53.342Z",
    "first_attempt": "2025-06-01T20:09:06.202Z",
    "last_attempt": "2025-06-01T20:32:53.342Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\nconsole.log(output)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 774,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-01T21:35:15.203Z",
    "last_attempt": "2025-06-01T21:35:15.203Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 775,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-01T21:35:15.203Z",
    "last_attempt": "2025-06-01T21:35:15.217Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 776,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-05-28T17:29:42.011Z",
    "first_attempt": null,
    "last_attempt": "2025-05-28T17:29:42.011Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 777,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-02T17:47:10.376Z",
    "first_attempt": "2025-06-02T17:47:10.375Z",
    "last_attempt": "2025-06-02T17:47:10.376Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n   name: \"Jeremy Landy\",\\n   location: \"Phoenix, AR\",\\n   gender: \"male\",\\n   age: 31 \\n} '}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 778,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-02T17:54:10.945Z",
    "first_attempt": "2025-06-02T17:51:50.584Z",
    "last_attempt": "2025-06-02T17:54:10.945Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nlet februaryBill = 100\\nlet marchBill = 120\\nlet aprilBill = 145\\nlet mayBill = 200\\nlet juneBill = 60\\nlet julyBill = 150\\nlet augustBill = 50\\nlet septemberBill = 89\\nlet octoberBill = 200\\nlet novemberBill = 300\\nlet decemberBill = 400\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = februaryBill + januaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 779,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-02T18:01:57.339Z",
    "first_attempt": "2025-06-02T18:01:57.338Z",
    "last_attempt": "2025-06-02T18:01:57.339Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n    color: \"Purple\",\\n    stemLength: 14,\\n    growingSeason: \"Spring\",\\n    thorny: false\\n\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n    color: \"Red\",\\n    stemLength: 23,\\n    growingSeason: \"Summer\",\\n    thorny: true\\n\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 780,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-02T19:08:11.844Z",
    "first_attempt": "2025-06-02T18:15:18.418Z",
    "last_attempt": "2025-06-02T19:08:11.844Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Mcabook pro\"\\nconst phone = \"Iphone 14\"\\nconst television = \"50inch LG TV\"\\nconst refrigerator = \"LG\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My television ${television}, and my computer ${computer}, my refrigerator ${refrigerator}, and my phone ${phone}`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 781,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-02T19:02:39.968Z",
    "first_attempt": "2025-06-02T18:16:52.132Z",
    "last_attempt": "2025-06-02T19:02:39.968Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\nfor (const appointment of appointments) {\\n    schedule += `Patient ${appointment.firstName} ${appointment.lastName} has an appointment at ${appointment.appointmentTime}\\\\n`\\n}\\n\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 782,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-02T18:54:00.388Z",
    "first_attempt": "2025-06-02T18:29:59.927Z",
    "last_attempt": "2025-06-02T18:54:00.388Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 783,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-02T19:08:00.096Z",
    "first_attempt": "2025-06-02T19:07:23.453Z",
    "last_attempt": "2025-06-02T19:08:00.096Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 784,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-02T19:13:01.859Z",
    "first_attempt": "2025-06-02T19:13:01.859Z",
    "last_attempt": "2025-06-02T19:13:01.859Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \"Large Tank\"\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 785,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-02T20:01:13.690Z",
    "first_attempt": "2025-06-02T19:14:17.255Z",
    "last_attempt": "2025-06-02T20:01:13.690Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome\\ncombinedIncome += spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome = combinedIncome - internetBill \\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 786,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-02T19:19:21.864Z",
    "first_attempt": "2025-06-02T19:19:21.862Z",
    "last_attempt": "2025-06-02T19:19:21.864Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 787,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-02T19:29:15.604Z",
    "first_attempt": "2025-06-02T19:29:15.603Z",
    "last_attempt": "2025-06-02T19:29:15.604Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet() {\\n    console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 788,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-02T19:39:03.267Z",
    "first_attempt": "2025-06-02T19:39:03.266Z",
    "last_attempt": "2025-06-02T19:39:03.267Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore () {\\n    console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore ()\\ncelebrateScore ()\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 789,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-02T20:02:34.169Z",
    "first_attempt": "2025-06-02T19:56:35.679Z",
    "last_attempt": "2025-06-02T20:02:34.169Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreaterThanHundred(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayWelcomeMessage(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscountedPrice(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 790,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-02T23:41:46.979Z",
    "first_attempt": "2025-06-02T23:41:46.979Z",
    "last_attempt": "2025-06-02T23:41:46.980Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 791,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-02T23:42:19.133Z",
    "first_attempt": null,
    "last_attempt": "2025-06-02T23:42:19.133Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 792,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-02T23:42:21.106Z",
    "first_attempt": null,
    "last_attempt": "2025-06-02T23:42:21.106Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 793,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-02T23:42:53.569Z",
    "first_attempt": null,
    "last_attempt": "2025-06-02T23:42:53.569Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 794,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Undefined",
    "slug": "arrays-indices",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-07T03:11:01.813Z",
    "first_attempt": "2025-06-02T23:45:46.362Z",
    "last_attempt": "2025-07-07T03:11:01.813Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(`I am cleaning the following glasses:\\n- ${firstGlass}\\n- ${secondGlass}\\n- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 795,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-02T23:47:58.927Z",
    "first_attempt": null,
    "last_attempt": "2025-06-02T23:47:58.927Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 796,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-02T23:52:27.282Z",
    "first_attempt": "2025-06-02T23:52:06.747Z",
    "last_attempt": "2025-06-02T23:52:27.282Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const jsTopics of topics) {\\nconsole.log(jsTopics)\\n}\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 797,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Undefined",
    "slug": "arrays-push",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-07T03:13:14.400Z",
    "first_attempt": "2025-06-03T00:05:26.890Z",
    "last_attempt": "2025-07-07T03:13:14.400Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const mug of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 798,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T00:20:38.387Z",
    "first_attempt": "2025-06-03T00:20:38.385Z",
    "last_attempt": "2025-06-03T00:20:38.387Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n    if (ingredient === \"egg\") {\\n        finishedFood.push(\"biscuit\")\\n    }\\n    else if (ingredient === \"beef patty\") {\\n        finishedFood.push(\"burger\")\\n    }\\n    else if (ingredient === \"potato\") {\\n        finishedFood.push(\"fries\")\\n    }\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 799,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-03T00:34:22.720Z",
    "first_attempt": "2025-06-03T00:34:03.490Z",
    "last_attempt": "2025-06-03T00:34:22.720Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expenses of monthlyExpenses) {\\n    totalExpense += expenses\\n  // Add the current monthly cost to the value of totalExpense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 800,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T00:54:06.852Z",
    "first_attempt": "2025-06-03T00:53:57.451Z",
    "last_attempt": "2025-06-03T00:54:06.852Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 20, 45, 15, 40, 25 ]\\n\\n// Declare a variable to store the total. Initial value is 0.\\n\\nlet totalMiles = 0\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\n    totalMiles += miles\\n}\\n\\n// Declare a new variable to store the average miles over time\\n\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles} miles each week. \\nI have driven a total of ${totalMiles} miles.`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 801,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-03T01:06:35.357Z",
    "first_attempt": "2025-06-03T01:04:22.626Z",
    "last_attempt": "2025-06-03T01:06:35.357Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\n\\n\\n\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const numberOfHours of hours) {\\n if (numberOfHours < 7) {\\n     grumpyHours.push(numberOfHours)\\n }\\n    else {\\n    happyHours.push(numberOfHours)\\n    }\\n}\\n\\nconsole.log(`I was grumpy on ${grumpyHours.length} days.\\nI was happy on ${happyHours.length} days.`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 802,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T01:10:26.174Z",
    "first_attempt": "2025-06-03T01:10:26.172Z",
    "last_attempt": "2025-06-03T01:10:26.174Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\ndescribeActivity(\"running\")\\ndescribeActivity(\"swimming\")\\ndescribeActivity(\"drawing\")'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 803,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T01:19:20.740Z",
    "first_attempt": "2025-06-03T01:19:20.739Z",
    "last_attempt": "2025-06-03T01:19:20.740Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 804,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-03T01:27:03.355Z",
    "first_attempt": "2025-06-03T01:23:03.631Z",
    "last_attempt": "2025-06-03T01:27:03.355Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  // Add your logic here\\n  if (coffee.includes(\"light\")) {\\n    light++\\n  }\\n  else if (coffee.includes(\"medium\")) {\\n    medium++\\n  }\\n  else if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")) {\\n    toastyDark++\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 805,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T01:23:22.927Z",
    "first_attempt": "2025-06-03T01:23:22.925Z",
    "last_attempt": "2025-06-03T01:23:22.927Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 806,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T01:47:33.530Z",
    "first_attempt": "2025-06-03T01:47:33.529Z",
    "last_attempt": "2025-06-03T01:47:33.530Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 807,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T16:58:35.298Z",
    "first_attempt": "2025-06-03T16:58:35.297Z",
    "last_attempt": "2025-06-03T16:58:35.298Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `\\nOur combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.\\n`;  \\n\\nconsole.log(statement);\\n\\n// Use backticks and calculations here'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 808,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T16:59:48.930Z",
    "first_attempt": "2025-06-03T16:59:48.929Z",
    "last_attempt": "2025-06-03T16:59:48.930Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\n\\nlet februaryBill = 155\\nlet marchBill = 132\\nlet aprilBill = 98\\nlet mayBill = 87\\nlet juneBill = 203\\nlet julyBill = 187\\nlet augustBill = 198\\nlet septemberBill = 143\\nlet octoberBill = 112\\nlet novemberBill = 128\\nlet decemberBill = 159\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill +\\n                    aprilBill + mayBill + juneBill +\\n                    julyBill + augustBill + septemberBill +\\n                    octoberBill + novemberBill + decemberBill\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 809,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-03T17:10:34.510Z",
    "first_attempt": "2025-06-03T17:00:28.572Z",
    "last_attempt": "2025-06-03T17:10:34.510Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []        // \"Clothing\"\\nconst entertainment = []   // \"Movie\"\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nconst utilities = []       // \"Utility\"\\nconst largePurchases = []  // Expenses over 100.00\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nlet averageExpense = 0\\n\\nfor (const purchase of monthlyExpenses) {\\n    const [store, amount] = purchase.split(\":\");\\n    const numberAmount = parseFloat(amount);\\n\\n    if (store.includes(\"Clothing\")) {\\n        clothing.push(store)\\n    }\\n    if (store.includes(\"Movie\")) {\\n        entertainment.push(store)\\n    }\\n    if (store.includes(\"Groceries\") || store.includes(\"Restaurant\")) {\\n        food.push(store)\\n    }\\n    if (store.includes(\"Fuel\") || store.includes(\"Gas\")) {\\n        fuel.push(store)\\n    }\\n    if (store.includes(\"Lyft\") || store.includes(\"Uber\")) {\\n        travel.push(store)\\n    }\\n    if (store.includes(\"Utility\")) {\\n        utilities.push(store)\\n    }\\n    if (numberAmount>100) {\\n        largePurchases.push(numberAmount)\\n    }\\n\\n    totalExpenses += numberAmount;\\n    averageExpense = totalExpenses / monthlyExpenses.length;\\n}\\n\\nconsole.log(totalExpenses, averageExpense, clothing, entertainment, food, fuel, travel, utilities, largePurchases)\\n\\n/*\\n Use your algorithmic thinking for the steps to\\n categorize, total, and average the expenses.\\n\\n Be patient and take your time. This is challenging.\\n*/\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 810,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:01:50.196Z",
    "first_attempt": "2025-06-03T17:01:50.196Z",
    "last_attempt": "2025-06-03T17:01:50.196Z",
    "completed_code": "{'code': '\\nconst computer = \"2023 Macbook Pro\"\\nconst phone = \"iPhone 14 Pro\"\\nconst television = \"65-inch LG OLED\"\\nconst refrigerator = \"Samsung French Door\"\\n\\nconst allElectronics = (`I have the following electronic devices. My ${television} television, my ${computer} computer, my ${refrigerator} refrigerator, and my ${phone} phone`)\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 811,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-03T17:14:48.001Z",
    "first_attempt": "2025-06-03T17:10:08.498Z",
    "last_attempt": "2025-06-03T17:14:48.001Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim();\\nconst formattedPhone = phone.replace(\" \", \"-\");\\nconst formattedName = customerName.toUpperCase();\\nconst containsX = password.includes(\"x\");\\nconst fileStart = filename.substring(0, 4);\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 812,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-03T17:12:47.868Z",
    "first_attempt": "2025-06-03T17:11:59.254Z",
    "last_attempt": "2025-06-03T17:12:47.868Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 813,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:14:30.699Z",
    "first_attempt": "2025-06-03T17:14:30.699Z",
    "last_attempt": "2025-06-03T17:14:30.699Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\nconsole.log(statement)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 814,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:15:57.638Z",
    "first_attempt": "2025-06-03T17:15:57.637Z",
    "last_attempt": "2025-06-03T17:15:57.638Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 815,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:17:29.127Z",
    "first_attempt": "2025-06-03T17:17:29.126Z",
    "last_attempt": "2025-06-03T17:17:29.127Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse {\\n   console.log(\"Still sleeping\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 816,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:21:30.676Z",
    "first_attempt": "2025-06-03T17:21:30.676Z",
    "last_attempt": "2025-06-03T17:21:30.676Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n} else {\\n   console.log(\"I fell asleep on the couch after the 12th straight episode of The Office\")\\n}\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 817,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T17:23:39.963Z",
    "first_attempt": "2025-06-03T17:23:39.963Z",
    "last_attempt": "2025-06-03T17:23:39.963Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n   torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sandals\"\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"Sweater\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Boots\"\\n}\\n\\nconsole.log(`This is what I\\'m wearing today:\\n${torsoClothing} on my torso\\n${legClothing} on my legs\\n${footWear} on my feet\\n`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 818,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-03T17:33:29.327Z",
    "first_attempt": "2025-06-03T17:26:10.766Z",
    "last_attempt": "2025-06-03T17:33:29.327Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    // Add your code here\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n    console.log(`If the temperature is ${temperature} degrees or more, you will wear a ${torsoClothing}. You will wear ${legClothing}. You will wear ${footWear}.`)\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n   torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n    console.log(`If the temperature is ${temperature} degrees or more, you will wear a ${torsoClothing}. You will wear ${legClothing}. You will wear ${footWear}.`)\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n   torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n    console.log(`If the temperature is ${temperature} degrees or more, you will wear a ${torsoClothing}. You will wear ${legClothing}. You will wear ${footWear}.`)\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n   torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n    console.log(`If the temperature is ${temperature} degrees or more, you will wear a ${torsoClothing}. You will wear ${legClothing}. You will wear ${footWear}.`)\\n}\\nelse {\\n   torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\"\\n    console.log(`If the temperature is ${temperature} degrees or more, you will wear a ${torsoClothing}. You will wear ${legClothing}. You will wear ${footWear}.`)\\n}\\n\\n\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 819,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-03T17:56:30.653Z",
    "first_attempt": "2025-06-03T17:43:06.793Z",
    "last_attempt": "2025-06-12T15:24:30.632Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n}\\nelse if (totalPhotos < 110 && totalPhotos > 50){\\n   photoStorage = \"Shoe Box\"\\n}\\nelse {\\n   photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 820,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-03T18:32:30.811Z",
    "first_attempt": "2025-06-03T18:24:07.300Z",
    "last_attempt": "2025-06-03T18:32:30.811Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => {\\n    return quantity * price\\n}\\n\\n// Create calculateTotal here\\nconst calculateTotal = (subtotal) => {\\nconst taxRate = 0.08\\nconst withTax = subtotal * taxRate\\nconst finalTotal = subtotal + withTax\\nreturn finalTotal\\n}\\n\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst itemSubtotal = calculateSubtotal(3, 4.99)\\n\\n// 2. Calculate the final total with tax\\nconst finalAmountWithTax = calculateTotal(itemSubtotal)\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $${itemSubtotal.toFixed(2)}`)\\nconsole.log(`Total with tax: $${finalAmountWithTax.toFixed(2)}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 821,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-03T18:31:05.995Z",
    "first_attempt": "2025-06-03T18:30:55.782Z",
    "last_attempt": "2025-06-03T18:31:05.995Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 822,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-03T19:22:40.835Z",
    "first_attempt": "2025-06-03T19:05:59.828Z",
    "last_attempt": "2025-06-03T19:22:40.835Z",
    "completed_code": "{'code': '// Create your arrow function here\\nconst calculateGameScore = (basePoints, bunusMultiplier) => {\\n    // to calculate total points\\n    const totalPoints = basePoints * bunusMultiplier\\n    // to return High score! if total is 1000 or more, otherwise it should returns Keep trying!\\n    if (totalPoints >= 1000) {\\n        return \"High Score!\"\\n    } else {return \"Keep trying!\"}\\n\\n}\\n// Call your function with different values and store a result in a variable\\n// testing with 500 base point * 2.5 multiplier for >= 1000 should return \"high score!\" \\nconst outcome1 = calculateGameScore(500, 2.5)\\n\\n// testing with 300 base points * 1.5 multiplier for < 1000 should return keep trying!\\nconst outcome2 = calculateGameScore(300, 1.5)\\n\\n// testing with 400 base points * 2.5 multiplier for exactly 1000 should return high score! if exactly 1000\\nconst outcome3 = calculateGameScore(400, 2.5)\\n\\n// Log the result to see the output\\nconsole.log(`Test 1: ${outcome1}`)\\nconsole.log(`Test 2: ${outcome2}`)\\nconsole.log(`Test 3: ${outcome3}`)\\n  '}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 823,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "CSS Selectors",
    "slug": "css-selectors",
    "attempts": 532,
    "complete": true,
    "completed_on": "2025-06-05T17:11:57.097Z",
    "first_attempt": "2025-06-03T19:28:54.194Z",
    "last_attempt": "2025-06-05T17:14:56.827Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\np {\\n  font-size: 1.1em\\n  margin-buttom: 1em\\n}\\n.highlight {\\n  background-color: yellow\\n  border: 5px\\n}\\nsection {\\n  h2 {\\n    font-weight: bold\\n    text-align: center\\n  }\\n}\\nfooter {\\n  margin-top: 40px\\n  font-size: 0.9em\\n}\\n#unique-content {\\n  background-color: #FFEBCD\\n  background-size: cover\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 824,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "CSS Selectors",
    "slug": "functions-scope-basics",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-04T11:03:38.439Z",
    "first_attempt": "2025-06-03T19:29:13.074Z",
    "last_attempt": "2025-06-04T11:03:38.439Z",
    "completed_code": "{'code': 'let score = 0\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 825,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-03T20:18:47.070Z",
    "first_attempt": "2025-06-03T20:18:47.070Z",
    "last_attempt": "2025-06-03T20:18:47.070Z",
    "completed_code": "{'code': 'const calculateTicketPrice = (age, isWeekend) => {\\n      let price = 10\\n\\n      // Add weekend surcharge first\\n      if (isWeekend) {\\n          price += 2\\n      }\\n\\n      // Apply age discount if applicable\\n      if (age < 12 || age >= 65) {\\n          price = price * 0.5\\n      }\\n\\n      return price\\n  }\\n\\nconst adultTicketPrice = calculateTicketPrice(24, false)\\n\\nconsole.log(adultTicketPrice)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 826,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-03T22:31:06.409Z",
    "first_attempt": null,
    "last_attempt": "2025-06-03T22:31:06.409Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 827,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-03T22:31:07.106Z",
    "first_attempt": null,
    "last_attempt": "2025-06-03T22:31:07.106Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 828,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-03T22:32:37.719Z",
    "first_attempt": null,
    "last_attempt": "2025-06-03T22:32:37.719Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 829,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Undefined",
    "slug": "variables-intro",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-13T02:59:49.731Z",
    "first_attempt": "2025-06-04T00:07:26.123Z",
    "last_attempt": "2025-06-13T02:59:49.731Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 125\\nlet marchBill = 123\\nlet aprilBill = 123\\nlet mayBill = 198\\nlet juneBill = 123\\nlet julyBill = 125\\nlet augustBill = 120\\nlet septemberBill = 123\\nlet octoberBill = 133\\nlet novemberBill = 123\\nlet decemberBill = 122\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill\\n+ juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 830,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-04T11:59:26.880Z",
    "first_attempt": "2025-06-04T11:47:15.159Z",
    "last_attempt": "2025-06-04T11:59:26.880Z",
    "completed_code": "{'code': 'let highScore = 0\\nconst checkHighScore = (playerName, score) => {\\n    if (score > highScore) {\\n        highScore = score\\n        return `${playerName} new high score is ${highScore}!`\\n    }\\n    else {\\n        return `${playerName} scored ${score} and did not beat the high score.\\n        current high score is ${highScore}.`\\n    }\\n}\\nconsole.log(checkHighScore(\"Alice\",50))\\nconsole.log(checkHighScore(\"Herbert\",75))\\nconsole.log(checkHighScore(\"Pollard\",40))\\nconsole.log(checkHighScore(\"Esther\",100))\\nconsole.log(checkHighScore(\"Micheal\",60))'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 831,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-container",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-04T13:21:14.628Z",
    "last_attempt": "2025-06-04T13:21:14.645Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 832,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-container",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-04T13:21:14.628Z",
    "last_attempt": "2025-06-04T13:21:14.628Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 833,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 36,
    "complete": true,
    "completed_on": "2025-06-04T15:36:43.144Z",
    "first_attempt": "2025-06-04T13:56:30.807Z",
    "last_attempt": "2025-06-04T15:36:43.144Z",
    "completed_code": "{'code': 'const calculateTicketPrice = (age, isWeekend) => {\\n      let price = 10\\n\\n      // Add weekend surcharge first\\n      if (isWeekend) {\\n          price += 2\\n      }\\n\\n      // Apply age discount if applicable\\n      if (age < 12 || age >= 65) {\\n          price = price * 0.5\\n      }\\n\\n      return price\\n  }\\n\\n// Test cases\\nconst adultWeekdayPrice = calculateTicketPrice(25, false)\\nconst childWeekendPrice = calculateTicketPrice(8, true)\\nconst seniorWeekdayPrice = calculateTicketPrice(70, false)\\nconst seniorWeekendPrice = calculateTicketPrice(70, true)\\n\\nconsole.log(adultWeekdayPrice)\\nconsole.log(childWeekendPrice)\\nconsole.log(seniorWeekdayPrice)\\nconsole.log(seniorWeekendPrice)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 834,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-04T16:09:34.884Z",
    "first_attempt": "2025-06-04T15:50:49.778Z",
    "last_attempt": "2025-06-04T16:09:34.885Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n  let total = 0\\n  for (let price of prices) {\\n        total += price\\n  }\\n\\n  if (total > 100) {\\n    total *= 0.90\\n  }\\n\\n  return total\\n}\\n\\nconst cart1Prices = [10, 20, 30, 15]\\nconst cart1Total = calculateCartTotal(cart1Prices)\\nconsole.log(`Cart 1 Total: $${cart1Total.toFixed(2)}`)\\n\\nconst cart2Prices = [50, 30, 40, 25]\\nconst cart2Total = calculateCartTotal(cart2Prices)\\nconsole.log(`Cart 2 Total: $${cart2Total.toFixed(2)}`)\\n\\nconst cart3Prices = []\\nconst cart3Total = calculateCartTotal(cart3Prices)\\nconsole.log(`Cart 3 Total: $${cart3Total.toFixed(2)}`)\\n\\nconst cart4Prices = [50, 50]\\nconst cart4Total = calculateCartTotal(cart4Prices)\\nconsole.log(`Cart 4 Total: $${cart4Total.toFixed(2)}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 835,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-04T16:20:02.473Z",
    "first_attempt": "2025-06-04T16:19:52.832Z",
    "last_attempt": "2025-06-04T16:20:02.473Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    return time * 100 + targets * 50\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    return targets > 10 ? 1000 : 0\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n    const basePoints = calculateBasePoints(time, targets)\\n    const bonusPoints = calculateBonus(targets)\\n\\n    // Add the results together and return the sum\\n    return basePoints + bonusPoints\\n}\\n\\n// Invoke calculateFinalScore with time=2 and targets=5,store the result, then log it\\nconst gameScore = calculateFinalScore(2, 5)\\nconsole.log(gameScore)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 836,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 549,
    "complete": true,
    "completed_on": "2025-06-05T14:28:44.955Z",
    "first_attempt": "2025-06-04T16:20:19.839Z",
    "last_attempt": "2025-06-05T14:30:50.315Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n      <title>My Developer Journey</title>\\n</head>\\n<body>\\n    <h1>How I Became A Software Developer</h1>\\n\\n    <article>\\n        <h2>Nashville Software School</h2>\\n        <section>\\n            <p>I attended Nashville Software School to gain the necessary skills to become a software developer. It was an intensive program that covered a wide range of topics, preparing me for a career in tech.</p>\\n        </section>\\n\\n        <section>\\n            <p>I learned the following skills</p>\\n            <ol>\\n                <li>Variables</li>\\n                <li>Arrays</li>\\n                <li>Objects</li>\\n                <li>Functions</li>\\n                <li>HTML</li>\\n                <li>CSS</li>\\n              </ol>\\n        </section>\\n    </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 837,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Introduction to HTML",
    "slug": "functions-review",
    "attempts": 13,
    "complete": true,
    "completed_on": "2025-06-04T16:51:12.320Z",
    "first_attempt": "2025-06-04T16:20:41.602Z",
    "last_attempt": "2025-06-04T16:51:23.577Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  if (time === \"morning\" || name.startsWith(\"A\")) {\\n    return `Good morning, ${name}!`\\n  }\\n  \\n  // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  if (time === \"afternoon\") {\\n    return `Good afternoon, ${name}!`\\n  }\\n\\n  // Otherwise, return \"Hello, [name]!\"\\n  return `Hello, ${name}!`\\n}\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  // If topic is \"weather\", return the weather joke\\n  if (topic === \"weather\") {\\n    return \"What do you call a stormy robot? A thunder-bot!\"\\n  }\\n  \\n  // If topic is \"animals\", return the animals joke\\n  if (topic === \"animals\") {\\n    return \"Why did the dog go to the zoo? To find some bones!\"\\n  }\\n\\n  // Otherwise, return the default joke\\n  return \"Why was the robot tired? Because it had too many data to process!\"\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n  let greetingsArray = []\\n\\n  // Loop through each person in the people array\\n  for (let person of people) {\\n    // Create a greeting for each person\\n    let greeting = createGreeting(person, time)\\n    \\n    // Add the greeting to the array\\n    greetingsArray.push(greeting)\\n  }\\n\\n  // Return the array of greetings\\n  return greetingsArray\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n  const greeting = createGreeting(name, time)\\n\\n  // Get the joke\\n  const joke = tellJoke(topic)\\n\\n  // Return both together\\n  return `${greeting} ${joke}`\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\")\\nconsole.log(greeting)\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\")\\nconsole.log(joke)\\n\\n// Greet multiple people\\nconst people = [\"Herbert\", \"Pollard\", \"Alexander\"]\\nconst greetings = greetPeople(people, \"afternoon\")\\nconsole.log(greetings)\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Herbert\", \"afternoon\", \"animals\")\\nconsole.log(interaction)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 838,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-04T16:44:30.191Z",
    "first_attempt": "2025-06-04T16:38:45.292Z",
    "last_attempt": "2025-06-04T16:44:30.191Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const study of topics) {\\nconsole.log(study)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 839,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Introduction to HTML",
    "slug": "html-elements",
    "attempts": 587,
    "complete": true,
    "completed_on": "2025-06-05T15:16:56.813Z",
    "first_attempt": "2025-06-04T16:57:30.355Z",
    "last_attempt": "2025-06-05T15:17:43.739Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n\\n  <main>\\n    <article>\\n      <h1>Herbert</h1>\\n\\n      <section>\\n            <p>I worked with nasa in 2022</p>\\n      </section>\\n\\n      <section>\\n        <p>I am driven to become a software developer because i love solving\\n          complex problems and continious learning</p>\\n      </section>\\n    </article>\\n  <main/>\\n\\n  <footer>\\n    <p>&copy; 2025 Herbert Pollard, herbert_pollard119@outlook.com         \\n\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 840,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "CSS Basics",
    "slug": "flexbox-intro",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-04T16:57:33.543Z",
    "last_attempt": "2025-06-04T16:57:33.543Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 841,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "CSS Basics",
    "slug": "flexbox-intro",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-04T16:57:33.543Z",
    "last_attempt": "2025-06-04T16:57:33.579Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 842,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-container",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-04T16:57:34.799Z",
    "last_attempt": "2025-06-04T16:57:34.799Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 843,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-container",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-04T16:57:34.799Z",
    "last_attempt": "2025-06-04T16:57:34.832Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 844,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 810,
    "complete": true,
    "completed_on": "2025-06-05T15:57:21.755Z",
    "first_attempt": "2025-06-04T16:57:32.019Z",
    "last_attempt": "2025-06-05T15:57:21.755Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\nbody {\\n  background-color: lightblue\\n}\\n  article {\\n  border: 1px solid black\\n  padding: 1rem\\n  }\\n\\np {\\n  color: purple\\n}\\nimg {\\n  height: 10rem\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 845,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 167,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-04T16:57:38.231Z",
    "last_attempt": "2025-06-06T00:58:35.276Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 846,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Introduction to HTML",
    "slug": "leonids-data-types",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-06T17:53:41.474Z",
    "first_attempt": "2025-06-04T16:57:51.017Z",
    "last_attempt": "2025-06-06T17:53:41.474Z",
    "completed_code": "{'code': 'function createToy(name, category, ageRecommendation, isBatteryOperated, features, dimensions) {\\n    return {\\n        name,\\n        category,\\n        ageRecommendation,\\n        isBatteryOperated,\\n        features,\\n        dimensions\\n    };\\n}\\n\\n// TODO: Call createToy with the correct data types\\nconst myToy = createToy(\\n    \"Super Robot\",                 // name: string\\n    \"Action Figures\",              // category: string\\n    8,                             // ageRecommendation: number\\n    true,                          // isBatteryOperated: boolean\\n    [\"lights\", \"sounds\", \"movable parts\"], // features: array of strings\\n    { width: 15, height: 25 }      // dimensions: object with number properties\\n)\\nconsole.log(myToy)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 847,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-04T18:08:41.212Z",
    "first_attempt": "2025-06-04T17:02:49.909Z",
    "last_attempt": "2025-06-04T18:08:41.212Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunk of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 848,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-04T18:19:41.416Z",
    "first_attempt": "2025-06-04T18:19:41.414Z",
    "last_attempt": "2025-06-04T18:19:41.416Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n    if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n  }\\n  else if (ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\")\\n  }\\n  else if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\")\\n  }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 849,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-04T18:34:38.969Z",
    "first_attempt": "2025-06-04T18:34:38.967Z",
    "last_attempt": "2025-06-04T18:34:38.969Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const groceries of monthlyExpenses) {\\n  // Add the current monthly cost to the value of totalExpense\\n  totalExpense += groceries\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 850,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-04T18:43:51.044Z",
    "first_attempt": "2025-06-04T18:41:01.104Z",
    "last_attempt": "2025-06-04T18:43:51.044Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 25, 59, 34, 29, 27 ]\\nlet totalMiles = 0\\n\\n// Declare a variable to store the total. Initial value is 0.\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles){\\n totalMiles += miles\\n}\\nconst averageMiles = totalMiles / weeklyMiles.length\\n// Declare a new variable to store the average miles over time\\nconsole.log(`I average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 851,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-04T19:28:58.817Z",
    "first_attempt": "2025-06-04T19:20:01.204Z",
    "last_attempt": "2025-06-04T19:28:58.817Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      let total = 0\\n\\n      for (const price of prices) {\\n          // Add each price to the total\\n          total += price\\n      }\\n\\n      if (total > 100) {\\n          total = total * 0.9    // Apply 10% discount\\n      }\\n\\n      return total\\n  }\\n\\n  // Invoke the function and display results\\n  const smallCartTotal = calculateCartTotal([20, 30, 40]);\\n  console.log(smallCartTotal);  // Displays: 90\\n\\n  const largeCartTotal = calculateCartTotal([50, 60, 70]);\\n  console.log(largeCartTotal)\\n\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 852,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-04T20:59:40.721Z",
    "first_attempt": "2025-06-04T20:59:40.720Z",
    "last_attempt": "2025-06-04T20:59:40.721Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    return (time * 100) + (targets * 50)\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    if (targets > 10) {\\n        return 1000\\n    }\\n    return 0\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n    const basePoints = calculateBasePoints(time, targets)\\n    const bonus = calculateBonus(targets)\\n    return basePoints + bonus\\n    // Add the results together and return the sum\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\nconst finalScoreNoBonus = calculateFinalScore(2, 12)\\nconsole.log(finalScoreNoBonus)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 853,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Flexbox Item Properties",
    "slug": "flexbox-items",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-05T01:12:26.255Z",
    "last_attempt": "2025-06-05T01:12:26.270Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 854,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Flexbox Item Properties",
    "slug": "flexbox-items",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-05T01:12:26.255Z",
    "last_attempt": "2025-06-05T01:12:26.255Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 855,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-05T15:14:45.950Z",
    "first_attempt": null,
    "last_attempt": "2025-06-05T15:14:45.950Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 856,
  "fields": {
    "learner_github_id": "190438557",
    "learner_name": "Jaiden Rothrock",
    "title": "Undefined",
    "slug": "functions-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-05T16:17:44.462Z",
    "first_attempt": "2025-06-05T16:17:44.461Z",
    "last_attempt": "2025-06-05T16:17:44.462Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  if (time === `morning` || name.startsWith(\"A\")) {\\n    return `Good morning, ${name}!`\\n  } else \\n  if (time === `afternoon`) {\\n    return `Good afternoon, ${name}!`\\n  } else {\\n    return `Hello, ${name}!`\\n  }\\n}\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  if (topic === \"weather\") {\\n    return `What do you call a stormy robot? A thunder-bot!`\\n  } else \\n  if (topic === \"animals\") {\\n    return `Why did the robot go to the zoo? To study creature features!`\\n  } else {\\n    return `Why was the robot tired? Because it had too many bytes!`\\n  }\\n}\\n\\nconst greetPeople = (people, time) => {\\n  const allGreetings = [];\\n  for (const person of people) {\\n    const personGreeting = createGreeting(person, time);\\n    allGreetings.push(personGreeting);\\n  }\\n\\n  // Return the array of greetings\\n  return allGreetings;\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n  const greeting = createGreeting(name, time)\\n  // Get the joke\\n  const getJoke = tellJoke(topic)\\n  // Return both together\\n  return `${greeting} ${getJoke}`\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 857,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-05T19:15:57.067Z",
    "first_attempt": "2025-06-05T19:15:57.066Z",
    "last_attempt": "2025-06-05T19:15:57.067Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n  color : \"Purple\",\\n  stemLength : 14,\\n  growingSeason : \"Spring\",\\n  thorny : false\\n\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n  color : \"Yellow\",\\n  stemLength : 12,\\n  growingSeason : \"Spring\",\\n  thorny : true\\n\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 858,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-05T19:46:48.645Z",
    "first_attempt": "2025-06-05T19:44:47.197Z",
    "last_attempt": "2025-06-05T19:46:48.645Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\nfor (const appointmentsObject of appointments) {\\n  schedule += `Patient ${appointmentsObject.firstName} ${appointmentsObject.lastName} has an appointment at ${appointmentsObject.appointmentTime}\\\\n`\\n}\\n\\n// Add your code here to iterate the array and build the string\\n\\n\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 859,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-05T19:51:37.679Z",
    "first_attempt": "2025-06-05T19:51:37.678Z",
    "last_attempt": "2025-06-05T19:51:37.679Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 860,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-05T19:56:31.354Z",
    "first_attempt": "2025-06-05T19:56:31.353Z",
    "last_attempt": "2025-06-05T19:56:31.354Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 861,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-05T19:59:06.100Z",
    "first_attempt": "2025-06-05T19:59:06.100Z",
    "last_attempt": "2025-06-05T19:59:06.100Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\ngoldfish.location = \"Large Tank\"\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 862,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-06-05T20:40:02.118Z",
    "first_attempt": "2025-06-05T20:22:33.663Z",
    "last_attempt": "2025-06-05T20:40:02.118Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 863,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-05T20:44:09.314Z",
    "first_attempt": "2025-06-05T20:44:09.314Z",
    "last_attempt": "2025-06-05T20:44:09.314Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet () {\\n  console.log(\"Good dog!\")\\n}\\n\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 864,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-05T20:48:02.356Z",
    "first_attempt": "2025-06-05T20:48:02.355Z",
    "last_attempt": "2025-06-05T20:48:02.356Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore () {\\n  console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore ()\\ncelebrateScore ()\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 865,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-05T21:00:12.287Z",
    "first_attempt": "2025-06-05T20:56:42.208Z",
    "last_attempt": "2025-06-05T21:00:12.287Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreater(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction showGreeting(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscount(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 866,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-05T21:27:58.667Z",
    "first_attempt": "2025-06-05T21:27:16.997Z",
    "last_attempt": "2025-06-05T21:27:58.667Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 867,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-05T22:04:48.012Z",
    "first_attempt": "2025-06-05T22:04:26.319Z",
    "last_attempt": "2025-06-05T22:04:48.012Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50 \\ncalculateTotal(50)\\n// 2. Calculate total for $99.99\\ncalculateTotal(99.99)\\n// 3. Calculate total for $25.50\\ncalculateTotal(25.50)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 868,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-05T23:09:07.187Z",
    "first_attempt": "2025-06-05T23:09:07.186Z",
    "last_attempt": "2025-06-05T23:09:07.187Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\nfor (const hour of hours)\\n   if (hour >= 7){\\n      happyHours.push(hour)\\n   }\\n      else{\\n         grumpyHours.push(hour)\\n      }\\n   console.log(`\\n   I was grumpy for ${grumpyHours} hours.\\n   I was happy for ${happyHours} hours.\\n   `)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 869,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-05T23:59:12.213Z",
    "first_attempt": "2025-06-05T23:51:43.840Z",
    "last_attempt": "2025-06-05T23:59:12.213Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  // Add your logic here\\n  if (coffee.includes(\"light\"))\\n  light++\\n  else if (coffee.includes(\"medium\"))\\n  medium++\\n  else if (coffee.includes(\"toasty\"))\\n  toastyDark++\\n  else if (coffee.includes(\"dark\"))\\n  toastyDark++\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `\\nI need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 870,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-06T03:39:41.804Z",
    "first_attempt": "2025-06-06T03:39:41.802Z",
    "last_attempt": "2025-06-06T03:39:41.804Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(name, score) {\\n  console.log(`${name} scored ${score} points!`)\\n\\n}\\ndisplayGameScore(\"Mario\", 100)\\n// Then invoke the function with different player names and scores\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 871,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-06T04:15:08.331Z",
    "first_attempt": "2025-06-06T03:46:52.387Z",
    "last_attempt": "2025-06-06T04:15:08.331Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 200\\nlet marchBill = 150\\nlet aprilBill = 175\\nlet mayBill = 115\\nlet juneBill = 125\\nlet julyBill = 145\\nlet augustBill = 135\\nlet septemberBill = 140\\nlet octoberBill = 2000\\nlet novemberBill = 100\\nlet decemberBill = 115\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nlet yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 872,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-06T18:53:33.264Z",
    "first_attempt": "2025-06-06T18:48:16.686Z",
    "last_attempt": "2025-06-06T18:53:33.264Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"2025 MacBook Pro\"\\nconst phone = \"iPhone 16\"\\nconst television = \"45-inch Samsung\"\\nconst refrigerator = \"IDK\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 873,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Data Structures",
    "slug": "leonids-data-structures",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-06T18:55:14.761Z",
    "first_attempt": "2025-06-06T18:55:14.746Z",
    "last_attempt": "2025-06-06T18:55:14.761Z",
    "completed_code": "{'code': 'const inventory = [\\n  { id: 101, name: \"Hand-Carved Wooden Train\", maker: \"Leonid\" },\\n  { id: 102, name: \"Painted Rocking Horse\", maker: \"Leonid\" },\\n  { id: 103, name: \"Stuffed Bear with Bow Tie\", maker: \"Leonid\" },\\n  { id: 104, name: \"Miniature Sailboat\", maker: \"Leonid\" },\\n  { id: 105, name: \"Patchwork Doll\", maker: \"Leonid\" },\\n  { id: 106, name: \"Wooden Puzzle Box\", maker: \"Leonid\" },\\n  { id: 107, name: \"Knitted Sock Monkey\", maker: \"Leonid\" },\\n  { id: 108, name: \"Spinning Top\", maker: \"Leonid\" },\\n  { id: 109, name: \"Tiny Puppet Theater\", maker: \"Leonid\" },\\n  { id: 110, name: \"Hand-Painted Marbles\", maker: \"Leonid\" },\\n  { id: 111, name: \"Fabric Kite with Tail\", maker: \"Leonid\" },\\n  { id: 112, name: \"Wool-Stuffed Bunny\", maker: \"Leonid\" },\\n  { id: 113, name: \"Wooden Xylophone\", maker: \"Leonid\" },\\n  { id: 114, name: \"Tin Wind-Up Robot\", maker: \"Leonid\" },\\n  { id: 115, name: \"Miniature Toy Chest\", maker: \"Leonid\" }\\n];\\n\\nfunction findToyById(toys, id) {\\n  return toys.find(toy => toy.id === id) || null;\\n}\\n\\n// Example usage:\\nconsole.log(findToyById(inventory, 104)); // Output: { id: 104, name: \"Miniature Sailboat\", maker: \"Leonid\" }\\nconsole.log(findToyById(inventory, 120)); // Output: null'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 874,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Representing Toys as Objects",
    "slug": "leonids-objects",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-06T19:09:38.132Z",
    "first_attempt": "2025-06-06T19:00:09.132Z",
    "last_attempt": "2025-06-06T19:09:38.132Z",
    "completed_code": "{'code': 'const woodenTrain = {\\n    name: \"Hand-Carved Wooden Train\",\\n    manufacturer: \"PollardH\",\\n    priceInDollars: 25.99,\\n    inStock: true,\\n    recommendedAgeRange: \"3+ years\",\\n    weightInGrams: null // Weight information unavailable\\n};\\n\\nconst stuffedRabbit = {\\n    name: \"Wool-Stuffed Bunny\",\\n    manufacturer: \"HerbertPollard\",\\n    priceInDollars: null, // Price unknown\\n    inStock: false,\\n    recommendedAgeRange: \"2+ years\",\\n    weightInGrams: 300\\n};\\n\\nconst kite = {\\n    name: \"Fabric Kite with Tail\",\\n    manufacturer: null, // Manufacturer unknown\\n    priceInDollars: 15.50,\\n    inStock: true,\\n    recommendedAgeRange: \"5+ years\",\\n    weightInGrams: 450\\n};\\n\\n// testing usage\\nconsole.log(woodenTrain);\\nconsole.log(stuffedRabbit);\\nconsole.log(kite);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 875,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-06T19:07:49.073Z",
    "first_attempt": "2025-06-06T19:07:08.681Z",
    "last_attempt": "2025-06-06T19:07:49.073Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\");\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = \"<div>\" + disorderArray.join(\"</div><div>\") + \"</div>\"\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 876,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Toy Collection",
    "slug": "leonids-arrays",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-06T19:32:50.202Z",
    "first_attempt": "2025-06-06T19:29:53.059Z",
    "last_attempt": "2025-06-06T19:32:50.202Z",
    "completed_code": "{'code': 'const toyInventory = [\\n    {\\n        id: 1,\\n        name: \"Rocket Racer\",\\n        manufacturer: \"Speedy Toys Inc.\",\\n        priceInDollars: 29.99,\\n        ageRecommendation: \"5+ years\",\\n        isBatteryOperated: true\\n    },\\n    {\\n        id: 2,\\n        name: \"Kongfu Panda\",\\n        manufacturer: \"Herbert Creations\",\\n        priceInDollars: 19.99,\\n        material: \"Ultra-soft cotton\",\\n        isMachineWashable: true\\n    },\\n    {\\n        id: 3,\\n        name: \"Mystic Puzzle Cube\",\\n        manufacturer: \"BrainTeasers Ltd.\",\\n        priceInDollars: null, // Price is currently unknown\\n        weight: \"100G\",\\n        numberOfPieces: 100\\n    }\\n]    \\nconsole.log(toyInventory)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 877,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-06T19:54:00.820Z",
    "first_attempt": "2025-06-06T19:28:09.845Z",
    "last_attempt": "2025-06-06T19:54:00.820Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\", \"Utility Internet:85\", \"Old Navy Clothing:145\",\\n    \"Lyft:34\", \"Utility Electric:91\", \"Clothing Outlet:122\", \"Fast Food Restaurant:18\", \"Shell Fuel:42\",\\n    \"Movie Theater:44\", \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\", \"Gas Station:31\",\\n    \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\", \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Create arrays for each category of expenses\\nconst clothing = []\\nconst entertainment = []\\nconst food = []\\nconst fuel = []\\nconst travel = []\\nconst utilities = []\\nconst largePurchases = []\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nlet averageExpense = 0\\n\\n\\n// Process each expense\\nfor (const expense of monthlyExpenses) {\\n    // Split the expense into vendor and amount\\n    const [vendor, amount] = expense.split(\":\")\\n    const cost = parseFloat(amount)\\n\\n    // Add to total\\n    totalExpenses += cost\\n\\n    // Check amount for large purchases\\n    if (cost > 100.00) {\\n        largePurchases.push(cost)\\n    }\\n\\n    // Categorize based on vendor\\n    if (vendor.includes(\"Clothing\")) {\\n        clothing.push(cost)\\n    }\\n    else if (vendor.includes(\"Movie\")) {\\n        entertainment.push(cost)\\n    }\\n    else if (vendor.includes(\"Fuel\") || vendor.includes(\"Gas\")) {\\n        fuel.push(cost)\\n    }\\n    else if (vendor.includes(\"Utility\")) {\\n        utilities.push(cost)\\n    }\\n    else if (vendor.includes(\"Groceries\") || vendor.includes(\"Restaurant\")) {\\n        food.push(cost)\\n    }\\n    else if (vendor.includes(\"Lyft\") || vendor.includes(\"Uber\")) {\\n        travel.push(cost)\\n    }\\n}\\n\\n// Calculate the average\\naverageExpense = totalExpenses / monthlyExpenses.length\\n\\n// Display the categorized expenses\\nconsole.log(\"Expense Categories:\")\\nconsole.log(`Clothing: ${clothing.join(\", \")}`)\\nconsole.log(`Entertainment: ${entertainment.join(\", \")}`)\\nconsole.log(`Food: ${food.join(\", \")}`)\\nconsole.log(`Fuel: ${fuel.join(\", \")}`)\\nconsole.log(`Travel: ${travel.join(\", \")}`)\\nconsole.log(`Utilities: ${utilities.join(\", \")}`)\\nconsole.log(`Large Purchases: ${largePurchases.join(\", \")}`)\\n\\n// Display the totals\\nconsole.log(`Total Expenses: ${totalExpenses}`)\\nconsole.log(`Average Expense: ${averageExpense.toFixed(2)}`)\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 878,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-06T20:01:01.174Z",
    "first_attempt": "2025-06-06T19:58:41.416Z",
    "last_attempt": "2025-06-06T20:01:01.174Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n   name: \"Jeremy Landy\",\\n   location: \"Phoenix, AR\",\\n   gender: \"Male\",\\n   age: 31 \\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 879,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-06T20:04:35.553Z",
    "first_attempt": "2025-06-06T20:04:35.551Z",
    "last_attempt": "2025-06-06T20:04:35.553Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n   color: \"yellow\",\\n   stemLength: 20,\\n   growingSeason: \"Summer\",\\n   thorny: false\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n   color: \"white\",\\n   stemLength: 22,\\n   growingSeason: \"Spring\",\\n   thorny: true,\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 880,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-06T20:21:14.664Z",
    "first_attempt": "2025-06-06T20:21:14.663Z",
    "last_attempt": "2025-06-06T20:21:14.664Z",
    "completed_code": "{'code': 'const appointments = [\\n {\\n firstName: \"Maria\",\\n lastName: \"Sanchez\",\\n appointmentTime: \"2:15\"\\n },\\n {\\n firstName: \"John\",\\n lastName: \"McGrath\",\\n appointmentTime: \"1:30\"\\n },\\n {\\n firstName: \"Lamar\",\\n lastName: \"Washington\",\\n appointmentTime: \"10:15\"\\n }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\nfor (const appointment of appointments) {\\n  schedule += `Patient ${appointment.firstName} ${appointment.lastName} has an appointment at ${appointment.appointmentTime}\\\\n`\\n}\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 881,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "math-operations",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-06-07T19:09:38.947Z",
    "first_attempt": "2025-06-07T06:21:14.200Z",
    "last_attempt": "2025-08-18T20:12:35.611Z",
    "completed_code": "False",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 882,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 242,
    "complete": true,
    "completed_on": "2025-06-11T04:31:51.115Z",
    "first_attempt": "2025-06-09T03:25:48.173Z",
    "last_attempt": "2025-06-11T04:31:51.115Z",
    "completed_code": "{'files': {'index.html': \"<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n      <!-- Your content goes here -->\\n      <article>\\n        <section>\\n<h1>How I Became A Software Developer</h1>\\n<h2>Nashville Software School</h2>\\n<p>I'm excited to learn how to code!</p>\\n</section>\\n<section>\\n  <p>I learned the following skills</p>\\n  <ol>\\n      <li>Variables</li>\\n      <li>Arrays</li>\\n      <li>Objects</li>\\n      <li>Functions</li>\\n      <li>HTML</li>\\n      <li>CSS</li>\\n    </ol>\\n</section>\\n</article>\\n</body>\\n</html>\", 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 883,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 121,
    "complete": true,
    "completed_on": "2025-06-09T17:03:03.889Z",
    "first_attempt": "2025-06-09T16:51:59.677Z",
    "last_attempt": "2025-06-09T17:03:03.889Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n  <h1>How I Became A Software Developer</h1>\\n\\n  <article>\\n    <h2>Nashville Software School</h2>\\n\\n    <section>\\n      <p>My journey into software development began when I enrolled at Nashville Software School. The instructors were amazing and the curriculum was challenging but rewarding.</p>\\n    </section>\\n\\n    <section>\\n      <p>I learned the following skills</p>\\n      <ol>\\n        <li>Variables</li>\\n        <li>Arrays</li>\\n        <li>Objects</li>\\n        <li>Functions</li>\\n        <li>HTML</li>\\n        <li>CSS</li>\\n      </ol>\\n    </section>\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 884,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Introduction to HTML",
    "slug": "html-elements",
    "attempts": 373,
    "complete": true,
    "completed_on": "2025-06-09T17:12:48.903Z",
    "first_attempt": "2025-06-09T17:03:09.343Z",
    "last_attempt": "2025-06-09T17:12:48.903Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n    <main>\\n\\n      <article>\\n        <h1>Cade McCaskill</h1>\\n\\n        <section>\\n          <p>I have worked as a berista for 6 years.</p>\\n        </section>\\n\\n        <section>\\n          <p>I wanted to go to this school becuase my brother in-law went to this school, and had told me great things about it.</p>\\n        </section>\\n      </article>\\n\\n      <footer>\\n        <p>Cade McCaskill, 2025, cademccaskill@gmail.com </p>\\n      </footer>\\n    </main>\\n  </header>\\n  <!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 885,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-09T17:12:50.837Z",
    "last_attempt": "2025-06-09T17:12:50.837Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 886,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 3,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-09T17:12:50.837Z",
    "last_attempt": "2025-06-09T17:12:50.865Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 887,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "CSS Basics",
    "slug": "css-selectors",
    "attempts": 301,
    "complete": true,
    "completed_on": "2025-06-09T17:33:52.357Z",
    "first_attempt": "2025-06-09T17:18:18.871Z",
    "last_attempt": "2025-06-09T17:33:52.357Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\np {\\n  color: red;\\n  font-size: 16px;\\n  background-color: gray;\\n}\\n\\nH1 {\\n  color: red;\\n  background-color: gray;\\n}\\nH2 {\\n  color: red;\\n  background-color: gray;\\n}\\n\\nH3 {\\n  color: red;\\n  background-color: gray;\\n}\\n\\n.highlight {\\n  color: white;\\n}\\n\\n#advanced {\\n  color: white;\\n  background-color: black;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 888,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "CSS Selectors",
    "slug": "flexbox-intro",
    "attempts": 427,
    "complete": true,
    "completed_on": "2025-06-09T17:55:15.681Z",
    "first_attempt": "2025-06-09T17:33:54.223Z",
    "last_attempt": "2025-06-09T17:55:15.681Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links {\\n  list-style: none;\\n  display: flex;\\n  flex-direction: column-reverse;\\n  flex-direction: row-reverse;\\n  flex-direction: column;\\n  flex-direction: row;\\n  justify-content: space-evenly;\\n  background-color: #D3D3D3;\\n  color: black;\\n  border-style: solid;\\n  border-color: black;\\n}\\n\\n\\n\\n/* Make the navbar a flex container and style it */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 889,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-container",
    "attempts": 118,
    "complete": true,
    "completed_on": "2025-06-09T18:04:23.642Z",
    "first_attempt": "2025-06-09T17:55:17.416Z",
    "last_attempt": "2025-06-09T18:04:23.642Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Base styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n/* Card styles */\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.card h3 {\\n  margin-top: 0;\\n  color: #2c3e50;\\n}\\n\\n/* Flexbox container properties */\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  gap: 20px;\\n  padding: 10px;\\n}\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 890,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-09T18:04:49.865Z",
    "last_attempt": "2025-06-09T18:04:49.865Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 891,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-09T18:04:49.865Z",
    "last_attempt": "2025-06-09T18:04:49.885Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 892,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-09T19:48:19.396Z",
    "first_attempt": "2025-06-09T19:48:19.395Z",
    "last_attempt": "2025-06-09T19:48:19.396Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n    name: \"Jeremy Landy\",\\n    location: \"Phoenix, AR\",\\n    gender: \"male\",\\n    age: 31\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 893,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-09T19:51:57.898Z",
    "first_attempt": "2025-06-09T19:51:48.453Z",
    "last_attempt": "2025-06-09T19:51:57.898Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n    color: \"blue\",\\n    stemLength: 3,\\n    growingSeason: \"Spring\",\\n    thorny: false\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n    color: \"red\",\\n    stemLength: 5,\\n    growingSeason: \"Summer\",\\n    thorny: true\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 894,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-09T19:57:32.132Z",
    "first_attempt": "2025-06-09T19:57:32.131Z",
    "last_attempt": "2025-06-09T19:57:32.132Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\n\\nfor (const patient of appointments) {\\n    schedule += `Patient ${patient.firstName} ${patient.lastName} has an appointment at ${patient.appointmentTime}\\\\n`\\n}\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 895,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-09T20:13:13.797Z",
    "first_attempt": "2025-06-09T20:13:13.796Z",
    "last_attempt": "2025-06-09T20:13:13.797Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 896,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-09T20:15:08.052Z",
    "first_attempt": "2025-06-09T20:15:08.052Z",
    "last_attempt": "2025-06-09T20:15:08.052Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 897,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-09T20:16:57.929Z",
    "first_attempt": "2025-06-09T20:16:57.928Z",
    "last_attempt": "2025-06-09T20:16:57.929Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \"Large Tank\"\\n\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 898,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-09T20:22:38.679Z",
    "first_attempt": "2025-06-09T20:22:17.610Z",
    "last_attempt": "2025-06-09T20:22:38.679Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\n\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 899,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-09T20:31:22.066Z",
    "first_attempt": "2025-06-09T20:31:22.066Z",
    "last_attempt": "2025-06-09T20:31:22.066Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet() {\\n    console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 900,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "multiline-strings",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-06-10T22:32:01.483Z",
    "first_attempt": "2025-06-09T21:35:12.784Z",
    "last_attempt": "2025-06-25T00:58:37.796Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`;  // Use backticks and calculations here'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 901,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-10T01:53:49.174Z",
    "first_attempt": "2025-06-10T01:49:17.600Z",
    "last_attempt": "2025-06-10T01:53:49.174Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\");\\n}\\nelse if (iWokeUpEarly === false) {\\n    console.log(\"Watch your favorite shows on Netflix all day.\");\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 902,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Undefined",
    "slug": "html-elements",
    "attempts": 423,
    "complete": true,
    "completed_on": "2025-07-04T21:48:54.699Z",
    "first_attempt": "2025-06-10T02:03:03.016Z",
    "last_attempt": "2025-07-04T21:48:54.699Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n<main>\\n  <article>\\n  <h1>McKenney</h1>\\n  <section><p>I have experience in marketing and development.<p></section>\\n  <section><p>I want to be a software developer to have a versatile skillset in an evolving field.</p></section>\\n  </article>\\n</main>\\n  <!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n<footer>\\n  <p>McKenney, 2025, maleavell@gmail.com</p>\\n</footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 903,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T02:28:55.750Z",
    "first_attempt": "2025-06-10T02:28:55.749Z",
    "last_attempt": "2025-06-10T02:28:55.750Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"t-shirt\";       // Add your code here\\n    legClothing = \"shorts\";\\n    footWear = \"sandals\";\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"t-shirt\";\\n    legClothing = \"shorts\";\\n    footWear = \"sneakers\";\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"sweater\";\\n    legClothing = \"pants\";\\n    footWear = \"sneakers\";\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"jacket\";\\n    legClothing = \"pants\";\\n    footWear = \"sneakers\";\\n}\\nelse {\\n    torsoClothing = \"jacket\";\\n    legClothing = \"pants\";\\n    footWear = \"boots\";\\n}\\n\\nconsole.log(`I need to wear \\n${torsoClothing}\\n${legClothing} and\\n${footWear}\\n`)\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 905,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "HTML Elements",
    "slug": "arrays-conditions-practice",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-10T03:34:41.155Z",
    "first_attempt": "2025-06-10T02:56:41.447Z",
    "last_attempt": "2025-06-10T03:34:41.155Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours) {\\n    if (hour < 7) {\\n        grumpyHours.push(hour)\\n    }\\n    else {\\n        happyHours.push(hour)\\n    }\\n}\\n\\nconsole.log(`\\nI was grumpy on ${grumpyHours.length} days.\\nI was happy on ${happyHours.length} days.`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 906,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Flexbox Item Properties",
    "slug": "arrays-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-10T03:22:25.026Z",
    "first_attempt": "2025-06-10T03:19:52.653Z",
    "last_attempt": "2025-07-07T11:17:13.737Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [ \"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\" ]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 907,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T03:31:27.799Z",
    "first_attempt": "2025-06-10T03:31:27.798Z",
    "last_attempt": "2025-06-10T03:31:27.799Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 908,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Undefined",
    "slug": "arrays-strings",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-07-06T18:08:41.082Z",
    "first_attempt": "2025-06-10T04:09:27.065Z",
    "last_attempt": "2025-07-06T18:08:41.082Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  // Add your logic here\\n  if (coffee.includes(\"light\")) {\\n    light++\\n  }\\n  else if (coffee.includes(\"medium\")) {\\n    medium++\\n  }\\n  else if (coffee.includes(\"dark\") ||\\n          coffee.includes(\"toasty\")) {\\n            toastyDark++\\n          }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 909,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Undefined",
    "slug": "arrays-split-join",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-08T19:36:07.977Z",
    "first_attempt": "2025-06-10T04:46:21.888Z",
    "last_attempt": "2025-07-08T19:36:07.977Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 910,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-10T12:15:43.182Z",
    "first_attempt": null,
    "last_attempt": "2025-06-10T12:15:43.182Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 911,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T13:31:20.820Z",
    "first_attempt": "2025-06-10T13:31:20.819Z",
    "last_attempt": "2025-06-10T13:31:20.820Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const javascript of topics) {\\n  console.log(javascript)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 912,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-10T19:00:08.245Z",
    "first_attempt": "2025-06-10T18:58:07.300Z",
    "last_attempt": "2025-06-10T19:00:08.245Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 913,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T19:02:30.955Z",
    "first_attempt": "2025-06-10T19:02:30.954Z",
    "last_attempt": "2025-06-10T19:02:30.955Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 914,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T19:03:14.163Z",
    "first_attempt": "2025-06-10T19:03:14.161Z",
    "last_attempt": "2025-06-10T19:03:14.163Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor =book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy =book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 915,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T19:06:17.305Z",
    "first_attempt": "2025-06-10T19:06:17.304Z",
    "last_attempt": "2025-06-10T19:06:17.305Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\ngoldfish.location = \"Large Tank\"\\nconsole.log(goldfish.location)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 916,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-10T19:20:51.652Z",
    "first_attempt": "2025-06-10T19:09:21.301Z",
    "last_attempt": "2025-06-10T19:20:51.652Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 917,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-10T19:23:48.851Z",
    "first_attempt": "2025-06-10T19:21:31.552Z",
    "last_attempt": "2025-06-10T19:23:48.851Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\n\\nfunction displayGameScore(player, points) {\\n  console.log(`${player} scored ${points} points!`)\\n}\\n\\n// Then invoke the function with different player names and scores\\n\\ndisplayGameScore(\"Mario\", 100)\\ndisplayGameScore(\"Terry\", 40)\\ndisplayGameScore(\"Arnold\", 18)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 918,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T19:24:25.838Z",
    "first_attempt": "2025-06-10T19:24:25.837Z",
    "last_attempt": "2025-06-10T19:24:25.838Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n    console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore()\\n\\ncelebrateScore()\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 919,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T19:24:37.139Z",
    "first_attempt": "2025-06-10T19:24:37.137Z",
    "last_attempt": "2025-06-10T19:24:37.139Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet () {\\n   console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 920,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T19:26:35.204Z",
    "first_attempt": "2025-06-10T19:26:35.202Z",
    "last_attempt": "2025-06-10T19:26:35.204Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore(){\\n   console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\n\\ncelebrateScore()\\ncelebrateScore()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 921,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-10T19:27:27.871Z",
    "first_attempt": "2025-06-10T19:26:43.724Z",
    "last_attempt": "2025-06-10T19:27:27.871Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreaterThanHundred(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction showWelcome(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscount(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 922,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-10T19:30:40.108Z",
    "first_attempt": "2025-06-10T19:28:23.038Z",
    "last_attempt": "2025-06-10T19:30:40.108Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreater(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayWelcome(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscount(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 923,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-10T19:36:05.111Z",
    "first_attempt": "2025-06-10T19:35:01.336Z",
    "last_attempt": "2025-06-10T19:36:05.111Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\ndescribeActivity(\"jumping\")\\ndescribeActivity(\"disc golfing\")\\ndescribeActivity(\"walking\")'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 924,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T19:39:37.763Z",
    "first_attempt": "2025-06-10T19:39:37.763Z",
    "last_attempt": "2025-06-10T19:39:37.763Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 925,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-10T19:48:34.895Z",
    "first_attempt": "2025-06-10T19:44:22.905Z",
    "last_attempt": "2025-06-10T19:48:34.895Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(anyActivity) {\\n  console.log(`I love ${anyActivity}!`)\\n}\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 926,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T19:53:08.096Z",
    "first_attempt": "2025-06-10T19:53:08.094Z",
    "last_attempt": "2025-06-10T19:53:08.096Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 927,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T19:57:51.023Z",
    "first_attempt": "2025-06-10T19:57:51.021Z",
    "last_attempt": "2025-06-10T19:57:51.023Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(name, score) {\\n   console.log(`${name} scored ${score} points!`)\\n}\\n// Then invoke the function with different player names and scores\\ndisplayGameScore(\"Seth\", 25)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 928,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-10T20:02:18.547Z",
    "first_attempt": "2025-06-10T20:01:23.295Z",
    "last_attempt": "2025-06-10T20:02:18.547Z",
    "completed_code": "{'code': 'const add = (x, y) => x + y;\\n\\nconst greet = (name) => \"Hello, \" + name + \"!\";\\n\\nconst getRandomNumber = () => Math.random();\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber();\\nconst greeting = greet(\"World\");\\nconst sum = add(5, 3);\\n\\nconsole.log(random, greeting, sum);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 929,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T20:05:41.098Z",
    "first_attempt": "2025-06-10T20:05:41.096Z",
    "last_attempt": "2025-06-10T20:05:41.098Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\nconst makeGreeting = (name) => `Hello, ${name}!`;\\n\\n// Invoke the function and assign the return value to a variable\\nconst greeting = makeGreeting(\"John\");\\n\\n// Console log the variable to see the greeting\\nconsole.log(greeting);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 930,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-10T20:14:00.062Z",
    "first_attempt": "2025-06-10T20:11:56.965Z",
    "last_attempt": "2025-06-10T20:14:00.062Z",
    "completed_code": "{'code': 'const calculateSubtotal = (quantity, price) => {\\n    return quantity * price;\\n}\\n\\n// Create calculateTotal here (takes subtotal and adds tax)\\nconst calculateTotal = (subtotal) => {\\n    const taxRate = 0.08; // 8% tax\\n    return subtotal + (subtotal * taxRate);\\n}\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(3, 4.99);\\n\\n// 2. Calculate the final total with tax\\nconst totalWithTax = calculateTotal(subtotal);\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $${subtotal.toFixed(2)}`);\\nconsole.log(`Total with tax: $${totalWithTax.toFixed(2)}`);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 931,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T20:12:48.777Z",
    "first_attempt": "2025-06-10T20:12:48.774Z",
    "last_attempt": "2025-06-10T20:12:48.777Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(playerName, numOfPoints) {\\n    console.log(`${playerName} scored ${numOfPoints} points!`)\\n}\\n\\ndisplayGameScore(\"Mario\", 100)\\n\\n// Then invoke the function with different player names and scores\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 932,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-10T20:21:25.944Z",
    "first_attempt": "2025-06-10T20:20:12.108Z",
    "last_attempt": "2025-06-10T20:21:25.944Z",
    "completed_code": "{'code': '// Create arrow function to calculate game score\\nconst calculateGameScore = (baseScore, multiplier) => {\\n  const totalScore = baseScore * multiplier;\\n  return totalScore >= 1000 ? \"High Score!\" : \"Keep trying!\";\\n};\\n\\n// Test the function with different values\\nconst result1 = calculateGameScore(500, 2.5);\\nconst result2 = calculateGameScore(300, 2.0);\\nconst result3 = calculateGameScore(800, 1.5);\\nconst result4 = calculateGameScore(200, 3.0);\\n\\n// Log the results\\nconsole.log(`calculateGameScore(500, 2.5): ${result1}`); // Should be \"High Score!\" (1250 >= 1000)\\nconsole.log(`calculateGameScore(300, 2.0): ${result2}`); // Should be \"Keep trying!\" (600 < 1000)\\nconsole.log(`calculateGameScore(800, 1.5): ${result3}`); // Should be \"High Score!\" (1200 >= 1000)\\nconsole.log(`calculateGameScore(200, 3.0): ${result4}`); // Should be \"Keep trying!\" (600 < 1000)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 933,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-10T20:27:48.893Z",
    "first_attempt": "2025-06-10T20:26:19.589Z",
    "last_attempt": "2025-06-10T20:27:48.893Z",
    "completed_code": "{'code': '// This code has scope problems!\\nlet score = 0\\n\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 934,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T20:32:22.504Z",
    "first_attempt": "2025-06-10T20:32:22.501Z",
    "last_attempt": "2025-06-10T20:32:22.504Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\n\\nconst checkHighScore = (playerName,score) => {\\n       if (score > highScore) {\\n        highScore = score;\\n        return `New high score! ${playerName} scored ${score} points!`;\\n    } else {\\n        return `${playerName} scored ${score} points. Current high score is ${highScore}.`;\\n    }\\n}\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\n\\nconsole.log(checkHighScore(\"Jason\", 50))\\nconsole.log(checkHighScore(\"Seth\", 45))\\nconsole.log(checkHighScore(\"Jay\", 48))\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 935,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-10T20:42:36.928Z",
    "first_attempt": "2025-06-10T20:42:36.927Z",
    "last_attempt": "2025-06-10T20:42:36.928Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\n\\nconst add = (x, y) => x + y\\n\\nconst greet = (name) => {\\n    return `Hello, ${name}!`\\n}\\n\\nconst getRandomNumber = () => {\\n    return Math.random()\\n}\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber(12)\\nconst greeting = greet(\"Bob\")\\nconst sum = add(2, 2)\\n\\nconsole.log(random, greeting, sum)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 936,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T01:04:18.374Z",
    "first_attempt": "2025-06-11T01:04:18.372Z",
    "last_attempt": "2025-06-11T01:04:18.374Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 145\\nlet marchBill = 154\\nlet aprilBill = 146\\nlet mayBill = 164\\nlet juneBill = 147\\nlet julyBill = 157\\nlet augustBill = 148\\nlet septemberBill = 153\\nlet octoberBill = 149\\nlet novemberBill = 152\\nlet decemberBill = 150\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill;\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 937,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T01:07:07.242Z",
    "first_attempt": "2025-06-11T01:07:07.241Z",
    "last_attempt": "2025-06-11T01:07:07.242Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Maingear\"\\nconst phone = \"iPhone 14\"\\nconst television = \"LG\"\\nconst refrigerator = \"Whirlpool\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I play games on my ${computer}, watch memes on my ${phone}, watch shows on my ${television}, and drink beer from my ${refrigerator}.`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 938,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T01:12:10.734Z",
    "first_attempt": "2025-06-11T01:12:10.733Z",
    "last_attempt": "2025-06-11T01:12:10.734Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome\\ncombinedIncome += spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome += combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 939,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "string-methods",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-06-11T01:56:02.196Z",
    "first_attempt": "2025-06-11T01:21:15.565Z",
    "last_attempt": "2025-06-25T01:01:01.196Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim() \\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase ()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0,4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 940,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-11T01:29:11.832Z",
    "first_attempt": "2025-06-11T01:27:46.041Z",
    "last_attempt": "2025-06-11T01:29:11.832Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\nlet monthlyExpenses = phoneBill + mortgage + carInsurance + healthInsurance\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${combinedIncome}.\\\\n\\nOur total monthly expenses are ${monthlyExpenses}.\\\\n\\nOur net monthly income is ${combinedIncome - monthlyExpenses}.`;  // Use backticks and calculations here\\n\\nconsole.log(statement)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 941,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-11T01:43:21.856Z",
    "first_attempt": "2025-06-11T01:29:40.293Z",
    "last_attempt": "2025-06-11T01:43:21.856Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const cofeeMug of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 942,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-11T01:41:23.814Z",
    "first_attempt": "2025-06-11T01:37:49.065Z",
    "last_attempt": "2025-06-11T01:41:23.814Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\nconst cleanEmail = email.trim();\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\nconst formattedPhone = phone.replace(\" \", \"-\")\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\nconst formattedName = customerName.toUpperCase()\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\nconst containsX = password.includes(\"x\")\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\nconst fileStart = filename.slice(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 943,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-11T01:48:50.633Z",
    "first_attempt": "2025-06-11T01:45:41.694Z",
    "last_attempt": "2025-06-11T01:48:50.633Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false;\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n} else {\\n    console.log(\"Netflix was great today\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 944,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T02:02:09.417Z",
    "first_attempt": "2025-06-11T02:02:09.417Z",
    "last_attempt": "2025-06-11T02:02:09.417Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n} else if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n} else if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n} else if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n} else if (temperature < 35) {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\n\\nconsole.log(`I will wear ${torsoClothing}, ${legClothing}, and ${footWear}.`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 945,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T02:09:12.345Z",
    "first_attempt": "2025-06-11T02:09:12.344Z",
    "last_attempt": "2025-06-11T02:09:12.345Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n  if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n  }\\n  else if (ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\")\\n  }\\n  else if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\")\\n  }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 946,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-06-11T02:30:27.280Z",
    "first_attempt": "2025-06-11T02:14:45.818Z",
    "last_attempt": "2025-06-11T02:30:27.280Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos += femalePhotos\\ntotalPhotos += malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos >= 50 && totalPhotos < 110) {\\n    photoStorage = \"Shoe Box\"\\n} else if (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else if (malePhotos > femalePhotos) {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}\\n`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 947,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-11T03:17:53.175Z",
    "first_attempt": "2025-06-11T03:16:23.301Z",
    "last_attempt": "2025-06-11T03:17:53.175Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expense of monthlyExpenses) {\\n  // Add the current monthly cost to the value of totalExpense\\n  totalExpense += expense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 948,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-11T03:39:27.247Z",
    "first_attempt": "2025-06-11T03:27:30.801Z",
    "last_attempt": "2025-06-11T03:39:27.247Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 11, 10, 12, 9, 12, 20, 9 ]\\nlet totalMiles = 0\\n// Declare a variable to store the total. Initial value is 0.\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const mile of weeklyMiles) {\\n  totalMiles += mile\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles} miles each week.\\n I have driven a total of ${totalMiles} miles.`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 949,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "boolean-logic",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-11T03:43:26.782Z",
    "first_attempt": "2025-06-11T03:43:26.782Z",
    "last_attempt": "2025-06-25T01:02:44.696Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 950,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Undefined",
    "slug": "arrays-review",
    "attempts": 5,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-11T04:32:03.943Z",
    "last_attempt": "2025-09-12T18:44:01.384Z",
    "completed_code": "False",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 951,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T04:35:35.536Z",
    "first_attempt": "2025-06-11T04:35:35.535Z",
    "last_attempt": "2025-06-11T04:35:35.536Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n    name: \"Jeremy Landy\",\\n    location: \"Phoenix, AR\",\\n    gender: \"male\",\\n    age: 31\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 952,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T04:38:59.553Z",
    "first_attempt": "2025-06-11T04:38:59.552Z",
    "last_attempt": "2025-06-11T04:38:59.553Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\ncolor: \"yellow\",\\nstemLength: 6,\\ngrowingSeason: \"spring\",\\nthorny: false\\n}\\n\\n// Complete the rose object\\nconst rose = {\\ncolor: \"pink\",\\nstemLength: 4,\\ngrowingSeason: \"summer\",\\nthorny: true\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 953,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-11T04:45:41.929Z",
    "first_attempt": "2025-06-11T04:45:15.184Z",
    "last_attempt": "2025-06-11T04:45:41.929Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\nfor (const appointmentObject of appointments) {\\n    schedule += `Patient ${appointmentObject.firstName} ${appointmentObject.lastName} has an appointment at ${appointmentObject.appointmentTime}\\\\n`\\n}\\n\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 954,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T04:47:15.819Z",
    "first_attempt": "2025-06-11T04:47:15.817Z",
    "last_attempt": "2025-06-11T04:47:15.819Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 955,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T04:48:40.236Z",
    "first_attempt": "2025-06-11T04:48:40.234Z",
    "last_attempt": "2025-06-11T04:48:40.236Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 956,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T04:50:34.980Z",
    "first_attempt": "2025-06-11T04:50:34.977Z",
    "last_attempt": "2025-06-11T04:50:34.980Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \"Large Tank\"\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 957,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T04:56:14.270Z",
    "first_attempt": "2025-06-11T04:56:14.268Z",
    "last_attempt": "2025-06-11T04:56:14.270Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 958,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T04:58:24.863Z",
    "first_attempt": "2025-06-11T04:58:24.861Z",
    "last_attempt": "2025-06-11T04:58:24.863Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet() {\\n    console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 959,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T04:59:51.820Z",
    "first_attempt": "2025-06-11T04:59:51.818Z",
    "last_attempt": "2025-06-11T04:59:51.820Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore () {\\n    console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\n\\ncelebrateScore()\\ncelebrateScore()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 960,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-11T05:03:54.563Z",
    "first_attempt": "2025-06-11T05:03:30.719Z",
    "last_attempt": "2025-06-11T05:03:54.563Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isOverOneHundred(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction showWelcome(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscount(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 961,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-17T02:37:46.896Z",
    "first_attempt": "2025-06-11T12:46:24.589Z",
    "last_attempt": "2025-06-17T02:37:46.896Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours) {\\n    if (hour >= 7) {\\n        happyHours.push(hour)\\n    }\\n    else if (hour < 7) {\\n        grumpyHours.push(hour)\\n    }\\n}\\n\\nconsole.log(`I was grumpy on ${grumpyHours} days. \\nI was happy on ${happyHours} days.`)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 962,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T13:12:25.142Z",
    "first_attempt": "2025-06-11T13:12:25.141Z",
    "last_attempt": "2025-06-11T13:12:25.142Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n    name: \"Jeremy Landy\",\\n    location: \"Phoenix, AR\",\\n    gender: \"male\",\\n    age: 31,\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 963,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-11T13:25:34.361Z",
    "first_attempt": "2025-06-11T13:20:41.389Z",
    "last_attempt": "2025-06-11T13:25:34.361Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n    color: \"purple\",\\n    stemLength: 10,\\n    growingSeason: \"Summer\",\\n    thorny: false,\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n    color: \"red\",\\n    stemLength: 20,\\n    growingSeason: \"Spring\",\\n    thorny: true,\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 964,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-11T20:22:34.931Z",
    "first_attempt": "2025-06-11T13:40:30.741Z",
    "last_attempt": "2025-06-11T20:22:34.931Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\n\\nfor (const appointment of appointments) {\\n    schedule += `Patient ${appointment.firstName} ${appointment.lastName} has an appointment at ${appointment.appointmentTime}\\\\n`\\n}\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 965,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-06-11T21:26:58.538Z",
    "first_attempt": "2025-06-11T20:53:08.860Z",
    "last_attempt": "2025-06-11T21:26:58.538Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\n\\nconst add = (x, y) => x + y\\n\\n\\nconst greet = (name)=> {\\n    return \"Hello, \" + name + \"!\"\\n}\\n\\nconst getRandomNumber = () => {\\n    return Math.random()\\n}\\n\\n// After converting, test your functions by invoking them here\\nconst random = 5 \\nconst greeting = \"jeff\"\\nconst sum = 12\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 966,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T21:02:27.746Z",
    "first_attempt": "2025-06-11T21:02:27.746Z",
    "last_attempt": "2025-06-11T21:02:27.746Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 967,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T21:07:01.291Z",
    "first_attempt": "2025-06-11T21:07:01.291Z",
    "last_attempt": "2025-06-11T21:07:01.291Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 968,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-11T21:54:23.194Z",
    "first_attempt": "2025-06-11T21:47:48.617Z",
    "last_attempt": "2025-06-11T21:54:23.194Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\n\\nconst makeGreeting = (name) => {\\n    return `Hello, ${name}!`\\n}\\n\\n\\n// Invoke the function and assign the return value to a variable\\n\\nconst newGreeting = makeGreeting(\"Tim\")\\n\\n// Console log the variable you used above to see the greeting\\n\\nconsole.log(newGreeting)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 969,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Undefined",
    "slug": "functions-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-11T22:14:13.322Z",
    "first_attempt": "2025-06-11T22:14:13.320Z",
    "last_attempt": "2025-07-01T01:29:21.826Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\ndescribeActivity(\"running\")\\ndescribeActivity(\"swimming\")\\ndescribeActivity(\"biking\")\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 970,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T22:20:22.872Z",
    "first_attempt": "2025-06-11T22:20:22.870Z",
    "last_attempt": "2025-06-11T22:20:22.872Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\n\\n\\nconst calculateSubtotal = (quantity, price) => quantity * price\\n\\n// Create calculateTotal here\\n\\nconst calculateTotal = (calculateSubtotal) => {\\n    return calculateSubtotal * 1.08\\n}\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\n\\nconst newSubtotal = calculateSubtotal(3, 4.99)\\n\\n// 2. Calculate the final total with tax\\n\\nconst finalTotal = calculateTotal(newSubtotal)\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $ ${newSubtotal}`)\\nconsole.log(`Total with tax: $${finalTotal}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 971,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-06-11T22:49:35.562Z",
    "first_attempt": "2025-06-11T22:30:41.725Z",
    "last_attempt": "2025-06-11T22:49:35.562Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  const calculateGameScore = (points, multiplier) => {\\n      const total = points * multiplier\\n      if (total >= 1000) {\\n          return \"High Score!\"\\n      } else {\\n          return \"Keep trying!\"\\n      }\\n  }\\n\\n  // Call your function with different values and store a result in a variable\\n  const result1 = calculateGameScore(500, 2.5)\\n  const result2 = calculateGameScore(400, 2)\\n\\n  // Log the result to see the output\\n  console.log(`Result 1: ${result1}`)\\n  console.log(`Result 2: ${result2}`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 972,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T22:31:30.612Z",
    "first_attempt": "2025-06-11T22:31:30.611Z",
    "last_attempt": "2025-06-11T22:31:30.612Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\ncalculateTotal(50)\\n// 2. Calculate total for $99.99\\ncalculateTotal(99.99)\\n// 3. Calculate total for $25.50\\ncalculateTotal(25.50)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 973,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-11T22:38:24.673Z",
    "first_attempt": "2025-06-11T22:38:24.670Z",
    "last_attempt": "2025-06-11T22:38:24.673Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(playerName, points) {\\n    console.log(`${playerName} scored ${points} points!`)\\n}\\n\\n// Then invoke the function with different player names and scores\\n\\ndisplayGameScore(\"McKenney\", 30)\\ndisplayGameScore(\"Jack\", 35)\\ndisplayGameScore(\"Ellie\", 23)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 974,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-11T23:02:46.195Z",
    "first_attempt": "2025-06-11T23:01:19.747Z",
    "last_attempt": "2025-06-11T23:02:46.195Z",
    "completed_code": "{'code': '// This code has scope problems!\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\nlet score = 0\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 975,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-06-12T02:35:25.864Z",
    "first_attempt": "2025-06-12T02:24:14.618Z",
    "last_attempt": "2025-06-12T02:35:25.864Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\n\\nconst checkHighScore = (playerName, score) => {\\n    if (score > highScore) {\\n        highScore = score \\n        \\n        return  (`${playerName} has a new high score of ${score}!`)\\n         \\n    }\\n    else {\\n        return (`${playerName} has a score of ${score}!`)\\n        \\n    }\\n\\n   \\n} \\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\n\\nconsole.log(checkHighScore(\"Thomas\", 34))\\nconsole.log(checkHighScore(\"Janice\", 67))\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 976,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-12T03:28:58.544Z",
    "first_attempt": "2025-06-12T03:05:45.807Z",
    "last_attempt": "2025-06-12T03:28:58.544Z",
    "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n    let price = 10\\n      // 1. Start with the base ticket price of $10\\n    if (isWeekend) {\\n        price += 2 \\n    }\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n    if (age < 12 || age >= 65) {\\n        price = price * 0.5\\n    }\\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n    return price \\n      // 4. Return the final ticket price\\n  }\\n\\nconst adultWeekdayPrice = calculateTicketPrice(25, false)\\nconsole.log(adultWeekdayPrice)\\n\\nconst adultWeekendPrice = calculateTicketPrice(25, true)\\nconsole.log (adultWeekendPrice)\\n\\nconst discountWeekdayPrice = calculateTicketPrice(10, false)\\nconsole.log (discountWeekdayPrice)\\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n\\n  // Example:\\n  // const adultWeekdayPrice = calculateTicketPrice(25, false);\\n\"}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 977,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-12T04:06:15.304Z",
    "first_attempt": "2025-06-12T04:06:15.298Z",
    "last_attempt": "2025-06-12T04:06:15.304Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\n    let total = 0\\n      // 2. Loop through all prices in the array and add each to total\\n    for (const price of prices) {\\n        total = total + price\\n    }\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\n    if (total > 100) {\\n        total = total * .9\\n    }\\n      // 4. Return the final total\\n      return total\\n  }\\n\\nconst values = [34, 156, 122, 89]\\nconst finalTotal = calculateCartTotal(values)\\nconsole.log(finalTotal)\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\n\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 978,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-12T04:14:31.533Z",
    "first_attempt": "2025-06-12T04:13:59.165Z",
    "last_attempt": "2025-06-12T04:14:31.533Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\n\\nconst add = (x, y) => x + y\\n\\nconst greet = (name) => \"Hello, \" + name + \"!\"\\n\\nconst getRandomNumber = () => Math.random()\\n\\n// After converting, test your functions by invoking them here\\nconst random = 4\\nconst msg = greet\\nconst number = add\\n\\nconsole.log(random, msg, number)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 979,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-06-13T02:33:49.750Z",
    "first_attempt": "2025-06-12T04:25:27.345Z",
    "last_attempt": "2025-06-13T02:33:49.750Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    return (time * 100) + (targets * 50)\\n\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    if (targets > 10) {\\n        return 1000\\n    } else {\\n        return 0\\n    }\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    const base = calculateBasePoints(time, targets) \\n    const bonus = calculateBonus(targets)\\n    return base + bonus\\n\\n}\\n\\n    // Get the base points and bonus points\\n\\n    // Add the results together and return the sum\\n\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\n\\nconst testCode = calculateFinalScore(2, 5)\\nconsole.log(testCode)\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 980,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-12T15:41:47.247Z",
    "first_attempt": "2025-06-12T15:41:47.246Z",
    "last_attempt": "2025-06-12T15:41:47.247Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n    name: \"Jeremy Landy\",\\n    location: \"Phoenix, AR\",\\n    gender: \"male\",\\n    age: 31\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 981,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-12T15:46:56.368Z",
    "first_attempt": "2025-06-12T15:46:56.368Z",
    "last_attempt": "2025-06-12T15:46:56.368Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n    color: \"Purple\",\\n    stemLength: 12,\\n    growingSeason: \"Summer\",\\n    thorny: false\\n\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n    color: \"Red\",\\n    stemLength: 15,\\n    growingSeason: \"Summer\",\\n    thorny: true\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 982,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-12T15:48:40.380Z",
    "first_attempt": "2025-06-12T15:48:40.378Z",
    "last_attempt": "2025-06-12T15:48:40.380Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse {\\n    console.log(\"Time to watch Netflix.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 983,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-12T16:01:53.764Z",
    "first_attempt": "2025-06-12T16:01:06.776Z",
    "last_attempt": "2025-06-12T16:01:53.764Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\n\\nfor (const appointmentsObject of appointments) {\\n  schedule += `Patient ${appointmentsObject.firstName} ${appointmentsObject.lastName} has an appointment at ${appointmentsObject.appointmentTime}\\\\n`\\n}\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 984,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-12T16:04:53.038Z",
    "first_attempt": "2025-06-12T16:04:53.037Z",
    "last_attempt": "2025-06-12T16:04:53.038Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 985,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-12T16:06:57.449Z",
    "first_attempt": "2025-06-12T16:06:57.449Z",
    "last_attempt": "2025-06-12T16:06:57.449Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 986,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-12T16:09:26.595Z",
    "first_attempt": "2025-06-12T16:08:53.358Z",
    "last_attempt": "2025-06-12T16:09:26.595Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \\'Large Tank\\''}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 987,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-12T16:19:55.487Z",
    "first_attempt": "2025-06-12T16:09:12.605Z",
    "last_attempt": "2025-06-12T16:19:55.487Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    // Add your code here\\n    torsoClothing = \"t-shirt\" \\n    legClothing = \"shorts\" \\n    footWear = \"sandals\" \\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"t-shirt\" \\n    legClothing = \"shorts\" \\n    footWear = \"sneakers\"\\n} \\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"sweater\" \\n    legClothing = \"pants\" \\n    footWear = \"sneakers\" \\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"jacket\" \\n    legClothing = \"pants\" \\n    footWear = \"sneakers\" \\n}\\nif (temperature < 35) {\\n    torsoClothing = \"jacket\" \\n    legClothing = \"pants\" \\n    footWear = \"boots\" \\n}\\nconsole.log(`If the temperature is 48 degrees, you should wear ${torsoClothing}, ${legClothing}, and ${footWear}.`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 988,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-12T16:19:57.738Z",
    "first_attempt": "2025-06-12T16:19:57.737Z",
    "last_attempt": "2025-06-12T16:19:57.738Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}` \\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 989,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-06-12T16:45:59.101Z",
    "first_attempt": "2025-06-12T16:30:51.841Z",
    "last_attempt": "2025-06-12T16:45:59.101Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n}\\nelse if (totalPhotos < 110 && totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n}\\nif (totalPhotos < 50) {\\n    photoStorage = \"Envelopes\"\\n}\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor} `\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 990,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-12T16:50:05.623Z",
    "first_attempt": "2025-06-12T16:50:05.614Z",
    "last_attempt": "2025-06-12T16:50:05.623Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [ \"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 991,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-12T16:54:39.642Z",
    "first_attempt": "2025-06-12T16:54:39.640Z",
    "last_attempt": "2025-06-12T16:54:39.642Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 992,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-12T17:01:08.180Z",
    "first_attempt": "2025-06-12T17:01:08.179Z",
    "last_attempt": "2025-06-12T17:01:08.180Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const name of topics) {\\nconsole.log(name)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 993,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-12T20:06:51.445Z",
    "first_attempt": "2025-06-12T20:06:51.445Z",
    "last_attempt": "2025-06-12T20:06:51.445Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\ngoldfish.location = \"Large Tank\"\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 994,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-12T20:27:00.292Z",
    "first_attempt": "2025-06-12T20:20:41.350Z",
    "last_attempt": "2025-06-12T20:27:00.292Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 995,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-13T13:50:00.429Z",
    "first_attempt": "2025-06-12T20:53:39.684Z",
    "last_attempt": "2025-06-13T13:50:00.429Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const mug of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 996,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-12T20:59:13.620Z",
    "first_attempt": "2025-06-12T20:59:13.620Z",
    "last_attempt": "2025-06-12T20:59:13.620Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet () {\\n    console.log(\"Good dog!\")\\n}\\n\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 997,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-12T21:13:49.425Z",
    "first_attempt": "2025-06-12T21:13:49.424Z",
    "last_attempt": "2025-06-12T21:13:49.425Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n    console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore()\\n\\ncelebrateScore()\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 998,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-13T03:50:11.505Z",
    "first_attempt": "2025-06-13T03:34:51.055Z",
    "last_attempt": "2025-06-13T03:50:11.505Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  // Otherwise, return \"Hello, [name]!\"\\n    if (time === \\'morning\\' || name.startsWith(\\'A\\'))  {\\n        return `Good morning, ${name}!`\\n    }\\n   \\n    else if (time === \\'afternoon\\') {\\n        return `Good afternoon, ${name}!`\\n    }\\n    else {\\n        return `Hello, ${name}!`\\n    }\\n    \\n}\\n\\n// 2. Create a joke function\\n\\nconst tellJoke = (topic) => {\\n    if (topic === \\'weather\\') {\\n        return \"What do you call a stormy robot? A thunder-bot!\"\\n    }\\n    else if (topic === \\'animals\\') {\\n        return \"Why did the robot go to the zoo? To study creature features!\"\\n    }\\n    else {\\n        return \"Why was the robot tired? Because it had too many bytes!\"\\n    }\\n\\n}\\n\\n  // If topic is \"weather\", return the weather joke\\n  // If topic is \"animals\", return the animals joke\\n  // Otherwise, return the default joke\\n\\n\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n    const allGreetings = [];\\n    \\n  // Loop through each person in the people array\\n    for (const person of people) {\\n        const personGreeting = createGreeting(person, time)\\n        allGreetings.push(personGreeting)\\n    }\\n\\n  // Create a greeting for each person\\n \\n  // Add the greeting to the array\\n\\n  // Return the array of greetings\\n\\nreturn allGreetings\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n    const greet = createGreeting(name, time)\\n  // Get the joke\\n    const joke = tellJoke(topic) \\n  // Return both together\\n    return `${greet} ${joke}`\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 999,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 423,
    "complete": true,
    "completed_on": "2025-06-14T01:05:34.564Z",
    "first_attempt": "2025-06-13T03:51:18.173Z",
    "last_attempt": "2025-06-14T01:06:19.360Z",
    "completed_code": "{'files': {'index.html': \"<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n      <!-- Your content goes here -->\\n  <h1>How I Became A Software Developer</h1>\\n  <article>\\n    <h2>Nashville Software School</h2>\\n      <section>\\n        <p>I first learned how to code while at NSS. It was very overwhelming and I thought I'd never be able to figure it out.</p>\\n      </section>\\n\\n      <section>\\n        <p>I learned the following skills</p>\\n          <ol>\\n            <li>Variables</li>\\n            <li>Arrays</li>\\n            <li>Objects</li>\\n            <li>Functions</li>\\n            <li>HTML</li>\\n            <li>CSS</li>\\n          </ol>\\n      </section>\\n  </article>\\n\\n\\n</body>\\n</html>\", 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1000,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Undefined",
    "slug": "leonids-data-types",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-30T21:10:08.789Z",
    "first_attempt": "2025-06-13T03:51:39.067Z",
    "last_attempt": "2025-06-30T21:10:08.789Z",
    "completed_code": "{'code': 'function createToy(name, category, ageRecommendation, isBatteryOperated, features, dimensions) {\\n    return {\\n        name,\\n        category,\\n        ageRecommendation,\\n        isBatteryOperated,\\n        features,\\n        dimensions\\n    };\\n}\\n\\n// TODO: Call createToy with the correct data types\\nconst myToy = createToy(\"Hot Wheels Mustang\", \"Car\", 10, false, [\"collectible\", \"acurate replica\", \"durable\"], {height: .5, width: 1}  );\\nconsole.log(myToy)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1001,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-13T04:28:35.223Z",
    "first_attempt": "2025-06-13T04:05:14.933Z",
    "last_attempt": "2025-06-13T04:28:35.223Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\nconst makeGreeting = (name) => {\\n    return \"Hello, \" + name + \"!\"\\n}\\n\\n\\n// Invoke the function and assign the return value to a variable\\nconst greeting = makeGreeting(\"John\")\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(greeting)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1002,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-13T13:57:53.232Z",
    "first_attempt": "2025-06-13T13:57:53.230Z",
    "last_attempt": "2025-06-13T13:57:53.232Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  if (ingredient === \"beef patty\") {\\n   finishedFood.push(\"burger\")\\n  }\\n  else if (ingredient === \"egg\") {\\n   finishedFood.push(\"biscuit\")\\n  }\\n  else if (ingredient === \"potato\") {\\n   finishedFood.push(\"fries\")\\n  }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1003,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-13T14:03:23.438Z",
    "first_attempt": "2025-06-13T14:03:23.437Z",
    "last_attempt": "2025-06-13T14:03:23.438Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expenses of monthlyExpenses) {\\n  totalExpense += expenses\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1004,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-13T14:13:42.104Z",
    "first_attempt": "2025-06-13T14:13:42.103Z",
    "last_attempt": "2025-06-13T14:13:42.104Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ \"25\", \"56\", \"25\", \"16\", \"30\", \"35\" ]\\nlet totalMiles = 0\\n\\nfor (const miles of weeklyMiles) {\\ntotalMiles += miles\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\nconsole.log(`I average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1005,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Undefined",
    "slug": "arrays-conditions-practice",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-24T22:02:29.059Z",
    "first_attempt": "2025-06-13T14:20:01.933Z",
    "last_attempt": "2025-06-24T22:02:29.059Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\nfor (const sleep of hours) {\\n  if (sleep < 7) {\\n    grumpyHours.push(sleep)\\n  }\\n  else {\\n    happyHours.push(sleep)\\n  }\\n}\\n\\nconsole.log(`I was grumpy on ${grumpyHours.length} days.\\nI was happy on ${happyHours.length} days.`)\"}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1006,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "HTML Elements",
    "slug": "html-elements",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-14T01:06:03.855Z",
    "last_attempt": "2025-06-14T01:06:03.890Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1007,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "HTML Elements",
    "slug": "html-elements",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-14T01:06:03.855Z",
    "last_attempt": "2025-06-14T01:06:03.855Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1008,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 127,
    "complete": true,
    "completed_on": "2025-06-14T05:19:57.850Z",
    "first_attempt": "2025-06-14T01:30:16.090Z",
    "last_attempt": "2025-06-14T05:19:57.850Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: lightblue;\\n}\\n\\narticle {\\n  border: 1px solid black;\\n  padding: 1rem;\\n}\\n\\np {\\n  color: purple;\\n}\\n\\nimg {\\n  height: 10rem;\\n}\\n/* Add your CSS styles here */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1009,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-14T02:03:27.552Z",
    "first_attempt": "2025-06-14T02:02:46.715Z",
    "last_attempt": "2025-06-14T02:03:27.552Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction checkIfNumberIsGreaterThan100(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayWelcome(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculatePriceAfterDiscount(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1010,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "CSS Selectors",
    "slug": "css-selectors",
    "attempts": 411,
    "complete": true,
    "completed_on": "2025-06-14T05:43:51.952Z",
    "first_attempt": "2025-06-14T05:20:01.991Z",
    "last_attempt": "2025-06-15T17:20:54.605Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\n\\n\\n#practice {\\n  background-color: lightblue;\\n  text-align: center;\\n  color: darkblue;\\n  font-size: large\\n}\\n\\n.highlight {\\n  background-color: #F0FF00\\n  \\n}\\nh1 {\\n  text-align: center;\\n}\\np {\\n  text-align: center;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1011,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-14T05:43:57.359Z",
    "last_attempt": "2025-06-14T05:43:57.359Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1012,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-14T05:43:57.359Z",
    "last_attempt": "2025-06-14T05:43:57.398Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1013,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-14T17:59:12.369Z",
    "first_attempt": "2025-06-14T17:59:12.368Z",
    "last_attempt": "2025-06-14T17:59:12.369Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\",\"Watermelon\",\"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1014,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-14T18:15:58.496Z",
    "first_attempt": "2025-06-14T18:08:48.294Z",
    "last_attempt": "2025-06-14T18:15:58.496Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\n\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\ndescribeActivity(\"running\")\\ndescribeActivity(\"hiking\")\\ndescribeActivity(\"swimming\")'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1015,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-06-14T18:51:38.304Z",
    "first_attempt": "2025-06-14T18:23:56.527Z",
    "last_attempt": "2025-06-14T18:51:38.304Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    // Add your code here\\n    torsoClothing = \"T-Shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sandals\"\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"T-Shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"Sweater\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Boots\"\\n}\\n\\nconsole.log(`This is what I\\'m wearing today:\\n${torsoClothing} on my torso\\n${legClothing} on my legs\\n${footWear} on my feet\\n`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1016,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Undefined",
    "slug": "functions-arguments",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-18T14:54:55.785Z",
    "first_attempt": "2025-06-14T19:09:15.090Z",
    "last_attempt": "2025-07-18T14:54:55.785Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1017,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-14T19:18:36.211Z",
    "first_attempt": "2025-06-14T19:18:36.211Z",
    "last_attempt": "2025-06-14T19:18:36.211Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1018,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-18T03:54:15.882Z",
    "first_attempt": "2025-06-14T19:26:12.243Z",
    "last_attempt": "2025-06-18T03:54:15.882Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(playerName, points) {\\n    console.log(`${playerName} scored ${points} points!`)\\n    \\n}\\n\\n// Then invoke the function with different player names and scores\\n\\ndisplayGameScore(\"Mario\", 100)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1019,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-14T19:37:44.616Z",
    "first_attempt": "2025-06-14T19:37:11.647Z",
    "last_attempt": "2025-06-14T19:37:44.616Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\"]\\n\\nfor (const types of topics) {\\nconsole.log(types)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1020,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-14T20:03:10.680Z",
    "first_attempt": "2025-06-14T19:50:51.662Z",
    "last_attempt": "2025-06-14T20:03:10.680Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunkOf of clay) {\\n   const mug = \"coffee mug\"\\n    toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1021,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-15T01:17:03.584Z",
    "first_attempt": "2025-06-15T01:17:03.584Z",
    "last_attempt": "2025-06-15T01:17:03.584Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n    if (ingredient === \"egg\") {\\n        finishedFood.push(\"biscuit\")\\n    }\\n    else if (ingredient === \"beef patty\") {\\n        finishedFood.push(\"burger\")\\n    }\\n    else if (ingredient === \"potato\") {\\n        finishedFood.push(\"fries\")\\n    }\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1022,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-15T04:29:37.339Z",
    "first_attempt": "2025-06-15T04:29:37.338Z",
    "last_attempt": "2025-06-15T04:29:37.339Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expenses of monthlyExpenses) {\\n  totalExpense += expenses// Add the current monthly cost to the value of totalExpense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1023,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Displaying Toy Properties",
    "slug": "leonids-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-15T08:51:56.499Z",
    "first_attempt": "2025-06-15T08:51:56.493Z",
    "last_attempt": "2025-06-15T08:51:56.499Z",
    "completed_code": "{'code': 'const toyInventory = [\\n  {\\n    name: \"Wooden Train\",\\n    priceInDollars: 25.99\\n  },\\n  {\\n    name: \"Stuffed Rabbit\",\\n    priceInDollars: 15.50\\n  },\\n  {\\n    name: \"Painted Kite\",\\n    priceInDollars: 12.00\\n  }\\n]\\n\\nfor (const toy of toyInventory) {\\n  console.log(toy.name);\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1024,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "New Toys",
    "slug": "leonids-arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-15T09:13:41.151Z",
    "first_attempt": "2025-06-15T09:13:41.141Z",
    "last_attempt": "2025-06-15T09:13:41.151Z",
    "completed_code": "{'code': '// For Part 1\\nlet toyInventory = [];\\n\\n// Add toy names using .push() individually\\ntoyInventory.push(\"Wooden Train\");\\ntoyInventory.push(\"Stuffed Rabbit\");\\ntoyInventory.push(\"Painted Kite\");\\n\\nconsole.log(toyInventory);\\n// For Part 2\\n// Create an empty array\\nlet toyInventoryCollection = [];\\n\\n// Add toy objects using .push() individually\\ntoyInventoryCollection.push({ name: \"Wooden Train\", priceInDollars: 30 });\\ntoyInventoryCollection.push({ name: \"Stuffed Rabbit\", priceInDollars: 25 });\\ntoyInventoryCollection.push({ name: \"Painted Kite\", priceInDollars: 20 });\\n\\nconsole.log(toyInventoryCollection);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1025,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Helping Customers Find the Right Toy",
    "slug": "leonids-conditionals",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-06-15T10:35:12.500Z",
    "first_attempt": "2025-06-15T09:19:50.791Z",
    "last_attempt": "2025-06-15T10:35:12.500Z",
    "completed_code": "{'code': 'const phones = [\\n  {\\n    id: 1,\\n    name: \"iPhone\",\\n    maker: \"Apple, Inc.\",\\n    operatingSystem: \"iOS\",\\n    price: 900,\\n    weight: 1.2\\n  },\\n  {\\n    id: 2,\\n    name: \"Galaxy\",\\n    maker: \"Samsung\",\\n    operatingSystem: \"Android\",\\n    price: 600,\\n    weight: 1.4\\n  },\\n  {\\n    id: 3,\\n    name: \"Pixel\",\\n    maker: \"Google\",\\n    operatingSystem: \"Android\",\\n    price: 750,\\n    weight: 1.3\\n  }\\n];\\n\\nconst phoneToFind = 2;\\n\\nfor (const phone of phones) {\\n  if (phone.id === phoneToFind) {\\n    phone.weight = phone.weight + 0.4;\\n\\n    console.log(`\\n      Phone Details:\\n      ID: ${phone.id}\\n      Name: ${phone.name}\\n      Maker: ${phone.maker}\\n      Operating System: ${phone.operatingSystem}\\n      Price: $${phone.price}\\n      Weight: ${phone.weight.toFixed(1)} grams\\n    `);\\n  }\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1026,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Toy Catalog",
    "slug": "leonids-string-interpolation",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-15T13:11:21.314Z",
    "first_attempt": "2025-06-15T13:04:53.189Z",
    "last_attempt": "2025-06-15T13:11:21.314Z",
    "completed_code": "{'code': '// 1. To define a variable called toyCatalog as an array\\n// 2. To add exactly three objects to it, each with name (string), priceInDollars (number), color (string)\\nconst toyCatalog = [\\n  { name: \"Wooden Train\", priceInDollars: 30, color: \"Red\" },\\n  { name: \"Stuffed Rabbit\", priceInDollars: 25, color: \"Gray\" },\\n  { name: \"Painted Kite\", priceInDollars: 20, color: \"Blue\" }\\n];\\n\\n// 3. To define a new array named displayCatalog\\nconst displayCatalog = [];\\n\\n// 4. To use a for...of loop to build a string for each toy\\n// 5. To push each formatted string into the displayCatalog array.\\nfor (const toy of toyCatalog) {\\n  // To build the string with the exact format using a template literal\\n  const formattedString = `Toy: ${toy.name} | Price: $${toy.priceInDollars} | Color: ${toy.color}`;\\n\\n  // To push the formatted string into the displayCatalog array\\n  displayCatalog.push(formattedString);\\n}\\n\\nconsole.log(displayCatalog);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1027,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Raising Prices",
    "slug": "leonids-iteration-update",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-15T13:35:42.949Z",
    "first_attempt": "2025-06-15T13:18:19.719Z",
    "last_attempt": "2025-06-15T13:35:42.949Z",
    "completed_code": "{'code': 'const toyCatalog = [\\n  { name: \"Wooden Train\", priceInDollars: 30, color: \"Red\" },\\n  { name: \"Stuffed Rabbit\", priceInDollars: 25, color: \"Gray\" },\\n  { name: \"Painted Kite\", priceInDollars: 20, color: \"Blue\" }\\n];\\n// Define an empty displayCatalog array\\nconst displayCatalog = [];\\n\\n// Use a for...of loop to iterate through each toy\\nfor (const toy of toyCatalog) {\\n    const originalPrice = toy.priceInDollars\\n  // Increase its priceInDollars by 5%\\n  // To calculate the 5% increament\\n  const increaseAmount = originalPrice * 0.05; \\n  const newPrice = originalPrice + increaseAmount;\\n\\n  // Format a string using template literals\\n  const formattedString = `Toy: ${toy.name} | Price: $${newPrice.toFixed(2)} | Color: ${toy.color}`;\\n\\n  // Push each formatted string into displayCatalog\\n  displayCatalog.push(formattedString);\\n}\\nconsole.log(displayCatalog);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1028,
  "fields": {
    "learner_github_id": "210836028",
    "learner_name": "Herbert Pollard",
    "title": "Finding the Flowers",
    "slug": "flower-shop",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-15T13:50:33.157Z",
    "first_attempt": "2025-06-15T13:46:31.393Z",
    "last_attempt": "2025-06-15T13:50:33.157Z",
    "completed_code": "{'code': 'const flowers = [\\n    {\\n        id: 1,\\n        type: \"Rose\",\\n        colors: [\"White\", \"Red\", \"Violet\", \"Pink\", \"Black\", \"Yellow\"],\\n        price: 2.59,\\n        usdaZones: [3, 4, 5, 6, 7, 8, 9, 10]\\n    },\\n    {\\n        id: 2,\\n        type: \"Tulip\",\\n        colors: [\"Orange\", \"White\", \"Yellow\", \"Violet\", \"Red\"],\\n        price: 1.04,\\n        usdaZones: [5, 6, 7, 8, 9]\\n    },\\n    {\\n        id: 3,\\n        type: \"Daisy\",\\n        colors: [\"Gold\", \"White\", \"Orange\", \"Crimson\"],\\n        price: 0.89,\\n        usdaZones: [3, 4, 5, 6, 7, 8]\\n    },\\n    {\\n        id: 4,\\n        type: \"Carnation\",\\n        colors: [\"Peach\", \"Yellow\", \"Magenta\", \"Pink\", \"Coral\"],\\n        price: 1.59,\\n        usdaZones: [5, 6, 7, 8, 9]\\n    },\\n    {\\n        id: 5,\\n        type: \"Bird of Paradise\",\\n        colors: [\"Orange\", \"White\"],\\n        price: 2.33,\\n        usdaZones: [9, 10, 11]\\n    },\\n    {\\n        id: 6,\\n        type: \"Delphinium\",\\n        colors: [\"Blue\", \"Violet\", \"White\", \"Pink\"],\\n        price: 1.67,\\n        usdaZones: [3, 4, 5, 6, 7]\\n    },\\n    {\\n        id: 7,\\n        type: \"Gladiolus\",\\n        colors: [\"White\", \"Cream\", \"Yellow\", \"Red\", \"Pink\", \"Green\", \"Lavender\", \"Voilet\"],\\n        price: 1.85,\\n        usdaZones: [6, 7, 8, 9, 10]\\n    },\\n    {\\n        id: 8,\\n        type: \"Lilly\",\\n        colors: [\"White\", \"Yellow\", \"Orange\", \"Red\", \"Pink\", \"Lavender\"],\\n        price: 1.52,\\n        usdaZones: [3, 4, 5, 6, 7, 8, 9]\\n    },\\n    {\\n        id: 9,\\n        type: \"Chinese Lantern\",\\n        colors: [\"Orange\"],\\n        price: 2.33,\\n        usdaZones: [3, 4, 5, 6, 7, 8, 9]\\n    }\\n]\\n\\n/*\\n    Below are some functions, in which you will write ALL of your\\n    code. Do not modify the code that defines the functions, and\\n    do not write any code outside of the functions.\\n*/\\n\\n/*\\n    This function should return inexpensive flowers - ones that cost\\n    less than 2.00 per flower.\\n*/\\nconst inexpensiveFlowers = () => {\\n    let filteredFlowers = []\\n\\n    for (const flower of flowers) {\\n        if (flower.price < 2.00) {\\n            filteredFlowers.push(flower);\\n        }\\n    }\\n\\n    return filteredFlowers\\n}\\n\\n/*\\n    This function should return flowers that grow in\\n    USDA zones of 3 and 8.\\n*/\\nconst zoneFlowers = () => {\\n    let filteredFlowers = []\\n\\n    for (const flower of flowers) {\\n        if (flower.usdaZones.includes(3) && flower.usdaZones.includes(8)) {\\n            filteredFlowers.push(flower);\\n        }\\n    }\\n\\n    return filteredFlowers\\n}\\n\\n/*\\n    This function should return flowers that come in the color Orange\\n*/\\nconst orangeFlowers = () => {\\n    let filteredFlowers = []\\n\\n    for (const flower of flowers) {\\n        if (flower.colors.includes(\"Orange\")) {\\n            filteredFlowers.push(flower);\\n        }\\n    }\\n\\n    return filteredFlowers\\n}\\n\\n/*\\n    This function should return an HTML representation of each flower.\\n*/\\nconst flowersAsHTML = () => {\\n    let flowersHTMLString = \"\"\\n\\n    for (const flower of flowers) {\\n        let colorsHtml = \"\";\\n        for (const color of flower.colors) {\\n            colorsHtml += `<section>${color}</section>\\\\n`;\\n        }\\n\\n        let zonesHtml = \"\";\\n        for (const zone of flower.usdaZones) {\\n            zonesHtml += `<div>${zone}</div>\\\\n`;\\n        }\\n\\n        flowersHTMLString += `\\n<article>\\n    <h1>${flower.type}</h1>\\n\\n    <h2>Colors</h2>\\n    ${colorsHtml}\\n    <h2>USDA Zones</h2>\\n    ${zonesHtml}\\n</article>\\n`;\\n    }\\n\\n    return flowersHTMLString\\n}\\n\\nconsole.log(\"Inexpensive Flowers:\", inexpensiveFlowers());\\nconsole.log(\"Zone Flowers (3 & 8):\", zoneFlowers());\\nconsole.log(\"Orange Flowers:\", orangeFlowers());\\nconsole.log(\"Flowers as HTML:\\\\n\", flowersAsHTML());'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1029,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-container",
    "attempts": 121,
    "complete": true,
    "completed_on": "2025-06-15T18:04:37.164Z",
    "first_attempt": "2025-06-15T17:44:46.647Z",
    "last_attempt": "2025-06-15T18:04:37.165Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Base styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n/* Card styles */\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.card h3 {\\n  margin-top: 0;\\n  color: #2c3e50;\\n}\\n\\n/* Flexbox container properties */\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  align-items: flex-start;\\n  gap: 20px;\\n  padding: 10px;\\n}\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1030,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Undefined",
    "slug": "flexbox-items",
    "attempts": 245,
    "complete": true,
    "completed_on": "2025-06-15T19:25:05.199Z",
    "first_attempt": "2025-06-15T18:05:06.286Z",
    "last_attempt": "2025-06-15T19:25:05.199Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n/* Add your flexbox properties below */\\n\\n.navbar {\\n  display: flex;\\n  flex: auto;\\n  align-self: center;\\n}\\n\\n.content {\\n  display: flex;\\n  flex: 0;\\n}\\n\\n.sidebar {\\n  display: flex;\\n  flex: 1;\\n}\\n\\n.card {\\n  display: flex;\\n  align-self: center;\\n  flex: auto;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1031,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-15T18:14:29.345Z",
    "first_attempt": "2025-06-15T18:09:33.486Z",
    "last_attempt": "2025-06-15T18:14:29.345Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\n\\nconst makeGreeting = (name) => {\\n    return \"Hello, \"+ (name) +\"!\"\\n}\\n\\n// Invoke the function and assign the return value to a variable\\n\\nconst greeting = makeGreeting(\"John\")\\n\\n// Console log the variable you used above to see the greeting\\n\\nconsole.log(greeting)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1032,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-15T19:15:16.989Z",
    "first_attempt": "2025-06-15T19:03:41.835Z",
    "last_attempt": "2025-06-15T19:15:16.989Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\n\\nconst calculateSubtotal = (quantity, price) => {\\n    return quantity * price\\n}\\n\\n// Create calculateTotal here\\n\\nconst calculateTotal = (subtotal) => {\\n    return subtotal * 1.08\\n}\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\n\\nconst subtotal = calculateSubtotal(3, 4.99)\\n\\n// 2. Calculate the final total with tax\\n\\nconst total = calculateTotal(subtotal)\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $ ${subtotal}`)\\nconsole.log(`Total with tax: $${total}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1033,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-15T20:32:55.068Z",
    "first_attempt": "2025-06-15T20:14:24.773Z",
    "last_attempt": "2025-06-15T20:32:55.068Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\n\\nconst calculateGameScore = (basePoints, multiplier) => {\\n    const score = basePoints * multiplier\\n    if (score >= 1000) {\\n        return \"High Score!\"\\n    } else {\\n        return \"Keep trying!\"\\n    } \\n}\\n\\n  // Call your function with different values and store a result in a variable\\n\\nconst score = calculateGameScore(500, 2.5)\\n\\n  // Log the result to see the output\\n\\n  console.log(score)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1034,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Undefined",
    "slug": "functions-arrow-syntax",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-07-01T01:51:16.824Z",
    "first_attempt": "2025-06-15T21:42:20.790Z",
    "last_attempt": "2025-07-01T01:51:16.824Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\n\\n\\nconst add = (x,y) => x + y\\n\\n\\nconst greet = name => `Hello, ${name}!`\\n\\n\\nconst getRandomNumber = () => Math.random()\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber()\\nconst greeting = greet(\"McKenney\")\\nconst sum = add(3, 4)\\n\\nconsole.log(random, greeting, sum)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1035,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-15T22:47:48.702Z",
    "first_attempt": "2025-06-15T22:47:48.701Z",
    "last_attempt": "2025-06-15T22:47:48.702Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\n\\nconst makeGreeting = name => \"Hello, \" + name + \"!\"\\n\\n// Invoke the function and assign the return value to a variable\\n\\nconst greet = makeGreeting(\"McKenney\")\\n\\n// Console log the variable you used above to see the greeting\\n\\nconsole.log(greet)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1036,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Undefined",
    "slug": "functions-return-working",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-15T23:08:15.155Z",
    "first_attempt": "2025-06-15T23:07:20.649Z",
    "last_attempt": "2025-06-28T19:20:24.994Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (price, quantity) => {\\n    return price * quantity\\n}\\n\\n// Create calculateTotal here\\n\\nconst calculateTotal = (price) => {\\n    return price * 1.08\\n}\\n\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst finalSubtotal = calculateSubtotal(4.99, 3)\\n\\n\\n// 2. Calculate the final total with tax\\nconst finalTotal = calculateTotal(finalSubtotal)\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $${finalSubtotal}`)\\nconsole.log(`Total with tax: $${finalTotal}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1037,
  "fields": {
    "learner_github_id": "218592",
    "learner_name": "Steve Brownlee",
    "title": "Undefined",
    "slug": "functions-arrow-syntax",
    "attempts": 6,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-16T16:24:25.224Z",
    "last_attempt": "2025-06-18T21:42:39.768Z",
    "completed_code": "False",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1038,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-16T17:11:42.848Z",
    "first_attempt": "2025-06-16T17:09:32.648Z",
    "last_attempt": "2025-06-16T17:11:42.848Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 158\\nlet marchBill = 138\\nlet aprilBill = 121\\nlet mayBill = 118\\nlet juneBill = 90\\nlet julyBill = 98\\nlet augustBill = 103\\nlet septemberBill = 94\\nlet octoberBill = 88\\nlet novemberBill = 101\\nlet decemberBill = 111\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1039,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-16T17:20:52.004Z",
    "first_attempt": "2025-06-16T17:19:25.021Z",
    "last_attempt": "2025-06-16T17:20:52.004Z",
    "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\n      let price = 10;\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n      if (isWeekend) {\\n    price += 2;\\n  }\\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n        if (age < 12 || age >= 65) {\\n    price *= 0.5;\\n  }\\n      // 4. Return the final ticket price\\n    return price;\\n};\\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\nconst adultWeekdayPrice = calculateTicketPrice(25, false);\\nconsole.log(adultWeekdayPrice);\\nconst adultWeekendPrice = calculateTicketPrice(35, true);\\nconsole.log(adultWeekendPrice);\\nconst childWeekdayPrice = calculateTicketPrice(8, false);\\nconsole.log(childWeekdayPrice);\\n  // Example:\\n  // const adultWeekdayPrice = calculateTicketPrice(25, false);\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1040,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-16T17:24:13.244Z",
    "first_attempt": "2025-06-16T17:22:56.233Z",
    "last_attempt": "2025-06-16T17:24:13.245Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n  // 1. Create a variable to store the total, starting at 0\\n  let total = 0;\\n  \\n  // 2. Loop through all prices in the array and add each to total\\n  for (const price of prices) {\\n    total += price;\\n  }\\n  \\n  // 3. Check if total is over $100, and if so apply a 10% discount\\n  if (total > 100) {\\n    total = total * 0.9; // Apply 10% discount (multiply by 0.9)\\n  }\\n  \\n  // 4. Return the final total\\n  return total;\\n};\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\nconst test1 = calculateCartTotal([20, 30, 40]);\\nconsole.log(`Test 1 - [20, 30, 40]: ${test1}`); \\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1041,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-16T17:25:58.534Z",
    "first_attempt": "2025-06-16T17:25:58.530Z",
    "last_attempt": "2025-06-16T17:25:58.534Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    return time * 100 + targets * 50;\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    return targets > 10 ? 1000 : 0;\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n    const basePoints = calculateBasePoints(time, targets);\\n    const bonusPoints = calculateBonus(targets);\\n    \\n    // Add the results together and return the sum\\n    return basePoints + bonusPoints;\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\nconst result = calculateFinalScore(2, 5);\\nconsole.log(result);\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1042,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-16T17:30:11.095Z",
    "first_attempt": "2025-06-16T17:27:36.291Z",
    "last_attempt": "2025-06-16T17:30:11.095Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  if (time === \"morning\" || name.charAt(0).toLowerCase() === \"a\") {\\n    return `Good morning, ${name}!`;\\n  }\\n  // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  else if (time === \"afternoon\") {\\n    return `Good afternoon, ${name}!`;\\n  }\\n  // Otherwise, return \"Hello, [name]!\"\\n  else {\\n    return `Hello, ${name}!`;\\n  }\\n};\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  // If topic is \"weather\", return the weather joke\\n  if (topic === \"weather\") {\\n    return \"What do you call a stormy robot? A thunder-bot!\";\\n  }\\n  // If topic is \"animals\", return the animals joke\\n  else if (topic === \"animals\") {\\n    return \"Why don\\'t elephants use computers? They\\'re afraid of the mouse!\";\\n  }\\n  // Otherwise, return the default joke\\n  else {\\n    return \"Why did the robot go to therapy? It had a screw loose!\";\\n  }\\n};\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n  const greetingsArray = [];\\n  \\n  // Loop through each person in the people array\\n  for (let i = 0; i < people.length; i++) {\\n    // Create a greeting for each person\\n    const greeting = createGreeting(people[i], time);\\n    // Add the greeting to the array\\n    greetingsArray.push(greeting);\\n  }\\n  \\n  // Return the array of greetings\\n  return greetingsArray;\\n};\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n  const greeting = createGreeting(name, time);\\n  // Get the joke\\n  const joke = tellJoke(topic);\\n  // Return both together\\n  return `${greeting} ${joke}`;\\n};\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1043,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 330,
    "complete": true,
    "completed_on": "2025-06-16T17:37:54.619Z",
    "first_attempt": "2025-06-16T17:30:14.715Z",
    "last_attempt": "2025-06-16T17:37:54.619Z",
    "completed_code": "{'files': {'index.html': '\\n<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n    <meta charset=\"UTF-8\">\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\\n    <title>How I Became A Software Developer</title>\\n    <style>\\n        body {\\n            font-family: Arial, sans-serif;\\n            max-width: 800px;\\n            margin: 0 auto;\\n            padding: 20px;\\n            line-height: 1.6;\\n            color: #333;\\n        }\\n        h1 {\\n            color: #2c3e50;\\n            border-bottom: 3px solid #3498db;\\n            padding-bottom: 10px;\\n        }\\n        h2 {\\n            color: #34495e;\\n            margin-top: 30px;\\n        }\\n        section {\\n            margin-bottom: 25px;\\n        }\\n        p {\\n            margin-bottom: 15px;\\n        }\\n        ol {\\n            padding-left: 25px;\\n        }\\n        li {\\n            margin-bottom: 5px;\\n        }\\n    </style>\\n</head>\\n<body>\\n    <h1>How I Became A Software Developer</h1>\\n    \\n    <article>\\n        <h2>Nashville Software School</h2>\\n        \\n        <section>\\n            <p>Attending Nashville Software School was a transformative experience that changed the trajectory of my career. The intensive, hands-on bootcamp provided me with the practical skills and confidence needed to transition into the tech industry. The supportive community of instructors and fellow students created an environment where I could challenge myself daily and grow both technically and personally. What started as a leap of faith became the foundation for my new career in software development.</p>\\n        </section>\\n        \\n        <section>\\n            <p>I learned the following skills</p>\\n            <ol>\\n                <li>Variables</li>\\n                <li>Arrays</li>\\n                <li>Objects</li>\\n                <li>Functions</li>\\n                <li>HTML</li>\\n                <li>CSS</li>\\n            </ol>\\n        </section>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1044,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "HTML Elements",
    "slug": "html-elements",
    "attempts": 319,
    "complete": true,
    "completed_on": "2025-06-16T17:46:49.631Z",
    "first_attempt": "2025-06-16T17:38:22.205Z",
    "last_attempt": "2025-06-16T17:46:49.631Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n<header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n\\n  <main>\\n    <article>\\n      <h1>Welcome to Me</h1>\\n\\n      <section>\\n        <p>I am a leading provider of innovative solutions for businesses of all sizes. I specialize in creating cutting-edge products at cost that help our customers succeed.</p>\\n      </section>\\n\\n      <section>\\n        <p>Born in 1989, I have grown from a small service desk technican to head IT for a thriving startup in the Online Sportsbook industry. It\\'s time to start a new career as a software developer, and see where it takes me.</p>\\n      </section>\\n    </article>\\n  </main>\\n\\n  <footer>\\n    <p>Jason Walker Norman, 2025, json.norman@gmail.com</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1045,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 173,
    "complete": true,
    "completed_on": "2025-06-16T17:55:53.326Z",
    "first_attempt": "2025-06-16T17:46:51.334Z",
    "last_attempt": "2025-06-16T17:55:53.326Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n font-family: Arial, sans-serif;\\n line-height: 1.6;\\n margin: 0;\\n padding: 20px;\\n color: #333;\\n background-color: lightblue;\\n}\\n\\narticle {\\n border: 1px solid black;\\n padding: 1rem;\\n}\\n\\np {\\n color: purple;\\n}\\n\\nimg {\\n height: 10rem;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1046,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "CSS Selectors",
    "slug": "css-selectors",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-06-16T18:00:39.946Z",
    "first_attempt": "2025-06-16T17:55:56.069Z",
    "last_attempt": "2025-06-16T18:00:39.946Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': \"body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n  background-color: #f9f9f9;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\n\\n/* Element Selectors - Paragraphs and Headings */\\nh1 {\\n  color: #2c3e50;\\n  font-size: 2.5rem;\\n  margin-bottom: 0.5rem;\\n  text-align: center;\\n}\\n\\nh2 {\\n  color: #34495e;\\n  font-size: 2rem;\\n  margin-top: 2rem;\\n  margin-bottom: 1rem;\\n  border-bottom: 2px solid #3498db;\\n  padding-bottom: 0.5rem;\\n}\\n\\nh3 {\\n  color: #2c3e50;\\n  font-size: 1.5rem;\\n  margin-top: 1.5rem;\\n  margin-bottom: 0.8rem;\\n}\\n\\np {\\n  margin-bottom: 1rem;\\n  text-align: justify;\\n  font-size: 1.1rem;\\n}\\n\\n/* Other Element Selectors */\\nnav {\\n  background-color: #3498db;\\n  padding: 1rem;\\n  margin-bottom: 2rem;\\n  border-radius: 5px;\\n}\\n\\nnav ul {\\n  list-style: none;\\n  padding: 0;\\n  margin: 0;\\n  display: flex;\\n  justify-content: center;\\n  gap: 2rem;\\n}\\n\\nnav li {\\n  margin: 0;\\n}\\n\\nnav a {\\n  color: white;\\n  text-decoration: none;\\n  font-weight: bold;\\n  padding: 0.5rem 1rem;\\n  border-radius: 3px;\\n  transition: background-color 0.3s;\\n}\\n\\nnav a:hover {\\n  background-color: #2980b9;\\n}\\n\\nsection {\\n  margin-bottom: 3rem;\\n  padding: 2rem;\\n  background-color: white;\\n  border-radius: 8px;\\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\\n}\\n\\nform {\\n  background-color: #ecf0f1;\\n  padding: 2rem;\\n  border-radius: 8px;\\n  margin-top: 1rem;\\n}\\n\\nlabel {\\n  display: block;\\n  margin-bottom: 0.5rem;\\n  font-weight: bold;\\n  color: #2c3e50;\\n}\\n\\ninput {\\n  width: 100%;\\n  padding: 0.8rem;\\n  margin-bottom: 1rem;\\n  border: 1px solid #bdc3c7;\\n  border-radius: 4px;\\n  font-size: 1rem;\\n}\\n\\ninput:focus {\\n  outline: none;\\n  border-color: #3498db;\\n  box-shadow: 0 0 5px rgba(52, 152, 219, 0.3);\\n}\\n\\nbutton {\\n  background-color: #e74c3c;\\n  color: white;\\n  padding: 0.8rem 2rem;\\n  border: none;\\n  border-radius: 4px;\\n  font-size: 1.1rem;\\n  cursor: pointer;\\n  transition: background-color 0.3s;\\n}\\n\\nbutton:hover {\\n  background-color: #c0392b;\\n}\\n\\nfooter {\\n  background-color: #2c3e50;\\n  color: white;\\n  text-align: center;\\n  padding: 2rem;\\n  margin-top: 3rem;\\n  border-radius: 8px;\\n}\\n\\n/* Class Selectors */\\n.highlight {\\n  background-color: #f1c40f;\\n  padding: 1rem;\\n  border-left: 4px solid #f39c12;\\n  font-weight: bold;\\n  font-style: italic;\\n}\\n\\n.example {\\n  background-color: #e8f6f3;\\n  border: 1px solid #16a085;\\n  padding: 1.5rem;\\n  margin: 1.5rem 0;\\n  border-radius: 6px;\\n}\\n\\n.code {\\n  background-color: #2c3e50;\\n  color: #ecf0f1;\\n  padding: 0.2rem 0.5rem;\\n  border-radius: 3px;\\n  font-family: 'Courier New', monospace;\\n  font-size: 0.9rem;\\n}\\n\\n.features {\\n  background-color: #f8f9fa;\\n  padding: 1rem;\\n  border-radius: 5px;\\n  margin-top: 1rem;\\n}\\n\\n.features li {\\n  padding: 0.5rem 0;\\n  border-bottom: 1px solid #dee2e6;\\n}\\n\\n.features li:last-child {\\n  border-bottom: none;\\n}\\n\\n.form-group {\\n  margin-bottom: 1.5rem;\\n}\\n\\n/* ID Selectors */\\n#main-header {\\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\\n  color: white;\\n  text-align: center;\\n  padding: 3rem 2rem;\\n  margin-bottom: 2rem;\\n  border-radius: 10px;\\n  box-shadow: 0 4px 15px rgba(0,0,0,0.2);\\n}\\n\\n#main-header h1 {\\n  color: white;\\n  margin-bottom: 1rem;\\n  text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\\n}\\n\\n#main-header p {\\n  font-size: 1.2rem;\\n  opacity: 0.9;\\n  margin-bottom: 0;\\n}\\n\\n#basics {\\n  border-left: 5px solid #3498db;\\n}\\n\\n#advanced {\\n  border-left: 5px solid #e74c3c;\\n}\\n\\n#practice {\\n  border-left: 5px solid #27ae60;\\n}\\n\\n#name {\\n  border-left: 3px solid #3498db;\\n}\\n\\n#email {\\n  border-left: 3px solid #e74c3c;\\n}\\n\"}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1047,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-16T18:03:52.986Z",
    "first_attempt": "2025-06-16T18:00:41.837Z",
    "last_attempt": "2025-06-16T18:03:52.986Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': 'body {\\n font-family: Arial, sans-serif;\\n margin: 0;\\n padding: 0;\\n}\\n\\n.navbar {\\n /* Make the navbar a flex container and style it */\\n display: flex;\\n justify-content: space-between;\\n align-items: center;\\n background-color: #333;\\n padding: 1rem 2rem;\\n box-shadow: 0 2px 4px rgba(0,0,0,0.1);\\n}\\n\\n.logo {\\n color: white;\\n font-size: 1.5rem;\\n font-weight: bold;\\n}\\n\\n.nav-links {\\n list-style: none;\\n /* Add the rules to make it a flex container */\\n display: flex;\\n /* Try different flex-direction values: row, row-reverse, column, column-reverse */\\n flex-direction: row;\\n /* Set justify-content to space-evenly */\\n justify-content: space-evenly;\\n margin: 0;\\n padding: 0;\\n gap: 2rem;\\n}\\n\\n.nav-links li {\\n margin: 0;\\n}\\n\\n.nav-links a {\\n color: white;\\n text-decoration: none;\\n padding: 0.5rem 1rem;\\n border-radius: 4px;\\n transition: background-color 0.3s ease;\\n}\\n\\n.nav-links a:hover {\\n background-color: #555;\\n}\\n\\n/* \\nDEMO: Different flex-direction values\\nUncomment one of these sections to see the different layouts:\\n\\n1. Row (default - horizontal left to right):\\n.nav-links { flex-direction: row; }\\n\\n2. Row-reverse (horizontal right to left):\\n.nav-links { flex-direction: row-reverse; }\\n\\n3. Column (vertical top to bottom):\\n.nav-links { flex-direction: column; }\\n\\n4. Column-reverse (vertical bottom to top):\\n.nav-links { flex-direction: column-reverse; }\\n*/\\n</style>\\n</head>\\n<body>\\n<nav class=\"navbar\">\\n<div class=\"logo\">My Website</div>\\n<ul class=\"nav-links\">\\n<li><a href=\"#\">Home</a></li>\\n<li><a href=\"#\">About</a></li>\\n<li><a href=\"#\">Services</a></li>\\n<li><a href=\"#\">Contact</a></li>\\n</ul>\\n</nav>\\n\\n<div style=\"padding: 2rem; color: #333;\">\\n<h2>Flexbox Navigation Demo</h2>\\n<p>This navigation uses flexbox with the following properties:</p>\\n<ul>\\n<li><strong>display: flex</strong> - Makes the nav-links a flex container</li>\\n<li><strong>flex-direction: row</strong> - Items flow horizontally (try changing to row-reverse, column, or column-reverse)</li>\\n<li><strong>justify-content: space-evenly</strong> - Distributes items with equal space around them</li>\\n</ul>\\n<p>To see different flex-direction values, uncomment the CSS sections in the code above.</p>\\n</div>\\n</body>\\n</html>'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1048,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-16T18:13:55.150Z",
    "first_attempt": "2025-06-16T18:02:17.795Z",
    "last_attempt": "2025-06-16T18:13:55.150Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => {\\n    return quantity * price\\n}\\n\\n// Create calculateTotal here\\nconst calculateTotal = (calculateSubtotal) => {\\n    return calculateSubtotal * 1.08\\n}\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subTotal = calculateSubtotal(3, 4.99)\\n\\n// 2. Calculate the final total with tax\\nconst total = calculateTotal(subTotal)\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $ ${subTotal}`)\\nconsole.log(`Total with tax: $${total}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1049,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-container",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-16T18:05:24.893Z",
    "first_attempt": "2025-06-16T18:03:54.657Z",
    "last_attempt": "2025-06-16T18:05:24.893Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  font-size: 0.8rem;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n}\\n\\n/* Add your flexbox container properties below */\\n\\n.container {\\n display: flex;\\n flex-wrap: wrap;\\n justify-content: center;\\n gap: 20px;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1050,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Flexbox Item Properties",
    "slug": "flexbox-items",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-16T18:08:27.667Z",
    "first_attempt": "2025-06-16T18:05:50.661Z",
    "last_attempt": "2025-06-16T18:08:27.667Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n/* Add your flexbox properties below */\\n\\nbody {\\n font-family: Arial, sans-serif;\\n margin: 0;\\n padding: 0;\\n color: #333;\\n min-height: 100vh;\\n display: flex;\\n flex-direction: column;\\n}\\n\\n/* Navigation Bar Flexbox */\\n.navbar {\\n display: flex;\\n justify-content: space-between;\\n align-items: center;\\n background-color: #2c3e50;\\n padding: 1rem 2rem;\\n color: white;\\n}\\n\\n.logo {\\n font-size: 1.5rem;\\n font-weight: bold;\\n}\\n\\n.nav-links {\\n display: flex;\\n list-style: none;\\n margin: 0;\\n padding: 0;\\n gap: 2rem;\\n}\\n\\n.nav-links a {\\n color: white;\\n text-decoration: none;\\n padding: 0.5rem 1rem;\\n border-radius: 4px;\\n transition: background-color 0.3s;\\n}\\n\\n.nav-links a:hover {\\n background-color: rgba(255, 255, 255, 0.1);\\n}\\n\\n/* Main Container Flexbox */\\n.container {\\n display: flex;\\n flex: 1;\\n gap: 2rem;\\n padding: 2rem;\\n max-width: 1200px;\\n margin: 0 auto;\\n width: 100%;\\n box-sizing: border-box;\\n}\\n\\n/* Main Content */\\n.content {\\n flex: 2;\\n min-width: 0; /* Prevents flex item from overflowing */\\n}\\n\\n.content h1 {\\n color: #2c3e50;\\n margin-bottom: 2rem;\\n}\\n\\n/* Cards Container Flexbox */\\n.cards {\\n display: flex;\\n gap: 1.5rem;\\n flex-wrap: wrap;\\n}\\n\\n.card {\\n display: flex;\\n flex-direction: column;\\n flex: 1;\\n min-width: 250px;\\n background: #f8f9fa;\\n border: 1px solid #e9ecef;\\n border-radius: 8px;\\n padding: 1.5rem;\\n box-shadow: 0 2px 4px rgba(0,0,0,0.1);\\n transition: transform 0.2s, box-shadow 0.2s;\\n}\\n\\n.card:hover {\\n transform: translateY(-2px);\\n box-shadow: 0 4px 8px rgba(0,0,0,0.15);\\n}\\n\\n.card h3 {\\n color: #2c3e50;\\n margin-top: 0;\\n margin-bottom: 1rem;\\n}\\n\\n.card p {\\n flex-grow: 1;\\n line-height: 1.6;\\n margin-bottom: 1.5rem;\\n}\\n\\n.card button {\\n background-color: #3498db;\\n color: white;\\n border: none;\\n padding: 0.75rem 1.5rem;\\n border-radius: 4px;\\n cursor: pointer;\\n font-size: 0.9rem;\\n transition: background-color 0.3s;\\n align-self: flex-start;\\n}\\n\\n.card button:hover {\\n background-color: #2980b9;\\n}\\n\\n/* Sidebar */\\n.sidebar {\\n flex: 1;\\n background-color: #ecf0f1;\\n padding: 1.5rem;\\n border-radius: 8px;\\n height: fit-content;\\n}\\n\\n.sidebar h2 {\\n color: #2c3e50;\\n margin-top: 0;\\n margin-bottom: 1rem;\\n}\\n\\n.sidebar ul {\\n list-style: none;\\n padding: 0;\\n margin-bottom: 2rem;\\n}\\n\\n.sidebar li {\\n margin-bottom: 0.5rem;\\n}\\n\\n.sidebar a {\\n color: #3498db;\\n text-decoration: none;\\n padding: 0.5rem 0;\\n display: block;\\n border-radius: 4px;\\n transition: color 0.3s;\\n}\\n\\n.sidebar a:hover {\\n color: #2980b9;\\n text-decoration: underline;\\n}\\n\\n.info-box {\\n background-color: #d5dbdb;\\n padding: 1rem;\\n border-radius: 4px;\\n border-left: 4px solid #3498db;\\n}\\n\\n.info-box p {\\n margin: 0;\\n font-style: italic;\\n line-height: 1.6;\\n}\\n\\n/* Footer */\\nfooter {\\n background-color: #34495e;\\n color: white;\\n text-align: center;\\n padding: 1rem;\\n margin-top: auto;\\n}\\n\\nfooter p {\\n margin: 0;\\n}\\n\\n/* Responsive Design */\\n@media (max-width: 768px) {\\n .navbar {\\n  flex-direction: column;\\n  gap: 1rem;\\n  text-align: center;\\n }\\n \\n .nav-links {\\n  gap: 1rem;\\n }\\n \\n .container {\\n  flex-direction: column;\\n  padding: 1rem;\\n }\\n \\n .cards {\\n  flex-direction: column;\\n }\\n \\n .card {\\n  min-width: auto;\\n }\\n}\\n\\n@media (max-width: 480px) {\\n .nav-links {\\n  flex-direction: column;\\n  gap: 0.5rem;\\n }\\n \\n .cards {\\n  gap: 1rem;\\n }\\n}\\n</style>\\n</head>\\n<body>\\n<header>\\n<nav class=\"navbar\">\\n<div class=\"logo\">FlexBox Demo</div>\\n<ul class=\"nav-links\">\\n<li><a href=\"#\">Home</a></li>\\n<li><a href=\"#\">About</a></li>\\n<li><a href=\"#\">Services</a></li>\\n<li><a href=\"#\">Contact</a></li>\\n</ul>\\n</nav>\\n</header>\\n<div class=\"container\">\\n<main class=\"content\">\\n<h1>Learning Flexbox</h1>\\n<div class=\"cards\">\\n<div class=\"card\">\\n<h3>Flex Container</h3>\\n<p>The parent element that has display: flex applied to it.</p>\\n<button>Learn More</button>\\n</div>\\n<div class=\"card\">\\n<h3>Flex Items</h3>\\n<p>The direct children of a flex container.</p>\\n<button>Learn More</button>\\n</div>\\n<div class=\"card\">\\n<h3>Main Axis</h3>\\n<p>The primary axis along which flex items are laid out.</p>\\n<button>Learn More</button>\\n</div>\\n</div>\\n</main>\\n<aside class=\"sidebar\">\\n<h2>Resources</h2>\\n<ul>\\n<li><a href=\"#\">Flexbox Guide</a></li>\\n<li><a href=\"#\">CSS Tricks</a></li>\\n<li><a href=\"#\">MDN Documentation</a></li>\\n</ul>\\n<div class=\"info-box\">\\n<p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n</div>\\n</aside>\\n</div>\\n<footer>\\n<p>&copy; 2025 Flexbox Tutorial</p>\\n</footer>\\n</body>\\n</html>\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1051,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-16T18:28:15.279Z",
    "first_attempt": "2025-06-16T18:24:52.461Z",
    "last_attempt": "2025-06-16T18:28:15.279Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"2023 MacBook Air\"\\nconst phone = \"2022 iPhone 14 Pro\"\\nconst television = \"50-inch Toshiba\"\\nconst refrigerator = \"2019 Maytag Top-Freezer Refrigerator\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television} television, my ${computer} computer, my ${refrigerator} refrigerator and my ${phone} phone`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1052,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-16T20:42:22.418Z",
    "first_attempt": "2025-06-16T19:21:18.911Z",
    "last_attempt": "2025-06-16T20:42:22.418Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome\\ncombinedIncome += spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome \\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1053,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-16T20:03:14.169Z",
    "first_attempt": "2025-06-16T20:03:14.167Z",
    "last_attempt": "2025-06-16T20:03:14.169Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\nconst calculateGameScore = (points, multiplier) => {\\n    const gameScore = points * multiplier\\n    if (gameScore >= 1000) {\\n        return \"High Score!\"\\n    } else {\\n        return \"Keep trying!\"\\n    }\\n    \\n}\\n\\n  // Call your function with different values and store a result in a variable\\nconst score = calculateGameScore(500, 2.5)\\n\\n  // Log the result to see the output\\nconsole.log(score)\\n  '}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1054,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Undefined",
    "slug": "functions-scope-basics",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-20T14:55:30.190Z",
    "first_attempt": "2025-06-16T20:26:51.049Z",
    "last_attempt": "2025-06-20T14:55:30.190Z",
    "completed_code": "{'code': '// This code has scope problems!\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\nlet score = 0\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1055,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-16T22:03:25.136Z",
    "first_attempt": "2025-06-16T21:15:41.083Z",
    "last_attempt": "2025-06-16T22:03:25.136Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome\\ncombinedIncome += spouseIncome\\n\\n// 2. Total monthly expenses\\nlet totalMonthlyExpenses = 0\\ntotalMonthlyExpenses += phoneBill\\ntotalMonthlyExpenses += mortgage\\ntotalMonthlyExpenses += carInsurance\\ntotalMonthlyExpenses += healthInsurance\\n\\n// 3. Net monthly income\\nlet netMonthlyIncome = combinedIncome - totalMonthlyExpenses\\n\\nconst statement = `Our combined monthly income is ${combinedIncome}. \\nOur total monthly expenses are ${totalMonthlyExpenses}. \\nOur net monthly income is ${netMonthlyIncome}.`  // Use backticks and calculations here\\nconsole.log(statement)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1056,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-16T22:35:54.492Z",
    "first_attempt": "2025-06-16T21:27:11.476Z",
    "last_attempt": "2025-06-16T22:35:54.492Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 13, 15, 7, 3, 21 ]\\nlet totalMiles = 0\\n// Declare a variable to store the total. Initial value is 0.\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\n  totalMiles += miles\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log(`\\nI have average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.\\n`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1057,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-17T18:14:48Z",
    "first_attempt": "2025-06-17T16:27:33Z",
    "last_attempt": "2025-06-17T18:14:48Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.substring(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1058,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-17T18:46:03Z",
    "first_attempt": "2025-06-17T16:41:49Z",
    "last_attempt": "2025-06-17T18:46:03Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\nconsole.log(\"Yoga was fun today.\")\\n}\\nelse {\\n    console.log(\"I slept in.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1059,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-17T17:16:13.332Z",
    "first_attempt": "2025-06-17T17:16:13.332Z",
    "last_attempt": "2025-06-17T17:16:13.332Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1060,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-17T17:19:13.119Z",
    "first_attempt": "2025-06-17T17:19:13.118Z",
    "last_attempt": "2025-06-17T17:19:13.119Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1061,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-17T17:24:13.603Z",
    "first_attempt": "2025-06-17T17:24:13.602Z",
    "last_attempt": "2025-06-17T17:24:13.603Z",
    "completed_code": "{'code': 'const topics = [\"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\"]\\n\\nfor (const topic of topics) {\\n    console.log(topic)\\n}\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1062,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-17T17:46:01.341Z",
    "first_attempt": "2025-06-17T17:33:52.694Z",
    "last_attempt": "2025-06-17T17:46:01.341Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const clayChunk of clay) {\\n    const mug = `coffee mug`;\\n    toFireInKiln.push(mug);\\n}\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1063,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-17T17:51:27.987Z",
    "first_attempt": "2025-06-17T17:51:27.987Z",
    "last_attempt": "2025-06-17T17:51:27.987Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n   if (ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\")\\n  }\\n  else if (ingredient  === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n  }\\n  else if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\")\\n  }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1064,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-17T17:56:51.029Z",
    "first_attempt": "2025-06-17T17:56:51.029Z",
    "last_attempt": "2025-06-17T17:56:51.029Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const money of monthlyExpenses) {\\n    totalExpense += money\\n  // Add the current monthly cost to the value of totalExpense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1065,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-20T16:32:26.753Z",
    "first_attempt": "2025-06-17T18:03:40.197Z",
    "last_attempt": "2025-06-20T16:32:26.753Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [100, 200, 400, 50]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\n    totalMiles += miles\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles} miles each week.\\\\nI have driven a total of ${totalMiles} miles`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1066,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-17T20:25:02Z",
    "first_attempt": "2025-06-17T19:59:59Z",
    "last_attempt": "2025-06-17T20:25:02Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\" \\n    // Add your code here\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n   torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"  \\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\" \\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\" \\n}\\nelse {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\" \\n}\\nconsole.log(`${torsoClothing}\\n${legClothing}\\n${footWear}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1067,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 17,
    "complete": true,
    "completed_on": "2025-06-17T20:51:59.874Z",
    "first_attempt": "2025-06-17T20:26:28.152Z",
    "last_attempt": "2025-06-17T20:51:59.874Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  // Add your logic here\\n  if (coffee.includes(\"light\")) {\\n     light++\\n  }\\n  else if (coffee.includes(\"medium\")) {\\n     medium++\\n  }\\n  else if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")) {\\n     toastyDark++\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1068,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "arrays-conditions-practice",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-08-05T22:33:18.007Z",
    "first_attempt": "2025-06-17T20:40:41.837Z",
    "last_attempt": "2025-08-05T22:33:18.007Z",
    "completed_code": "{'code': 'const hours = [6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const sleep of hours) {\\n    if (sleep < 7) {\\n        grumpyHours.push(sleep)\\n    }\\n    else {\\n        happyHours.push(sleep)\\n    }\\n}\\n\\nconsole.log(`I was grumpy on ${grumpyHours.length} days. I was happy on ${happyHours.length} days.`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1069,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-06-18T03:31:06.697Z",
    "first_attempt": "2025-06-17T21:10:53.354Z",
    "last_attempt": "2025-06-18T03:31:06.697Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\nconsole.log(disorderArray)\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1070,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 308,
    "complete": true,
    "completed_on": "2025-06-17T22:42:31.037Z",
    "first_attempt": "2025-06-17T22:35:02.630Z",
    "last_attempt": "2025-06-17T22:42:31.037Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n  <h1>How I Became A Software Developer</h1>\\n\\n  <article>\\n    <h2>Nashville Software School</h2>\\n\\n    <section>\\n      <p>My journey into software development began when I enrolled at Nashville Software School. The instructors were amazing and the curriculum was challenging but rewarding.</p>\\n    </section>\\n\\n    <section>\\n      <p>I learned the following skills</p>\\n      <ol>\\n        <li>Variables</li>\\n        <li>Arrays</li>\\n        <li>Objects</li>\\n        <li>Functions</li>\\n        <li>HTML</li>\\n        <li>CSS</li>\\n      </ol>\\n    </section>\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1071,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Introduction to HTML",
    "slug": "html-elements",
    "attempts": 519,
    "complete": true,
    "completed_on": "2025-06-17T23:33:37.906Z",
    "first_attempt": "2025-06-17T22:42:43.749Z",
    "last_attempt": "2025-06-17T23:33:37.906Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header>\\n    <nav>\\n     <div> <a href=\"#\">Home</a> </div>\\n     <div> <a href=\"#\">Projects</a> </div>\\n      <div> <a href=\"#\"> Education</a> </div>\\n    </nav>\\n  </header>\\n\\n     <main>\\n      <article>\\n        <h1>Evan</h1>\\n        <section>\\n          <p>\\n          I have mainly worked in hourly wage paying jobs i am at the beginning of my career to becoming a junior software engineer, looking to do that with the help of NSS.\\n          </p>\\n        </section>\\n        <section>\\n          <p>\\n          I want to be a software engineer because I enjoy solving problems and building things that make life easier or more efficient. Technology is always evolving, and I’m excited to be part of an industry where I can keep learning, stay creative, and make a real impact. \\n          </p>\\n        </section>\\n      </article>\\n     </main>\\n     \\n     <footer>\\n      Evan Alford @ 20025 evan.al4d@gmail.com\\n     </footer>\\n  <!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1072,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-17T21:39:25.129Z",
    "first_attempt": null,
    "last_attempt": "2025-06-17T21:39:25.129Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1073,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-17T23:29:27Z",
    "first_attempt": "2025-06-17T23:12:42Z",
    "last_attempt": "2025-06-17T23:29:27Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos \\n\\n// Determine storage type based on total\\nphotoStorage = \"Photo Album\"\\n\\n// Determine album color based on gender comparison\\nalbumColor = \"plum\"\\n\\nif (totalPhotos > 110) { \\n  photoStorage = \"Photo Album\"\\n}\\n  \\nelse if (totalPhotos < 110 && totalPhotos >= 50){\\n  photoStorage = \"Shoe Box\"\\n}\\nelse  {\\n  photoStorage = \"Envelopes\"\\n}\\n\\n\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1074,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-17T23:34:08.948Z",
    "last_attempt": "2025-06-17T23:34:08.948Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1075,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-17T23:34:08.948Z",
    "last_attempt": "2025-06-17T23:34:08.994Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1076,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-17T23:43:51Z",
    "first_attempt": "2025-06-17T23:43:51Z",
    "last_attempt": "2025-06-17T23:43:51Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1077,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "variables-intro",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-18T00:06:05.486Z",
    "first_attempt": "2025-06-17T23:54:02.671Z",
    "last_attempt": "2025-06-26T23:54:34.335Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 100  \\nlet marchBill = 105 \\nlet aprilBill = 110 \\nlet mayBill = 115\\nlet juneBill = 120 \\nlet julyBill = 125 \\nlet augustBill = 130 \\nlet septemberBill = 135 \\nlet octoberBill = 140 \\nlet novemberBill = 145 \\nlet decemberBill = 150\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill +\\nmayBill + juneBill + julyBill + augustBill + septemberBill +\\noctoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1078,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "CSS Basics",
    "slug": "css-selectors",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-18T00:06:37.460Z",
    "last_attempt": "2025-06-18T00:06:37.460Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1079,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "CSS Basics",
    "slug": "css-selectors",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-18T00:06:37.460Z",
    "last_attempt": "2025-06-18T00:06:37.479Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1080,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 393,
    "complete": true,
    "completed_on": "2025-06-18T16:28:21.899Z",
    "first_attempt": "2025-06-18T00:29:12.327Z",
    "last_attempt": "2025-06-18T16:30:16.904Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  background-color: orange\\n}\\n\\n.nav-links {\\n  list-style: none;\\n  display: flex;\\n  flex-direction: column;\\n  flex-direction: column-reverse;\\n  flex-direction: row;\\n  flex-direction: row-reverse;\\n  justify-content: space-evenly;\\n}\\n\\n/* Make the navbar a flex container and style it */\\n\\n.navbar { \\n  background-color: white;\\n  padding: 10px;\\n  border: 2px solid black;\\n  \\n  \\n\\n  \\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1081,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-18T00:33:27.384Z",
    "first_attempt": "2025-06-18T00:33:27.383Z",
    "last_attempt": "2025-06-18T00:33:27.384Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"HP Laptop\"\\nconst phone = \"I Phone 16\"\\nconst television = \"LG 55E\"\\nconst refrigerator = \"Siemens 550\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the folloving electronic devices.My ${television} television, my ${computer} computer, my ${refrigerator} refrigerator, and my ${phone} phone`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1082,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-18T00:56:56.481Z",
    "first_attempt": "2025-06-18T00:56:56.481Z",
    "last_attempt": "2025-06-18T00:56:56.481Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1083,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-18T01:05:13.543Z",
    "first_attempt": "2025-06-18T01:05:13.542Z",
    "last_attempt": "2025-06-18T01:05:13.543Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1084,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-18T01:32:58.345Z",
    "first_attempt": "2025-06-18T01:27:31.628Z",
    "last_attempt": "2025-06-18T01:32:58.345Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome\\ncombinedIncome += spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome = combinedIncome - internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses \\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1085,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-18T01:40:26.025Z",
    "first_attempt": "2025-06-18T01:40:26.024Z",
    "last_attempt": "2025-06-18T01:40:26.025Z",
    "completed_code": "{'code': 'const topics = [\"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\"]\\n\\nfor (const topic of topics) {\\n   console.log(topic)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1086,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-18T01:42:39.770Z",
    "first_attempt": "2025-06-18T01:42:39.769Z",
    "last_attempt": "2025-06-18T01:42:39.770Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const mugs of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1087,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-18T01:46:46.368Z",
    "first_attempt": "2025-06-18T01:45:12.512Z",
    "last_attempt": "2025-06-18T01:46:46.368Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  if (ingredient === \"egg\") {\\n   finishedFood.push(\"biscuit\")\\n  }\\n  else if (ingredient === \"beef patty\") {\\n   finishedFood.push(\"burger\")\\n  }\\n  else if (ingredient === \"potato\") {\\n   finishedFood.push(\"fries\")\\n  }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1088,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-18T02:19:23.742Z",
    "first_attempt": "2025-06-18T01:57:57.506Z",
    "last_attempt": "2025-06-18T02:19:23.742Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\nconsole.log(`Our combined monthly income is ${myIncome + spouseIncome}.`)\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\nconsole.log(`Our total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.`)\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}. \\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance +healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\nconsole.log(statement) // Use backticks and calculations here'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1089,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-18T01:59:56.023Z",
    "first_attempt": "2025-06-18T01:59:56.022Z",
    "last_attempt": "2025-06-18T01:59:56.023Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expense of monthlyExpenses) {\\n  totalExpense += expense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1090,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-18T02:05:34.590Z",
    "first_attempt": "2025-06-18T02:05:34.589Z",
    "last_attempt": "2025-06-18T02:05:34.590Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [1, 3, 8, 11]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (mileCount of weeklyMiles) {\\n   totalMiles += mileCount\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log(`\\nI average ${averageMiles} each week.\\nI have driven a total of ${totalMiles} miles.\\n`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1091,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-18T02:10:49.374Z",
    "first_attempt": "2025-06-18T02:10:49.372Z",
    "last_attempt": "2025-06-18T02:10:49.374Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\nconst cutoff = 7\\n\\nfor (const hour of hours) {\\n   if (hour < cutoff) {\\n      grumpyHours.push(hour)\\n   } else if (hour >= cutoff) {\\n      happyHours.push(hour)\\n   }\\n}\\n\\nconsole.log(`\\nI was grumpy on ${grumpyHours.length} days.\\nI was happy on ${happyHours.length} days.\\n`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1092,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-18T02:17:08.513Z",
    "first_attempt": "2025-06-18T02:17:08.512Z",
    "last_attempt": "2025-06-18T02:17:08.513Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")) {\\n   light++\\n  }\\n  if (coffee.includes(\"medium\")) {\\n   medium++\\n  }\\n  if (coffee.includes(\"dark\") || coffee.includes(\"toasty\")) {\\n   toastyDark++\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `\\nI need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them\\n`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1093,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-18T02:21:22.200Z",
    "first_attempt": "2025-06-18T02:21:22.199Z",
    "last_attempt": "2025-06-18T02:21:22.200Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1094,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-18T21:29:05.892Z",
    "first_attempt": "2025-06-18T02:26:02.183Z",
    "last_attempt": "2025-06-18T21:29:05.892Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1095,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "html-intro",
    "attempts": 261,
    "complete": true,
    "completed_on": "2025-06-26T00:56:38.660Z",
    "first_attempt": "2025-06-18T03:03:30.433Z",
    "last_attempt": "2025-06-26T23:54:26.044Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n      <h1>How I Became A Software Developer</h1>\\n      <article>\\n        <h2> Nashville Software School </h2>\\n        <section>\\n          <p> I feel very lucky to have joined NSS.</p>\\n        </section>\\n        <section>\\n          <p> I learned the following skills </p>\\n          <ol>\\n            <li>Variables</li>\\n            <li>Arrays</li>\\n            <li>Objects</li>\\n            <li>Functions</li>\\n            <li>HTML</li>\\n            <li>CSS</li>\\n          </ol>\\n        </section>\\n\\n      </article>\\n      \\n      \\n      \\n\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1096,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "functions-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-23T16:02:02.824Z",
    "first_attempt": "2025-06-18T03:03:46.450Z",
    "last_attempt": "2025-06-23T16:02:02.824Z",
    "completed_code": "{'code': '// Write your function here\\r\\nfunction greetPet(){\\r\\n    console.log(\"Good dog\")\\r\\n}\\r\\n\\r\\n\\r\\n// This should display \"Good dog!\" when you run your code\\r\\ngreetPet()\\r\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1097,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Undefined",
    "slug": "arrays-review",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-18T03:30:19.050Z",
    "first_attempt": "2025-06-18T03:04:55.263Z",
    "last_attempt": "2025-06-18T03:30:19.050Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []        // \"Clothing\"\\nconst entertainment = []   // \"Movie\"\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nconst utilities = []       // \"Utility\"\\nconst largePurchases = []  // Expenses over 100.00\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nlet averageExpense = 0\\n\\n\\n/*\\n Use your algorithmic thinking for the steps to\\n categorize, total, and average the expenses.\\n\\n Be patient and take your time. This is challenging.\\n*/\\n\\nfor (const monthlyExpense of monthlyExpenses) {\\n   const [label, amount] = monthlyExpense.split(\":\")\\n   if (amount > 100) {\\n      largePurchases.push(parseFloat(amount))\\n   }\\n   if (label.includes(\"Clothing\")) {\\n      clothing.push(parseFloat(amount))\\n   }\\n   if (label.includes(\"Movie\")) {\\n      entertainment.push(parseFloat(amount))\\n   }\\n   if (label.includes(\"Groceries\") || label.includes(\"Restaurant\")) {\\n      food.push(parseFloat(amount))\\n   }\\n   if (label.includes(\"Fuel\") || label.includes(\"Gas\")) {\\n      fuel.push(parseFloat(amount))\\n   }\\n   if (label.includes(\"Lyft\") || label.includes(\"Uber\")) {\\n      travel.push(parseFloat(amount))\\n   }\\n   if (label.includes(\"Utility\")) {\\n      utilities.push(parseFloat(amount))\\n   }\\n   totalExpenses += parseFloat(amount)\\n}\\n\\naverageExpense = parseFloat(totalExpenses / monthlyExpenses.length)\\nconsole.log(`My total expenses were ${totalExpenses} and my average expense was ${averageExpense}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1098,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Undefined",
    "slug": "functions-arrow-syntax",
    "attempts": 31,
    "complete": true,
    "completed_on": "2025-07-29T23:51:53.109Z",
    "first_attempt": "2025-06-18T04:29:45.122Z",
    "last_attempt": "2025-07-29T23:51:53.109Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\nconst add = (x, y) => x + y\\nconst greet = name => `Hello, ${name}!`\\nconst getRandomNumber = () => Math.random()\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber()\\nconst greeting = greet(\"Alice\")\\nconst sum = add(5, 3)\\n\\nconsole.log(random, greeting, sum)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1099,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-container",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-18T16:28:27.886Z",
    "last_attempt": "2025-06-18T16:28:27.886Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1100,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-container",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-18T16:28:27.886Z",
    "last_attempt": "2025-06-18T16:28:27.904Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1101,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-18T21:45:40.007Z",
    "last_attempt": "2025-06-18T21:45:40.007Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1102,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 3,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-18T21:45:40.007Z",
    "last_attempt": "2025-06-18T21:45:40.057Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1103,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Flexbox Item Properties",
    "slug": "functions-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-18T22:10:22.710Z",
    "first_attempt": "2025-06-18T22:04:26.340Z",
    "last_attempt": "2025-06-18T22:10:22.710Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet() {\\n    console.log(\"good dog\")\\n}\\n    \\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1104,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Undefined",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-18T22:07:27.588Z",
    "first_attempt": "2025-06-18T22:07:27.587Z",
    "last_attempt": "2025-06-18T22:07:27.588Z",
    "completed_code": "{'code': 'const topics = [ \\n    \"Variables\", \\n    \"Loops\",\\n    \"Arrays\",\\n    \"Functions\",\\n    \"Objects\",\\n    \"Modules\",\\n    \"Events\"\\n    ]\\n\\nfor (const topic of topics) {\\nconsole.log(topic)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1105,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-18T22:19:28.948Z",
    "first_attempt": "2025-06-18T22:19:16.261Z",
    "last_attempt": "2025-06-18T22:19:28.948Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n    console.log(\"Touchdown!\")\\n\\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore()\\ncelebrateScore()\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1106,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Undefined",
    "slug": "arrays-push",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-19T00:31:43.598Z",
    "first_attempt": "2025-06-18T23:00:10.372Z",
    "last_attempt": "2025-06-19T00:31:43.598Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const item of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1107,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-19T00:31:40.759Z",
    "first_attempt": "2025-06-19T00:19:32.052Z",
    "last_attempt": "2025-06-19T00:31:40.759Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\nconsole.log(email.trim())\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\nconsole.log(phone.replace(\" \" , \"-\"))\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\nconsole.log(customerName.toUpperCase())\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\nconsole.log(password.includes(\"x\"))\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\nconsole.log(filename.slice(0, 4))\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim() \\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1108,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T01:09:40.910Z",
    "first_attempt": "2025-06-19T01:09:40.909Z",
    "last_attempt": "2025-06-19T01:09:40.910Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  \\n   if (ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\")\\n  }\\n  else if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n  }\\n  else if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\")\\n  }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1109,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T01:25:34.807Z",
    "first_attempt": "2025-06-19T01:25:34.805Z",
    "last_attempt": "2025-06-19T01:25:34.807Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\nif (iWokeUpEarly === false) {\\n    console.log(\"I will watch Netflix\")\\n}\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse {console.log(\"I will watch netflix\")}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1110,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T01:54:25.390Z",
    "first_attempt": "2025-06-19T01:54:25.388Z",
    "last_attempt": "2025-06-19T01:54:25.390Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const total of monthlyExpenses) {\\n  totalExpense += total\\n  // Add the current monthly cost to the value of totalExpense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)\\n\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1111,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-19T02:22:26.241Z",
    "first_attempt": "2025-06-19T02:07:44.151Z",
    "last_attempt": "2025-06-19T02:22:26.241Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n}\\nelse if(temperature < 95 && temperature >= 75){\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n}\\nelse if(temperature < 75 && temperature >= 50){\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\nelse if(temperature < 50 && temperature >= 35){\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\nelse{\\n   torsoClothing = \"jacket\"\\n   legClothing = \"pants\"\\n   footWear = \"boots\" \\n}\\nconsole.log(`I will wear\\n${torsoClothing}\\n${legClothing}\\n${footWear}\\n`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1112,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "html-elements",
    "attempts": 386,
    "complete": true,
    "completed_on": "2025-06-26T01:26:56.710Z",
    "first_attempt": "2025-06-19T02:30:01.014Z",
    "last_attempt": "2025-06-26T01:27:29.953Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n  <main>\\n    <article>\\n      <h1>Deniz</h1>\\n      <section>\\n        <p>I am a Flight Test Engineer. I worked for defence industry\\n          for 14 years.</p>\\n      </section>\\n      <section>\\n        <p>Because of Restrictions of Clearance. \\n          I am not a U.S citizen</p>\\n      </section>\\n    </article>\\n  </main>\\n  <footer>\\n    <p> Deniz, 2025, dkocusa@outlook.com</p>\\n  </footer>\\n\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1113,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "css-basics",
    "attempts": 95,
    "complete": true,
    "completed_on": "2025-06-26T02:55:03.004Z",
    "first_attempt": "2025-06-19T02:30:03.264Z",
    "last_attempt": "2025-06-26T18:29:36.973Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n  </article>\\n</body>\\n</html>', 'styles.css': '/* Basic page styling */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  color: #333;\\n  background-color: lightblue;     /* ✅ İstenilen arka plan rengi */\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\narticle {\\n  max-width: 800px;\\n  margin: 0 auto;\\n  background-color: white;\\n  padding: 1rem;                   /* ✅ İstenilen padding değeri */\\n  border-radius: 8px;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n  border: 1px solid black;        /* ✅ İstenilen siyah çerçeve */\\n}\\n\\n/* Heading styles */\\nh1 {\\n  color: #2c3e50;\\n  border-bottom: 1px solid black;\\n  padding-bottom: 10px;\\n}\\n\\nh2 {\\n  color: #3498db;\\n  margin-top: 25px;\\n}\\n\\n/* Paragraph styles */\\np {\\n  margin-bottom: 15px;\\n  color: purple;                  /* ✅ İstenilen mor paragraf rengi */\\n}\\n\\np.intro {\\n  font-size: 1.1em;\\n  font-weight: bold;\\n  color: #555; /* Özel class olduğu için bu geçerli kalabilir */\\n}\\n\\n/* List styles */\\nul {\\n  background-color: #f5f5f5;\\n  padding: 20px 20px 20px 40px;\\n  border-left: 4px solid #3498db;\\n  border-radius: 0 4px 4px 0;\\n}\\n\\nli {\\n  margin-bottom: 8px;\\n}\\n\\nli:last-child {\\n  margin-bottom: 0;\\n}\\n\\n/* Note box */\\n.note {\\n  background-color: #fffde7;\\n  border: 1px solid #ffd54f;\\n  border-radius: 4px;\\n  padding: 10px 15px;\\n  margin-top: 30px;\\n}\\n\\n.note p {\\n  margin: 0;\\n  font-style: italic;\\n  color: #5d4037;\\n}\\n\\n/* ✅ Görsel boyutu */\\nimg {\\n  height: 10rem;\\n}'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1114,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "css-selectors",
    "attempts": 178,
    "complete": true,
    "completed_on": "2025-06-26T17:51:55.368Z",
    "first_attempt": "2025-06-19T02:30:07.684Z",
    "last_attempt": "2025-06-26T18:44:55.591Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\np {\\n  color: #DC143C;\\n}\\n\\nh1, h2 {\\n  color:#7FFF00;\\n}\\n.highlight {\\n  front-weight: bold;\\n  background-color: yellow;\\n}\\n#main-title {\\n  text-align: center;\\n  front-size: 2.5 rem;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1115,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "flexbox-intro",
    "attempts": 77,
    "complete": true,
    "completed_on": "2025-06-26T18:43:18.642Z",
    "first_attempt": "2025-06-19T02:30:09.561Z",
    "last_attempt": "2025-06-26T22:36:49.147Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '.nav-links{\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-evenly;\\n}\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links {\\n  list-style: none;\\n}\\n\\n/* Make the navbar a flex container and style it */\\n\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1116,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Introduction to Flexbox",
    "slug": "variables-review",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-19T03:46:57.689Z",
    "first_attempt": "2025-06-19T02:36:29.394Z",
    "last_attempt": "2025-06-19T03:46:57.689Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos += femalePhotos\\ntotalPhotos += malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110){\\n    photoStorage = \"Photo Album\"\\n}\\nelse if (totalPhotos < 110 && totalPhotos >= 50){\\n    photoStorage = \"Shoe Box\"\\n}\\nelse{\\n    photoStorage = \"Envelopes\"\\n}\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos){\\n    albumColor = \"plum\"\\n}\\nelse {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women \\nThere are ${malePhotos} photos of men \\nPhotos will be stored in a ${photoStorage} colored ${albumColor} \\n`\\n\\n// Log your output\\nconsole.log(output)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1117,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T03:04:03.910Z",
    "first_attempt": "2025-06-19T03:04:03.909Z",
    "last_attempt": "2025-06-19T03:04:03.910Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 201, 189, 132, 238, 195 ]\\nlet totalMiles = 0\\n\\nfor (const total of weeklyMiles) {\\n   totalMiles += total\\n}\\n\\nlet averageMiles = totalMiles / weeklyMiles.length\\n  \\nconsole.log(`I average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles`)\\n\\n// Declare a variable to store the total. Initial value is 0.\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\n// for () {\\n\\n\\n\\n// Declare a new variable to store the average miles over time\\n\\nconst averageMonthlyMiles = totalMiles / weeklyMiles.length'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1118,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "flexbox-container",
    "attempts": 116,
    "complete": true,
    "completed_on": "2025-06-26T22:59:47.131Z",
    "first_attempt": "2025-06-19T04:03:42.922Z",
    "last_attempt": "2025-06-26T23:50:29.721Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  font-size: 0.8rem;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n}\\n\\n/* Add your flexbox container properties below */\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  gap: 10px;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1119,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "flexbox-items",
    "attempts": 21,
    "complete": true,
    "completed_on": "2025-06-26T23:49:55.869Z",
    "first_attempt": "2025-06-19T04:03:50.177Z",
    "last_attempt": "2025-06-26T23:49:55.869Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n.navbar {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  background-color: #444;\\n  color: white;\\n  padding: 1rem;\\n}\\n\\n.navbar ul {\\n  display: flex;\\n  gap: 1rem;\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.main-layout {\\n  display: flex;\\n  flex-wrap: wrap;\\n  gap: 1rem;\\n  padding: 1rem;\\n}\\n\\n.content {\\n  flex: 3;\\n  display: flex;\\n  flex-wrap: wrap;\\n  gap: 1rem;\\n}\\n\\n.sidebar {\\n  flex: 1;\\n  min-width: 200px;\\n  background-color: #f2f2f2;\\n  padding: 1rem;\\n}\\n\\n.card {\\n  background-color: white;\\n  border: 1px solid #ccc;\\n  padding: 1rem;\\n  flex: 1 1 200px;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1120,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Undefined",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T04:05:46.727Z",
    "first_attempt": "2025-06-19T04:05:46.725Z",
    "last_attempt": "2025-06-19T04:05:46.727Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours) {\\n  if (hour < 7) {\\n    grumpyHours.push(hour)\\n  }\\n  else { \\n    happyHours.push(hour)\\n  }\\n}\\n\\n\\nconsole.log(`\\nI was grumpy on ${grumpyHours.length} days.\\nI was happy on ${happyHours.length} days.\\n`)\\n\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1121,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T04:09:52.069Z",
    "first_attempt": "2025-06-19T04:09:52.068Z",
    "last_attempt": "2025-06-19T04:09:52.069Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [yellowFruit , orangeFruit , redFruit , greenFruit , blueFruit]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1122,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T16:45:16.396Z",
    "first_attempt": "2025-06-19T16:45:16.394Z",
    "last_attempt": "2025-06-19T16:45:16.396Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\r\\nconst dirtyDishes = [\\r\\n    \"Soup bowl\",\\r\\n    \"Water glass\",\\r\\n    \"Salad plate\",\\r\\n    \"Wine glass\",\\r\\n    \"Dinner plate\",\\r\\n    \"Whiskey glass\"\\r\\n]\\r\\n\\r\\n// Your code here\\r\\nconst firstGlass = dirtyDishes[1]\\r\\nconst secondGlass =dirtyDishes[3]\\r\\nconst thirdGlass =dirtyDishes[5]\\r\\n\\r\\n// Display the glasses to clean\\r\\nconsole.log(\"I am cleaning the following glasses:\")\\r\\nconsole.log(`- ${firstGlass}`)\\r\\nconsole.log(`- ${secondGlass}`)\\r\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1123,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T17:45:12.259Z",
    "first_attempt": "2025-06-19T17:45:12.258Z",
    "last_attempt": "2025-06-19T17:45:12.259Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const wine of hours) {\\n  if (wine >= 7) {\\n    happyHours.push(wine)\\n  }\\n  else {\\n    grumpyHours.push(wine)\\n  }\\n}\\nconst totalGrumpyHours = grumpyHours.reduce((sum, hour) => sum + hour, 0)\\nconst totalHappyHours = happyHours.reduce((sum, hour) => sum + hour, 0)\\n\\nconsole.log(`\\nI was grumpy on ${totalGrumpyHours} days.\\nI was happy on ${totalHappyHours} days.\\n`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1124,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-19T18:06:32.222Z",
    "first_attempt": "2025-06-19T18:01:10.711Z",
    "last_attempt": "2025-06-19T18:06:32.222Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  // Add your logic here\\n  if (coffee.includes(\"light\")) {\\n    light++\\n  }\\n  else if (coffee.includes(\"medium\")) {\\n    medium++\\n  }\\n  else if (coffee.includes(\"dark\") || coffee.includes(\"toasty\")) {\\n    toastyDark++\\n  }\\n\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `\\nI need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1125,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T18:22:10.705Z",
    "first_attempt": "2025-06-19T18:22:10.705Z",
    "last_attempt": "2025-06-19T18:22:10.705Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\");\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\");\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`;\\n\\n// Display the output\\nconsole.log(output);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1126,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T18:40:10.493Z",
    "first_attempt": "2025-06-19T18:40:10.491Z",
    "last_attempt": "2025-06-19T18:40:10.493Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []        // \"Clothing\"\\nconst entertainment = []   // \"Movie\"\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nconst utilities = []       // \"Utility\"\\nconst largePurchases = []  // Expenses over 100.00\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nlet averageExpense = 0\\n\\n// Process each expense\\nmonthlyExpenses.forEach(expense => {\\n    // Split the expense string to get vendor and amount\\n    const [vendor, amountStr] = expense.split(\\':\\')\\n    const amount = parseFloat(amountStr)\\n    \\n    // Add to total expenses\\n    totalExpenses += amount\\n    \\n    // Check for large purchases first (over 100.00)\\n    if (amount > 100.00) {\\n        largePurchases.push(amount)\\n    }\\n    \\n    // Categorize based on vendor name (case-insensitive)\\n    const vendorLower = vendor.toLowerCase()\\n    \\n    if (vendorLower.includes(\\'clothing\\')) {\\n        clothing.push(amount)\\n    }\\n    \\n    if (vendorLower.includes(\\'movie\\')) {\\n        entertainment.push(amount)\\n    }\\n    \\n    if (vendorLower.includes(\\'groceries\\') || vendorLower.includes(\\'restaurant\\')) {\\n        food.push(amount)\\n    }\\n    \\n    if (vendorLower.includes(\\'fuel\\') || vendorLower.includes(\\'gas\\')) {\\n        fuel.push(amount)\\n    }\\n    \\n    if (vendorLower.includes(\\'lyft\\') || vendorLower.includes(\\'uber\\')) {\\n        travel.push(amount)\\n    }\\n    \\n    if (vendorLower.includes(\\'utility\\')) {\\n        utilities.push(amount)\\n    }\\n})\\n\\n// Calculate average expense\\naverageExpense = totalExpenses / monthlyExpenses.length\\n\\n// Display results\\nconsole.log(\\'=== EXPENSE CATEGORIZATION RESULTS ===\\')\\nconsole.log(`\\\\nClothing expenses: [${clothing.join(\\', \\')}]`)\\nconsole.log(`Entertainment expenses: [${entertainment.join(\\', \\')}]`)\\nconsole.log(`Food expenses: [${food.join(\\', \\')}]`)\\nconsole.log(`Fuel expenses: [${fuel.join(\\', \\')}]`)\\nconsole.log(`Travel expenses: [${travel.join(\\', \\')}]`)\\nconsole.log(`Utilities expenses: [${utilities.join(\\', \\')}]`)\\nconsole.log(`Large purchases (>$100): [${largePurchases.join(\\', \\')}]`)\\n\\nconsole.log(\\'\\\\n=== SUMMARY STATISTICS ===\\')\\nconsole.log(`Total monthly expenses: $${totalExpenses.toFixed(2)}`)\\nconsole.log(`Average expense: $${averageExpense.toFixed(2)}`)\\nconsole.log(`Number of transactions: ${monthlyExpenses.length}`)\\n\\n// Additional category totals\\nconsole.log(\\'\\\\n=== CATEGORY TOTALS ===\\')\\nconsole.log(`Clothing total: $${clothing.reduce((sum, amt) => sum + amt, 0).toFixed(2)}`)\\nconsole.log(`Entertainment total: $${entertainment.reduce((sum, amt) => sum + amt, 0).toFixed(2)}`)\\nconsole.log(`Food total: $${food.reduce((sum, amt) => sum + amt, 0).toFixed(2)}`)\\nconsole.log(`Fuel total: $${fuel.reduce((sum, amt) => sum + amt, 0).toFixed(2)}`)\\nconsole.log(`Travel total: $${travel.reduce((sum, amt) => sum + amt, 0).toFixed(2)}`)\\nconsole.log(`Utilities total: $${utilities.reduce((sum, amt) => sum + amt, 0).toFixed(2)}`)\\nconsole.log(`Large purchases total: $${largePurchases.reduce((sum, amt) => sum + amt, 0).toFixed(2)}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1127,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T18:43:33.667Z",
    "first_attempt": "2025-06-19T18:43:33.667Z",
    "last_attempt": "2025-06-19T18:43:33.667Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet() {\\n    console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1128,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T18:46:00.326Z",
    "first_attempt": "2025-06-19T18:46:00.325Z",
    "last_attempt": "2025-06-19T18:46:00.326Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n    console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\n\\ncelebrateScore()\\ncelebrateScore()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1129,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-19T18:57:52.466Z",
    "first_attempt": "2025-06-19T18:49:32.229Z",
    "last_attempt": "2025-06-19T18:57:52.466Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreaterThan(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction createWelcomeMessage(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculatePriceAfter20PercentDiscount(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1130,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-20T16:35:47.094Z",
    "first_attempt": "2025-06-19T19:11:03.900Z",
    "last_attempt": "2025-06-20T16:35:47.094Z",
    "completed_code": "{'code': \"/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\ndescribeActivity('archery.')\\ndescribeActivity('boxing.')\\ndescribeActivity('walking my dog.')\"}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1131,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-19T19:25:43.603Z",
    "first_attempt": "2025-06-19T19:25:12.567Z",
    "last_attempt": "2025-06-19T19:25:43.603Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\ncalculateTotal(50)\\n// 2. Calculate total for $99.99\\ncalculateTotal(99.99)\\n// 3. Calculate total for $25.50\\ncalculateTotal(25.50)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1132,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T19:33:16.883Z",
    "first_attempt": "2025-06-19T19:33:16.880Z",
    "last_attempt": "2025-06-19T19:33:16.883Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(player, score) {\\n    console.log(`${player} scored ${score} points!`)\\n}\\n\\n// Then invoke the function with different player names and scores\\ndisplayGameScore(\"Mario\", 100)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1133,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T19:40:18.592Z",
    "first_attempt": "2025-06-19T19:40:18.591Z",
    "last_attempt": "2025-06-19T19:40:18.592Z",
    "completed_code": "{'code': '// These are already arrow functions (correct syntax)\\nconst add = (x, y) => {\\n    return x + y\\n}\\n\\nconst greet = (name) => {\\n    return \"Hello, \" + name + \"!\"\\n}\\n\\nconst getRandomNumber = () => {\\n    return Math.random()\\n}\\n\\n// Test the functions by invoking them\\nconst random = getRandomNumber()\\nconst greeting = greet(\"Alice\")\\nconst sum = add(5, 3)\\n\\nconsole.log(random, greeting, sum)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1134,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T19:43:18.887Z",
    "first_attempt": "2025-06-19T19:43:18.886Z",
    "last_attempt": "2025-06-19T19:43:18.887Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\nconst makeGreeting = (name) => `Hello, ${name}!`;\\n\\n// Invoke the function and assign the return value to a variable\\nconst greeting = makeGreeting(\"John\");\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(greeting);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1135,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-19T19:45:20.665Z",
    "first_attempt": "2025-06-19T19:44:26.696Z",
    "last_attempt": "2025-06-19T19:45:20.665Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => {\\n    return quantity * price;\\n};\\n\\n// Create calculateTotal here\\nconst calculateTotal = (subtotal, taxRate = 0.08) => {\\n    return subtotal + (subtotal * taxRate);\\n};\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(3, 4.99);\\n\\n// 2. Calculate the final total with tax\\nconst total = calculateTotal(subtotal);\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $${subtotal.toFixed(2)}`);\\nconsole.log(`Total with tax: $${total.toFixed(2)}`);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1136,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T23:52:20.714Z",
    "first_attempt": "2025-06-19T23:52:20.713Z",
    "last_attempt": "2025-06-19T23:52:20.714Z",
    "completed_code": "{'code': '// Create your arrow function here\\nconst calculateGameScore = (baseScore, multiplier) => {\\n  const totalScore = baseScore * multiplier;\\n  return totalScore >= 1000 ? \"High Score!\" : \"Keep trying!\";\\n};\\n\\n// Call your function with different values and store a result in a variable\\nconst result1 = calculateGameScore(500, 2.5); // Should return \"High Score!\" (1250)\\nconst result2 = calculateGameScore(300, 2); // Should return \"Keep trying!\" (600)\\nconst result3 = calculateGameScore(400, 2.5); // Should return \"High Score!\" (1000)\\nconst result4 = calculateGameScore(200, 3); // Should return \"Keep trying!\" (600)\\n\\n// Log the results to see the output\\nconsole.log(`calculateGameScore(500, 2.5): ${result1}`);\\nconsole.log(`calculateGameScore(300, 2): ${result2}`);\\nconsole.log(`calculateGameScore(400, 2.5): ${result3}`);\\nconsole.log(`calculateGameScore(200, 3): ${result4}`);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1137,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T23:53:43.926Z",
    "first_attempt": "2025-06-19T23:53:43.925Z",
    "last_attempt": "2025-06-19T23:53:43.926Z",
    "completed_code": "{'code': '// Fixed version - using let instead of const\\nlet score = 0\\n\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\ndisplayScore() // Score: 0\\nupdateScore()\\ndisplayScore() // Score: 100'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1138,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-19T23:54:58.615Z",
    "first_attempt": "2025-06-19T23:54:58.614Z",
    "last_attempt": "2025-06-19T23:54:58.615Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\n\\nconst checkHighScore = (playerName, score) => {\\n    if (score > highScore) {\\n        highScore = score;\\n        return `Congratulations ${playerName}! New high score: ${score}`;\\n    } else {\\n        return `Good try ${playerName}! Your score: ${score}. Current high score: ${highScore}`;\\n    }\\n}\\n\\n// Test your function with multiple calls below\\nconsole.log(checkHighScore(\"Alice\", 50));\\nconsole.log(checkHighScore(\"Bob\", 30));\\nconsole.log(checkHighScore(\"Charlie\", 75));\\nconsole.log(checkHighScore(\"Diana\", 60));\\nconsole.log(checkHighScore(\"Eve\", 80));'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1139,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-20T00:01:46.818Z",
    "first_attempt": "2025-06-19T23:59:27.510Z",
    "last_attempt": "2025-06-20T00:01:46.818Z",
    "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n  // 1. Start with the base ticket price of $10\\n  let price = 10;\\n\\n  // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n  if (isWeekend) {\\n    price += 2;\\n  }\\n\\n  // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n  if (age < 12 || age >= 65) {\\n    price = price * 0.5; // 50% discount\\n  }\\n\\n  // 4. Return the final ticket price\\n  return price;\\n}\\n\\n// Test Cases - Different scenarios\\n\\n// 1. Regular adult on weekday (no discounts)\\n// Invoke function, store result, then console.log the variable\\nconst adultWeekdayPrice = calculateTicketPrice(25, false);\\nconsole.log(adultWeekdayPrice);\\n\\n// 2. Regular adult on weekend (weekend surcharge only)\\n// Invoke function, store result, then console.log the variable\\nconst adultWeekendPrice = calculateTicketPrice(30, true);\\nconsole.log(adultWeekendPrice);\\n\\n// 3. Child on weekday (age discount only)\\n// Invoke function, store result, then console.log the variable\\nconst childWeekdayPrice = calculateTicketPrice(8, false);\\nconsole.log(childWeekdayPrice);\\n\\n// 4. Child on weekend (both weekend surcharge and age discount)\\n// Invoke function, store result, then console.log the variable\\nconst childWeekendPrice = calculateTicketPrice(10, true);\\nconsole.log(childWeekendPrice);\\n\\n// 5. Senior on weekday (age discount only)\\n// Invoke function, store result, then console.log the variable\\nconst seniorWeekdayPrice = calculateTicketPrice(70, false);\\nconsole.log(seniorWeekdayPrice);\\n\\n// 6. Senior on weekend (both weekend surcharge and age discount)\\n// Invoke function, store result, then console.log the variable\\nconst seniorWeekendPrice = calculateTicketPrice(68, true);\\nconsole.log(seniorWeekendPrice);\\n\\n// 7. Edge case - exactly 12 years old (no age discount)\\n// Invoke function, store result, then console.log the variable\\nconst twelveWeekdayPrice = calculateTicketPrice(12, false);\\nconsole.log(twelveWeekdayPrice);\\n\\n// 8. Edge case - exactly 65 years old (gets age discount)\\n// Invoke function, store result, then console.log the variable\\nconst sixtyFiveWeekendPrice = calculateTicketPrice(65, true);\\nconsole.log(sixtyFiveWeekendPrice);\\n\\n// 9. Very young child\\n// Invoke function, store result, then console.log the variable\\nconst toddlerWeekendPrice = calculateTicketPrice(3, true);\\nconsole.log(toddlerWeekendPrice);\\n\\n// 10. Teenager (no discounts except weekend surcharge if applicable)\\n// Invoke function, store result, then console.log the variable\\nconst teenWeekendPrice = calculateTicketPrice(16, true);\\nconsole.log(teenWeekendPrice);\\n\\nconsole.log('\\\\n--- Summary of Price Logic ---');\\nconsole.log('Base price: $10');\\nconsole.log('Weekend surcharge: +$2');\\nconsole.log('Age discount (under 12 OR 65+): 50% off final price');\\nconsole.log('Discount applies AFTER weekend surcharge is added');\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1140,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-20T00:03:08.451Z",
    "first_attempt": "2025-06-20T00:02:40.102Z",
    "last_attempt": "2025-06-20T00:03:08.451Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n    // 1. Create a variable to store the total, starting at 0\\n    let total = 0;\\n\\n    // 2. Loop through all prices in the array and add each to total\\n    for (const price of prices) {\\n        total += price;\\n    }\\n\\n    // 3. Check if total is over $100, and if so apply a 10% discount\\n    if (total > 100) {\\n        total = total * 0.9; // Apply 10% discount (multiply by 0.9)\\n    }\\n\\n    // 4. Return the final total\\n    return total;\\n}\\n\\n// Test your function with following steps:\\n// 1. Invoke the function\\n// 2. Store the return value in a variable\\n// 3. Log the variable to the console\\n\\n// Test case 1: Total under $100 (no discount)\\nconst cartTotal1 = calculateCartTotal([25.99, 15.50, 8.75]);\\nconsole.log(\"Cart total 1 (under $100):\", cartTotal1);\\n\\n// Test case 2: Total over $100 (with 10% discount)\\nconst cartTotal2 = calculateCartTotal([45.99, 32.50, 28.75, 15.25]);\\nconsole.log(\"Cart total 2 (over $100 with discount):\", cartTotal2);\\n\\n// Test case 3: Edge case - exactly $100 (no discount)\\nconst cartTotal3 = calculateCartTotal([50, 50]);\\nconsole.log(\"Cart total 3 (exactly $100):\", cartTotal3);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1141,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-20T00:45:24.543Z",
    "first_attempt": null,
    "last_attempt": "2025-06-20T00:45:24.543Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1142,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-20T00:45:25.489Z",
    "first_attempt": null,
    "last_attempt": "2025-06-20T00:45:25.489Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1143,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-20T00:45:26.241Z",
    "first_attempt": null,
    "last_attempt": "2025-06-20T00:45:26.241Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1144,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-20T00:52:43.374Z",
    "first_attempt": "2025-06-20T00:52:28.957Z",
    "last_attempt": "2025-06-20T00:52:43.374Z",
    "completed_code": "{'code': 'const topics = [\"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const javascript of topics) {\\n    console.log(javascript)\\n\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1145,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-20T01:34:58.774Z",
    "first_attempt": "2025-06-20T01:31:14.138Z",
    "last_attempt": "2025-06-20T01:34:58.774Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunk of clay) {\\n   const mug = \"coffee mug\" \\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1146,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-20T02:02:33.369Z",
    "first_attempt": "2025-06-20T02:02:33.367Z",
    "last_attempt": "2025-06-20T02:02:33.369Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  if (ingredient === \"egg\"){\\n    finishedFood.push(\"biscuit\")\\n  }\\n  else if (ingredient === \"beef patty\"){\\n    finishedFood.push(\"burger\")\\n  }\\n  else if (ingredient === \"potato\"){\\n    finishedFood.push(\"fries\")\\n  }\\n\\n  \\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1147,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "arrays-length",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-20T16:00:29.552Z",
    "first_attempt": "2025-06-20T02:24:05.211Z",
    "last_attempt": "2025-06-20T16:00:29.552Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const total of monthlyExpenses) {\\n totalExpense += total\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1148,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-20T15:33:36.535Z",
    "first_attempt": "2025-06-20T14:32:57.612Z",
    "last_attempt": "2025-06-20T15:33:36.535Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\nfor (const coffee of coffees) { \\n  // Add your logic here\\n\\n  if (coffee.includes(\"light\")) {\\n      light++\\n  }\\n  \\n  else if(coffee.includes(\"medium\")) {\\n    medium++\\n  }\\n  \\n  else if(coffee.includes(\"toasty\") || coffee.includes(\"dark\")) {\\n    toastyDark++\\n  }\\n \\n      \\n}\\n// Use a multi-line template string to generate the expected results\\nlet output = `\\nI need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them\\n`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1149,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-20T16:03:37.356Z",
    "first_attempt": "2025-06-20T16:03:37.354Z",
    "last_attempt": "2025-06-20T16:03:37.356Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n//console.log(disorderArray)\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n//console.log(htmlString)\\n\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1150,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-20T16:34:51.533Z",
    "first_attempt": "2025-06-20T16:22:14.476Z",
    "last_attempt": "2025-06-20T16:34:51.533Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [300, 350, 400, 220, 360]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (total of weeklyMiles) {\\n  totalMiles += total\\n}\\n\\n// Declare a new variable to store the average miles over time\\naverageMiles = totalMiles / weeklyMiles.length\\nconsole.log(` I avarage ${averageMiles} miles each week\\nI have driven a total of ${totalMiles}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1151,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-20T16:29:06.675Z",
    "first_attempt": "2025-06-20T16:29:06.674Z",
    "last_attempt": "2025-06-20T16:29:06.675Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    return time * 100 + targets * 50;\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    return targets > 10 ? 1000 : 0;\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n    const basePoints = calculateBasePoints(time, targets);\\n    const bonusPoints = calculateBonus(targets);\\n    \\n    // Add the results together and return the sum\\n    return basePoints + bonusPoints;\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\nconst result = calculateFinalScore(2, 5);\\nconsole.log(result);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1152,
  "fields": {
    "learner_github_id": "46795212",
    "learner_name": "Cade McCaskill",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-20T16:31:10.136Z",
    "first_attempt": "2025-06-20T16:30:05.735Z",
    "last_attempt": "2025-06-20T16:31:10.136Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  // Otherwise, return \"Hello, [name]!\"\\n  if (time === \"morning\" || name.charAt(0) === \"A\") {\\n    return `Good morning, ${name}!`;\\n  } else if (time === \"afternoon\") {\\n    return `Good afternoon, ${name}!`;\\n  } else {\\n    return `Hello, ${name}!`;\\n  }\\n}\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  // If topic is \"weather\", return the weather joke\\n  // If topic is \"animals\", return the animals joke\\n  // Otherwise, return the default joke\\n  if (topic === \"weather\") {\\n    return \"What do you call a stormy robot? A thunder-bot!\";\\n  } else if (topic === \"animals\") {\\n    return \"What do you call a sleeping bull? A bulldozer!\";\\n  } else {\\n    return \"Why did the robot go to therapy? It had too many bugs!\";\\n  }\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n  const greetings = [];\\n  \\n  // Loop through each person in the people array\\n  for (let i = 0; i < people.length; i++) {\\n    // Create a greeting for each person\\n    const greeting = createGreeting(people[i], time);\\n    \\n    // Add the greeting to the array\\n    greetings.push(greeting);\\n  }\\n  \\n  // Return the array of greetings\\n  return greetings;\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n  const greeting = createGreeting(name, time);\\n  \\n  // Get the joke\\n  const joke = tellJoke(topic);\\n  \\n  // Return both together\\n  return `${greeting} ${joke}`;\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1153,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-20T17:06:25.975Z",
    "first_attempt": "2025-06-20T17:04:32.923Z",
    "last_attempt": "2025-06-20T17:10:01.982Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\nfor (const myMood of hours){\\n  if (myMood >= 7){\\n  happyHours.push(myMood)\\n  }\\n\\n  else {\\n    grumpyHours.push(myMood)\\n  }\\n  \\n}\\nconsole.log(` I was grumpy ${grumpyHours} days Iwas happy on ${happyHours}`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1154,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-20T17:58:14.647Z",
    "first_attempt": "2025-06-20T17:48:26.379Z",
    "last_attempt": "2025-06-20T17:58:14.647Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if(coffee.includes(\"light\")) {\\n  light++\\n  }\\n\\n  else if (coffee.includes(\"medium\")){\\n    medium++\\n  }\\n\\n  else if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")){\\n    toastyDark++\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1155,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-06-20T19:40:32.973Z",
    "first_attempt": "2025-06-20T18:38:56.807Z",
    "last_attempt": "2025-06-20T19:40:32.973Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1156,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Undefined",
    "slug": "leonids-data-types",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-20T19:53:18.886Z",
    "first_attempt": "2025-06-20T19:37:48.973Z",
    "last_attempt": "2025-06-20T19:53:18.886Z",
    "completed_code": "{'code': 'function createToy(name, category, ageRecommendation, isBatteryOperated, features, dimensions) {\\n    return {\\n        name,\\n        category,\\n        ageRecommendation,\\n        isBatteryOperated,\\n        features,\\n        dimensions\\n    };\\n}\\n\\n// TODO: Call createToy with the correct data types\\nconst myToy = createToy( \\n  \"Golden Tee\",\\n  \"Video Game\",\\n  12,\\n  true,\\n  [\"LED lights\", \"Sound effects\", \"360 Directional Mouse\", \"Multiple Buttons for options\"],\\n  { width: 29.6, height: 24.5 } // actual dimensions\\n);\\nconsole.log(myToy);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1157,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Data Structures",
    "slug": "leonids-data-structures",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-20T20:04:03.073Z",
    "first_attempt": "2025-06-20T20:04:03.071Z",
    "last_attempt": "2025-06-20T20:04:03.073Z",
    "completed_code": "{'code': '\\n    const inventory = [\\n  { id: 101, name: \"Hand-Carved Wooden Train\", maker: \"Leonid\" },\\n  { id: 102, name: \"Painted Rocking Horse\", maker: \"Leonid\" },\\n  { id: 103, name: \"Stuffed Bear with Bow Tie\", maker: \"Leonid\" },\\n  { id: 104, name: \"Miniature Sailboat\", maker: \"Leonid\" },\\n  { id: 105, name: \"Patchwork Doll\", maker: \"Leonid\" },\\n  { id: 106, name: \"Wooden Puzzle Box\", maker: \"Leonid\" },\\n  { id: 107, name: \"Knitted Sock Monkey\", maker: \"Leonid\" },\\n  { id: 108, name: \"Spinning Top\", maker: \"Leonid\" },\\n  { id: 109, name: \"Tiny Puppet Theater\", maker: \"Leonid\" },\\n  { id: 110, name: \"Hand-Painted Marbles\", maker: \"Leonid\" },\\n  { id: 111, name: \"Fabric Kite with Tail\", maker: \"Leonid\" },\\n  { id: 112, name: \"Wool-Stuffed Bunny\", maker: \"Leonid\" },\\n  { id: 113, name: \"Wooden Xylophone\", maker: \"Leonid\" },\\n  { id: 114, name: \"Tin Wind-Up Robot\", maker: \"Leonid\" },\\n  { id: 115, name: \"Miniature Toy Chest\", maker: \"Leonid\" }\\n];\\n\\nfunction findToyById(toys, id) {const toy = toys.find(toy => toy.id === id);\\n  return toy || null;\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1158,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Representing Toys as Objects",
    "slug": "leonids-objects",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-20T20:08:32.058Z",
    "first_attempt": "2025-06-20T20:08:32.057Z",
    "last_attempt": "2025-06-20T20:08:32.058Z",
    "completed_code": "{'code': 'const woodenTrain = {\\n  name: \"Wooden Train Set\",\\n  manufacturer: \"Maple Toy Company\",\\n  priceInDollars: 45.99,\\n  inStock: true,\\n  recommendedAgeRange: null,\\n  weightInGrams: 850\\n};\\n\\nconst stuffedRabbit = {\\n  name: \"Fluffy Bunny\",\\n  manufacturer: null,\\n  priceInDollars: 18.50,\\n  inStock: false,\\n  recommendedAgeRange: \"0-3 years\",\\n  weightInGrams: 120\\n};\\n\\nconst kite = {\\n  name: \"Dragon Kite\",\\n  manufacturer: \"SkyHigh Toys\",\\n  priceInDollars: null,\\n  inStock: true,\\n  recommendedAgeRange: \"5+ years\",\\n  weightInGrams: 95\\n};'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1159,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Toy Collection",
    "slug": "leonids-arrays",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-20T20:11:54.611Z",
    "first_attempt": "2025-06-20T20:11:15.563Z",
    "last_attempt": "2025-06-20T20:11:54.611Z",
    "completed_code": "{'code': 'const toyInventory = [\\n  {\\n    name: \"Robot Commander\",\\n    manufacturer: \"TechToys Inc\",\\n    priceInDollars: 29.99,\\n    ageRange: \"8+\",\\n    inStock: true\\n  },\\n  {\\n    name: \"Magic Puzzle Box\",\\n    manufacturer: \"WonderWorks\",\\n    priceInDollars: 15.50,\\n    batteryRequired: false,\\n    description: null\\n  },\\n  {\\n    name: \"Racing Car Set\",\\n    manufacturer: \"SpeedPlay\",\\n    priceInDollars: 45.00,\\n    numberOfPieces: 12,\\n    color: \"red\"\\n  }\\n];'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1160,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Displaying Toy Properties",
    "slug": "leonids-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-20T20:15:07.835Z",
    "first_attempt": "2025-06-20T20:15:07.834Z",
    "last_attempt": "2025-06-20T20:15:07.835Z",
    "completed_code": "{'code': 'const toyInventory = [\\n    {\\n        name: \"Wooden Train\",\\n        priceInDollars: 25.99\\n    },\\n    {\\n        name: \"Stuffed Rabbit\",\\n        priceInDollars: 17.50\\n    },\\n    {\\n        name: \"Painted Kite\",\\n        priceInDollars: 9.95\\n    }\\n];\\n\\nfor (const toy of toyInventory) {\\n    console.log(toy.name);\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1161,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "New Toys",
    "slug": "leonids-arrays-push",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-20T20:24:02.474Z",
    "first_attempt": "2025-06-20T20:22:53.686Z",
    "last_attempt": "2025-06-20T20:24:02.474Z",
    "completed_code": "{'code': 'const toyInventory = [];\\n/*part 1*/\\ntoyInventory.push(\"Wooden Train\");\\ntoyInventory.push(\"Stuffed Rabbit\");\\ntoyInventory.push(\"Painted Kite\");\\n/*part 2*/\\nlet toyInventoryCollection = [];\\n\\ntoyInventoryCollection.push({\\n  name: \"Wooden Train\",\\n  priceInDollars: 30\\n});\\n\\ntoyInventoryCollection.push({\\n  name: \"Stuffed Rabbit\",\\n  priceInDollars: 25\\n});\\n\\ntoyInventoryCollection.push({\\n  name: \"Painted Kite\",\\n  priceInDollars: 20\\n});'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1162,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Helping Customers Find the Right Toy",
    "slug": "leonids-conditionals",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-20T20:30:06.581Z",
    "first_attempt": "2025-06-20T20:26:42.238Z",
    "last_attempt": "2025-06-20T20:30:06.581Z",
    "completed_code": "{'code': '// Define the phones array\\nconst phones = [\\n  {\\n    id: 1,\\n    name: \"iPhone\",\\n    maker: \"Apple, Inc.\",\\n    operatingSystem: \"iOS\",\\n    price: 900,\\n    weight: 1.2\\n  },\\n  {\\n    id: 2,\\n    name: \"Galaxy\",\\n    maker: \"Samsung\",\\n    operatingSystem: \"Android\",\\n    price: 600,\\n    weight: 1.4\\n  },\\n  {\\n    id: 3,\\n    name: \"Pixel\",\\n    maker: \"Google\",\\n    operatingSystem: \"Android\",\\n    price: 750,\\n    weight: 1.3\\n  }\\n]\\n// Specify the ID of the phone to find\\nconst phoneToFind = 2\\n\\n// Loop through phones and find the one with matching ID\\nfor (const phone of phones) {\\n    // Only one phone will cause the condition below to evaluate to true\\n    if (phone.id === phoneToFind) {\\n        phone.weight = phone.weight + 0.4\\n        console.log(`The ${phone.maker} ${phone.name} costs ${phone.price} dollars. \\nIt weighs ${phone.weight.toFixed(1)} grams.`)\\n    }\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1163,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-20T20:47:54.251Z",
    "first_attempt": "2025-06-20T20:40:21.545Z",
    "last_attempt": "2025-06-20T20:47:54.251Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []        // \"Clothing\"\\nconst entertainment = []   // \"Movie\"\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nconst utilities = []       // \"Utility\"\\nconst largePurchases = []  // Expenses over 100.00\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nlet averageExpense = 0\\n\\n\\n/*\\n Use your algorithmic thinking for the steps to\\n categorize, total, and average the expenses.\\n \\n\\n Be patient and take your time. This is challenging.\\n*/\\nfor (const item of monthlyExpenses) {\\n  const [vendor, amountString] = item.split(\":\")\\n  const amount = parseFloat(amountString)\\n  totalExpenses += amount\\n\\n\\n\\n  if(vendor.includes(\"Clothing\")){\\n    clothing.push(amount)\\n  }\\n  else if (vendor.includes(\"Movie\")){\\n    entertainment.push(amount)\\n  }\\n  else if(vendor.includes(\"Groceries\") || vendor.includes(\"Restaurant\")) {\\n    food.push(amount)\\n  }\\n  else if(vendor.includes(\"Fuel\") || vendor.includes(\"Gas\")) {\\n    fuel.push(amount)\\n  }\\n  else if (vendor.includes(\"Lyft\") || vendor.includes(\"Uber\")) {\\n    travel.push(amount)\\n  }\\n  else if (vendor.includes(\"Utility\")){\\n    utilities.push(amount)\\n  }\\n  if (amount > 100){\\n    largePurchases.push(amount)\\n  }\\n}\\naverageExpense = (totalExpenses / monthlyExpenses.length)\\nconsole.log(\"Clothing:\", clothing)\\nconsole.log(\"Entertainment:\", entertainment)\\nconsole.log(\"Food:\", food)\\nconsole.log(\"Fuel:\", fuel)\\nconsole.log(\"Travel:\", travel)\\nconsole.log(\"Utilities:\", utilities)\\nconsole.log(\"Large Purchases:\", largePurchases)\\nconsole.log(\"Total Spent:\", totalExpenses)\\nconsole.log(\"Average Expense:\", averageExpense)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1164,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-20T23:18:59.135Z",
    "first_attempt": null,
    "last_attempt": "2025-06-20T23:18:59.135Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1165,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-20T23:27:53.112Z",
    "first_attempt": "2025-06-20T23:27:53.110Z",
    "last_attempt": "2025-06-20T23:27:53.112Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 123\\nlet marchBill = 151\\nlet aprilBill = 134\\nlet mayBill = 144\\nlet juneBill = 154\\nlet julyBill = 133\\nlet augustBill = 145\\nlet septemberBill = 143\\nlet octoberBill = 155\\nlet novemberBill = 154\\nlet decemberBill = 163\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1166,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-20T23:35:23.029Z",
    "first_attempt": "2025-06-20T23:35:23.028Z",
    "last_attempt": "2025-06-20T23:35:23.029Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"2017 Macbook Pro\"\\nconst phone = \"iPhone 11\"\\nconst television = \"32in Hisense Flat Screen TV\"\\nconst refrigerator = \"Two door Stainless Steel Refridgerator\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `In my house, I have a ${computer}, an ${phone}, a ${television}, and a ${refrigerator}.`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1167,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-20T23:46:08.270Z",
    "first_attempt": "2025-06-20T23:46:08.269Z",
    "last_attempt": "2025-06-20T23:46:08.270Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome\\ncombinedIncome += spouseIncome\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome = combinedIncome - internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1168,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-20T23:53:35.939Z",
    "first_attempt": "2025-06-20T23:53:35.938Z",
    "last_attempt": "2025-06-20T23:53:35.939Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome\\ncombinedIncome += spouseIncome\\n// 2. Total monthly expenses\\nlet totalExpenses = 0\\ntotalExpenses += phoneBill\\ntotalExpenses += mortgage\\ntotalExpenses += carInsurance\\ntotalExpenses += healthInsurance\\n// 3. Net monthly income\\nlet netIncome = 0\\nnetIncome = combinedIncome - totalExpenses\\n\\nconst statement = `Our combined monthly income is ${combinedIncome}.\\nOur total monthly expenses are ${totalExpenses}.\\nOur net monthly income is ${netIncome}.`;  // Use backticks and calculations here\\n\\nconsole.log(statement)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1169,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-21T00:05:55.990Z",
    "first_attempt": "2025-06-21T00:05:55.988Z",
    "last_attempt": "2025-06-21T00:05:55.990Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1170,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-21T00:14:56.660Z",
    "first_attempt": "2025-06-21T00:14:23.159Z",
    "last_attempt": "2025-06-21T00:14:56.660Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n} else {\\n   console.log(\"I\\'m gonna watch Netflix all day.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1171,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-21T00:27:42.076Z",
    "first_attempt": "2025-06-21T00:27:42.075Z",
    "last_attempt": "2025-06-21T00:27:42.076Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n   torsoClothing = \"t-shirt\"\\n   legClothing = \"shorts\"\\n   footWear = \"sandals\" // Add your code here\\n} else if (temperature < 95 && temperature >= 75) {\\n   torsoClothing = \"t-shirt\"\\n   legClothing = \"shorts\"\\n   footWear = \"sneakers\"\\n} else if (temperature < 75 && temperature >= 50) {\\n   torsoClothing = \"sweater\"\\n   legClothing = \"pants\"\\n   footWear = \"sneakers\"\\n} else if (temperature < 50 && temperature >= 35) {\\n   torsoClothing = \"jacket\"\\n   legClothing = \"pants\"\\n   footWear = \"sneakers\"\\n} else {\\n   torsoClothing = \"jacket\"\\n   legClothing = \"pants\"\\n   footWear = \"boots\"\\n}\\n\\nconsole.log(`I will wear a ${torsoClothing}, ${legClothing}, and ${footWear}.`)\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1172,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-21T00:42:45.302Z",
    "first_attempt": "2025-06-21T00:42:45.301Z",
    "last_attempt": "2025-06-21T00:42:45.302Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n    name: \"Jeremy Landy\",\\n    location: \"Phoenix, AR\",\\n    gender: \"male\",\\n    age: 31\\n}\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1173,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-21T00:48:51.465Z",
    "first_attempt": "2025-06-21T00:45:53.711Z",
    "last_attempt": "2025-06-21T00:48:51.465Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos += femalePhotos\\ntotalPhotos += malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n   photoStorage = \"Photo Album\"\\n} else if (totalPhotos < 110 && totalPhotos >= 50) {\\n   photoStorage = \"Shoe Box\"\\n} else {\\n   photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n   albumColor = \"plum\"\\n} else {\\n   albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1174,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-21T00:51:41.041Z",
    "first_attempt": "2025-06-21T00:51:41.040Z",
    "last_attempt": "2025-06-21T00:51:41.041Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n    color: \"white\",\\n    stemLength: 6,\\n    growingSeason: \"spring\",\\n    thorny: false,\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n    color: \"red\",\\n    stemLength: 12,\\n    growingSeason: \"summer\",\\n    thorny: true,\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1175,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-21T01:07:37.094Z",
    "first_attempt": "2025-06-21T01:07:37.093Z",
    "last_attempt": "2025-06-21T01:07:37.094Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\nfor (const appointment of appointments) {\\n    schedule += `Patient ${appointment.firstName} ${appointment.lastName} has an appointment at ${appointment.appointmentTime}\\\\n`\\n}\\n\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1176,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-21T01:16:45.376Z",
    "first_attempt": "2025-06-21T01:16:45.375Z",
    "last_attempt": "2025-06-21T01:16:45.376Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1177,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-21T01:21:26.404Z",
    "first_attempt": "2025-06-21T01:21:26.403Z",
    "last_attempt": "2025-06-21T01:21:26.404Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1178,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-21T02:23:48.506Z",
    "first_attempt": "2025-06-21T02:23:48.505Z",
    "last_attempt": "2025-06-21T02:23:48.506Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \"Large Tank\"'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1179,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Undefined",
    "slug": "objects-voting",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-21T02:30:35.988Z",
    "first_attempt": "2025-06-21T02:29:30.506Z",
    "last_attempt": "2025-06-21T02:30:35.988Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1180,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-21T02:40:34.760Z",
    "first_attempt": "2025-06-21T02:40:34.760Z",
    "last_attempt": "2025-06-21T02:40:34.760Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet() {\\n  console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1181,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-21T02:41:31.313Z",
    "first_attempt": "2025-06-21T02:41:31.313Z",
    "last_attempt": "2025-06-21T02:41:31.313Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n  console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore()\\ncelebrateScore()\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1182,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-21T02:48:07.658Z",
    "first_attempt": "2025-06-21T02:47:15.275Z",
    "last_attempt": "2025-06-21T02:48:07.658Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreaterThan100(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction showWelcome(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscountedPrice(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1183,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-21T02:48:51.533Z",
    "first_attempt": "2025-06-21T02:48:51.533Z",
    "last_attempt": "2025-06-21T02:48:51.533Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1184,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-21T02:50:40.133Z",
    "first_attempt": "2025-06-21T02:50:40.133Z",
    "last_attempt": "2025-06-21T02:50:40.133Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1185,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-21T02:52:03.542Z",
    "first_attempt": "2025-06-21T02:52:03.541Z",
    "last_attempt": "2025-06-21T02:52:03.542Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(name, points) {\\n  console.log(`${name} scored ${points} points!`)\\n}\\n\\n// Then invoke the function with different player names and scores\\ndisplayGameScore(\"Mario\", 100)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1186,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Undefined",
    "slug": "functions-arrow-syntax",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-21T03:01:28.890Z",
    "first_attempt": "2025-06-21T03:01:07.408Z",
    "last_attempt": "2025-06-21T03:01:28.890Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\n\\nconst add = (x, y) => {\\n    return x + y\\n}\\n\\nconst greet = (name) => {\\n    return \"Hello, \" + name + \"!\"\\n}\\n\\nconst getRandomNumber = () => Math.random()\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber\\nconst greeting = greet(\"Bob\")\\nconst sum = add(7, 11)\\n\\nconsole.log(random, greeting, sum)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1187,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "objects-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-03T17:26:58.064Z",
    "first_attempt": "2025-06-21T23:14:21.832Z",
    "last_attempt": "2025-07-03T17:26:58.064Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {name: \"Jeremy Lnady\", location: \"Phoenix, AR\",\\ngender: \"male\", age:31\\n}\\nconsole.log(student)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1188,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-21T23:28:12.303Z",
    "first_attempt": "2025-06-21T23:24:47.748Z",
    "last_attempt": "2025-06-21T23:28:12.303Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\ncolor: \"red\",\\nstemLength: 10,\\ngrowingSeason: \"Summer\",\\nthorny: false\\n}\\n\\n// Complete the rose object\\nconst rose = {\\ncolor: \"white\",\\nstemLength: 09, \\ngrowingSeason: \"Spring\",\\nthorny: true\\n\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1189,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-22T00:16:16.747Z",
    "first_attempt": "2025-06-21T23:50:54.738Z",
    "last_attempt": "2025-06-22T00:16:16.747Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\nfor (const appointment of appointments) {\\n  schedule += `Patient ${appointment.firstName} ${appointment.lastName} has an appointment at ${appointment.appointmentTime}\\\\n`}\\nconsole.log(schedule)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1190,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-22T00:24:11.396Z",
    "first_attempt": "2025-06-22T00:23:38.967Z",
    "last_attempt": "2025-06-22T00:24:11.396Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1191,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-22T00:53:37.836Z",
    "first_attempt": "2025-06-22T00:52:33.910Z",
    "last_attempt": "2025-06-22T00:53:37.836Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor =book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1192,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "objects-properties",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-22T01:05:17.442Z",
    "first_attempt": "2025-06-22T01:04:28.034Z",
    "last_attempt": "2025-06-22T01:05:17.442Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\ngoldfish.location = \"Large Tank\"\\n\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1193,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "objects-voting",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-06-22T01:39:29.668Z",
    "first_attempt": "2025-06-22T01:12:42.770Z",
    "last_attempt": "2025-06-22T01:39:29.668Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1194,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-22T01:44:16.883Z",
    "first_attempt": "2025-06-22T01:44:16.879Z",
    "last_attempt": "2025-06-22T01:44:16.883Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\nconst monthlyExpenses2 = []\\n\\nfor (const expense of monthlyExpenses) {\\n  monthlyExpenses2.push(expense.split(\":\"))\\n}\\nconsole.log(monthlyExpenses2)\\n\\n\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []        // \"Clothing\"\\nconst entertainment = []   // \"Movie\"\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nconst utilities = []       // \"Utility\"\\nconst largePurchases = []  // Expenses over 100.00\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nlet averageExpense = 0\\n\\n\\n/*\\n Use your algorithmic thinking for the steps to\\n categorize, total, and average the expenses.\\n\\n Be patient and take your time. This is challenging.\\n*/\\n\\nfor (const clothing2 of monthlyExpenses2) {\\n  if (clothing2[0].includes(\"Clothing\")) { \\n    clothing.push(parseFloat(clothing2[1]))\\n  }\\n}\\nconsole.log(clothing)\\n\\n\\nfor (const movie2 of monthlyExpenses2) {\\n  if (movie2[0].includes(\"Movie\")) { \\n    entertainment.push(parseFloat(movie2[1]))\\n  }\\n}\\nconsole.log(entertainment)\\n\\nfor (const utilities2 of monthlyExpenses2) {\\n  if (utilities2[0].includes(\"Utility\")) { \\n    utilities.push(parseFloat(utilities2[1]))\\n  }\\n}\\nconsole.log(utilities)\\n\\nfor (const food2 of monthlyExpenses2) {\\n  if (food2[0].includes(\"Groceries\") || food2[0].includes(\"Restaurant\")) { \\n    food.push(parseFloat(food2[1]))\\n  }\\n}\\nconsole.log(food)\\n\\nfor (const fuel2 of monthlyExpenses2) {\\n  if (fuel2[0].includes(\"Fuel\") || fuel2[0].includes(\"Gas\")) { \\n    fuel.push(parseFloat(fuel2[1]))\\n  }\\n}\\nconsole.log(fuel)\\n\\n\\nfor (const travel2 of monthlyExpenses2) {\\n  if (travel2[0].includes(\"Lyft\") || travel2[0].includes(\"Uber\")) { \\n    travel.push(parseFloat(travel2[1]))\\n  }\\n}\\nconsole.log(travel)\\n\\n\\nfor (const largePurchases2 of monthlyExpenses2) {\\n  if (parseFloat(largePurchases2[1]) > 100.00) { \\n    largePurchases.push(parseFloat(largePurchases2[1]))\\n  }\\n}\\nconsole.log(largePurchases)\\n\\nfor (const monthlyExpense2 of monthlyExpenses2) {\\n totalExpenses += parseFloat(monthlyExpense2[1])\\n}\\n\\n\\n\\n\\naverageExpense = totalExpenses / monthlyExpenses2.length\\n\\n\\n\\nconsole.log(totalExpenses)\\nconsole.log(averageExpense)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1195,
  "fields": {
    "learner_github_id": "209769569",
    "learner_name": "Gary Venus",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-22T13:14:25.382Z",
    "first_attempt": "2025-06-22T13:14:04.454Z",
    "last_attempt": "2025-06-22T13:14:25.382Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\nif ( ingredient === \"egg\") {\\n   finishedFood.push(\"biscuit\")\\n} else if (ingredient === \"beef patty\"){\\n   finishedFood.push(\"burger\")\\n} else if (ingredient === \"potato\") {\\n   finishedFood.push(\"fries\")\\n}\\n\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1196,
  "fields": {
    "learner_github_id": "209769569",
    "learner_name": "Gary Venus",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-22T13:22:42.135Z",
    "first_attempt": "2025-06-22T13:22:42.134Z",
    "last_attempt": "2025-06-22T13:22:42.135Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expenses of monthlyExpenses) {\\n   \\n   totalExpense += expenses\\n   }\\n  // Add the current monthly cost to the value of totalExpense\\n\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense/ monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1197,
  "fields": {
    "learner_github_id": "209769569",
    "learner_name": "Gary Venus",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-23T13:26:54.564Z",
    "first_attempt": "2025-06-22T13:32:14.455Z",
    "last_attempt": "2025-06-23T13:26:54.564Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 5 , 25, 76 , 100 ]\\n// Declare a variable to store the total. Initial value is 0.\\ntotalMiles = 0\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const mile of weeklyMiles) {\\n   totalMiles += mile\\n\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles/weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles}.\\nI have driven a total of ${totalMiles} miles.`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1198,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-22T15:51:46.584Z",
    "first_attempt": "2025-06-22T15:51:46.583Z",
    "last_attempt": "2025-06-22T15:51:46.584Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\nconst makeGreeting = (name) => {\\n    return `Hello, ${name}!`\\n}\\n\\n\\n// Invoke the function and assign the return value to a variable\\nconst greeeted = makeGreeting(\"John\")\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(greeeted)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1199,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-22T15:56:48.016Z",
    "first_attempt": "2025-06-22T15:56:48.014Z",
    "last_attempt": "2025-06-22T15:56:48.016Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => {\\n    return quantity * price\\n}\\n\\n// Create calculateTotal here\\nconst calculateTotal = (amount) => {\\n    return amount * 1.08\\n}\\n\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(3, 4.99)\\n\\n// 2. Calculate the final total with tax\\nconst total = calculateTotal(subtotal)\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $ ${subtotal}`)\\nconsole.log(`Total with tax: $${total}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1200,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-22T16:01:05.018Z",
    "first_attempt": "2025-06-22T16:00:07.512Z",
    "last_attempt": "2025-06-22T16:01:05.018Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\nconst calculateGameScore = (points, multiplier) => {\\n    const totalPoints = points * multiplier\\n    if (totalPoints >= 1000) {\\n        return \"High Score!\"\\n    } else {\\n        return \"Keep trying!\"\\n    }\\n}\\n\\n  // Call your function with different values and store a result in a variable\\nconst firstAttempt = calculateGameScore(500, 2.5)\\nconst secondAttempt = calculateGameScore(100, 2.5)\\nconst thirdAttempt = calculateGameScore(400, 2)\\n\\n  // Log the result to see the output\\n\\nconsole.log(firstAttempt)\\nconsole.log(secondAttempt)\\nconsole.log(thirdAttempt)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1201,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-06-22T16:37:25.904Z",
    "first_attempt": "2025-06-22T16:19:00.709Z",
    "last_attempt": "2025-06-22T16:37:25.904Z",
    "completed_code": "{'code': 'let score = 0\\n\\n// This code has scope problems!\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1202,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-22T16:27:55.062Z",
    "first_attempt": "2025-06-22T16:23:56.274Z",
    "last_attempt": "2025-06-22T16:27:55.062Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n  name: \"Jeremy Landy\",\\n  location: \"Phoenix, AR\",\\n  gender: \"male\",\\n  age: 31,\\n}\\nconsole.log(student)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1203,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-22T16:59:36.329Z",
    "first_attempt": "2025-06-22T16:39:10.183Z",
    "last_attempt": "2025-06-22T16:59:36.329Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\ncolor: \"pink\",\\nstemLength: 6,\\ngrowingSeason: \"Spring\",\\nthorny: false\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n  color: \"white\",\\n  stemLength: 12,\\n  growingSeason: \"Summer\",\\n  thorny: true\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1204,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-22T16:44:40.808Z",
    "first_attempt": "2025-06-22T16:42:50.825Z",
    "last_attempt": "2025-06-22T16:44:40.808Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\n\\nconst checkHighScore = (playerName, score) => {\\n    if (score > highScore) {\\n        highScore = score\\n        return `New high scorer: ${playerName} with ${highScore}`\\n    } else {\\n        return `High score remains: ${highScore}`\\n    }\\n}\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\n\\nconsole.log(checkHighScore(\"Alice\", 50))\\nconsole.log(checkHighScore(\"Dan\", 25))\\nconsole.log(checkHighScore(\"Misty\", 200))\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1205,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-22T17:58:50.527Z",
    "first_attempt": "2025-06-22T17:08:51.928Z",
    "last_attempt": "2025-06-22T17:58:50.527Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\n\\nfor (const appointment of appointments) {\\n  schedule += `Patient ${appointment.firstName} ${appointment.lastName} has an appointment at ${appointment.appointmentTime}\\\\n`\\n}\\n\\n\\n\\nconsole.log(schedule)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1206,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-22T18:08:18.210Z",
    "first_attempt": "2025-06-22T18:08:18.209Z",
    "last_attempt": "2025-06-22T18:08:18.210Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1207,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-22T18:45:49.349Z",
    "first_attempt": "2025-06-22T18:45:49.348Z",
    "last_attempt": "2025-06-22T18:45:49.349Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1208,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-22T18:51:24.649Z",
    "first_attempt": "2025-06-22T18:51:24.648Z",
    "last_attempt": "2025-06-22T18:51:24.649Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\ngoldfish.location = \"Large Tank\"\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1209,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-22T19:13:24.768Z",
    "first_attempt": "2025-06-22T19:13:24.767Z",
    "last_attempt": "2025-06-22T19:13:24.768Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1210,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-22T19:59:43.808Z",
    "first_attempt": "2025-06-22T19:59:43.807Z",
    "last_attempt": "2025-06-22T19:59:43.808Z",
    "completed_code": "{'code': 'function greetPet () {\\n  console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1211,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-22T20:06:37.943Z",
    "first_attempt": "2025-06-22T20:06:37.941Z",
    "last_attempt": "2025-06-22T20:06:37.943Z",
    "completed_code": "{'code': 'function celebrateScore () {\\n  console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore() \\n   console.log(\"Touchdown!\")\\n   console.log(\"Touchdown!\")'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1212,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-22T20:43:03.798Z",
    "first_attempt": "2025-06-22T20:17:08.492Z",
    "last_attempt": "2025-06-22T20:43:03.798Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isNumberGreaterThan100(num) {\\n    return num > 100\\n}\\n\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayMessage(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculatesDiscount(price) {\\n    return price * 0.8\\n\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1213,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Undefined",
    "slug": "functions-conditions",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-22T20:33:19.257Z",
    "first_attempt": "2025-06-22T20:21:21.452Z",
    "last_attempt": "2025-06-22T20:33:19.257Z",
    "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\n      let price = 10\\n\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n      if (isWeekend === true) {\\n        price += 2\\n      }\\n\\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n      if (age < 12 || age >= 65) {\\n        price *= 0.5\\n      }\\n      // 4. Return the final ticket price\\n      return price\\n  }\\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n\\n  // Example:\\n  const seniorWeekdayPrice = calculateTicketPrice(70, false)  \\n  console.log(seniorWeekdayPrice)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1214,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 19,
    "complete": true,
    "completed_on": "2025-06-22T21:34:11.365Z",
    "first_attempt": "2025-06-22T20:40:09.384Z",
    "last_attempt": "2025-06-22T21:34:11.365Z",
    "completed_code": "{'code': 'let torsoClothing = \"any\"\\nlet legClothing = \"any\"\\nlet footWear = \"any\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"Tshirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sandals\"\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"Tshirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"Sweater\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse {\\n    torsoClothing = \"Jacket\" \\n    legClothing = \"Pants\"\\n    footWear = \"Boots\"\\n}\\nconsole.log(`When temperature is 48 degrees, you should wear a ${torsoClothing}, ${legClothing}, and ${footWear}.`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1215,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Undefined",
    "slug": "functions-loops",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-22T20:55:02.439Z",
    "first_attempt": "2025-06-22T20:52:15.655Z",
    "last_attempt": "2025-06-22T20:55:02.439Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\n    let total = 0\\n      // 2. Loop through all prices in the array and add each to total\\n    for (const price of prices) {\\n        total = total + price\\n    }\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\n    if (total > 100) {\\n        total *= 0.9\\n    }\\n      // 4. Return the final total\\n    return total\\n  }\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\n\\n  const userTotal = calculateCartTotal([20, 30, 40])\\nconsole.log(userTotal)\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1216,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 26,
    "complete": true,
    "completed_on": "2025-06-22T22:06:30.833Z",
    "first_attempt": "2025-06-22T21:20:25.286Z",
    "last_attempt": "2025-06-22T22:06:30.833Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\nconsole.log(totalPhotos)\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n}\\nelse if (totalPhotos < 100 && totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n}\\nelse if (totalPhotos < 50) {\\n    photoStorage = \"Envelopes\"\\n}\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n}\\nelse  {\\n    albumColor = \"gray\"\\n}\\n\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1217,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-22T21:23:35.202Z",
    "first_attempt": "2025-06-22T21:21:34.600Z",
    "last_attempt": "2025-06-22T21:23:35.202Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1218,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-22T22:00:22.355Z",
    "first_attempt": "2025-06-22T21:58:50.488Z",
    "last_attempt": "2025-06-22T22:00:22.355Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\n// function calculateTotal(price) {\\n//     const total = price + (price * 0.1)\\n//     console.log(\"Total with tax: $\" + total)\\n// }\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\nconst price1 = 50\\ncalculateTotal(50)\\n\\n\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\nconst price2 = 99.99\\ncalculateTotal(99.99)\\n\\n\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\nconst price3 = 25.50\\ncalculateTotal(25.50)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1219,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-22T22:08:35.534Z",
    "first_attempt": "2025-06-22T22:06:26.733Z",
    "last_attempt": "2025-06-22T22:08:35.534Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1220,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-22T22:15:38.071Z",
    "first_attempt": "2025-06-22T22:15:38.069Z",
    "last_attempt": "2025-06-22T22:15:38.071Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1221,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Undefined",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-22T22:19:47.108Z",
    "first_attempt": "2025-06-22T22:19:47.106Z",
    "last_attempt": "2025-06-22T22:19:47.108Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const name of topics) {\\nconsole.log(name)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1222,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-22T22:21:20.195Z",
    "first_attempt": "2025-06-22T22:21:20.192Z",
    "last_attempt": "2025-06-22T22:21:20.195Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(playerName, pointsScored) {\\nconsole.log(`${playerName} scored ${pointsScored} points!`)\\n}\\n\\n// Then invoke the function with different player names and scores\\ndisplayGameScore(\"Maria\", 59)\\ndisplayGameScore(\"Mario\", 52)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1223,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-22T22:30:31.214Z",
    "first_attempt": "2025-06-22T22:30:31.214Z",
    "last_attempt": "2025-06-22T22:30:31.214Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunk of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1224,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-22T22:43:09.542Z",
    "first_attempt": "2025-06-22T22:34:13.481Z",
    "last_attempt": "2025-06-22T22:43:09.542Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n   if (ingredient === \"egg\") {\\n      finishedFood.push(\"biscuit\")\\n   }\\n   else if (ingredient === \"beef patty\") {\\n      finishedFood.push(\"burger\")\\n   }\\n   else if (ingredient === \"potato\") {\\n      finishedFood.push(\"fries\")\\n   }\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1225,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-23T00:13:19.792Z",
    "first_attempt": "2025-06-22T22:46:45.145Z",
    "last_attempt": "2025-06-23T00:13:19.792Z",
    "completed_code": "{'code': 'const add = (x, y) => x + y\\n  console.log(add(4, 6))\\n\\n\\nconst greet = (name) =>  {\\n    return \"Hello, \" + name + \"!\"\\n}\\nconsole.log(greet(\"Dan\"))\\n\\nconst getRandomNumber = () => {\\n    return Math.random()\\n}\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber()\\nconst greeting = greet(\"Dan\")\\nconst sum = add(5, 5)\\n\\nconsole.log(random, greeting, sum)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1226,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-23T00:51:18.990Z",
    "first_attempt": "2025-06-23T00:49:03.839Z",
    "last_attempt": "2025-06-23T00:51:18.990Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\n\\nconst makeGreeting = (NAME) => {\\n  return \"Hello, \" + NAME + \"!\"\\n}\\n\\n// Invoke the function and assign the return value to a variable\\nconst greeting = makeGreeting(\"NAME\")\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(makeGreeting(\"NAME\"))'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1227,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-23T02:55:31.387Z",
    "first_attempt": "2025-06-23T01:02:09.619Z",
    "last_attempt": "2025-06-23T02:55:31.387Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => {\\n  return quantity * price\\n}\\n\\n// Create calculateTotal here\\nconst calculateTotal = (calculatedSubtotal) => {\\n  return calculatedSubtotal * 1.08\\n}\\n\\n// // Invoke the function and assign the return value to a variable\\n// const greeting = makeGreeting(\"NAME\")\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(3, 4.99)\\n\\n// 2. Calculate the final total with tax\\nconst finalTotal = calculateTotal(subtotal)\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $ ${subtotal}`)\\nconsole.log(`Total with tax: $${finalTotal}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1228,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-21T18:50:23.935Z",
    "first_attempt": null,
    "last_attempt": "2025-06-21T18:50:23.935Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1229,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-09-13T21:18:55.939Z",
    "first_attempt": "2025-09-13T21:17:25.840Z",
    "last_attempt": "2025-09-13T21:18:55.939Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nlet februaryBill = 165\\nlet marchBill = 168\\nlet aprilBill = 154\\nlet mayBill = 148\\nlet juneBill = 141\\nlet julyBill = 156\\nlet augustBill = 159\\nlet septemberBill = 146\\nlet octoberBill = 167\\nlet novemberBill = 177\\nlet decemberBill = 180\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = januaryBill+februaryBill+marchBill+aprilBill+mayBill+juneBill+julyBill+augustBill+septemberBill+octoberBill+novemberBill+decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1230,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-23T02:41:45.901Z",
    "first_attempt": "2025-06-23T02:35:16.879Z",
    "last_attempt": "2025-06-23T02:41:45.901Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"GS76 Stealth\"\\nconst phone = \"Iphone 133 pro max\"\\nconst television = \"50-inch plasma TV\"\\nconst refrigerator = \"Samsung refrigerator\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television} television, my ${computer} computer, my ${refrigerator} refrigerator, and my ${phone} phone`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1231,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 12,
    "complete": true,
    "completed_on": "2025-06-24T20:01:23.422Z",
    "first_attempt": "2025-06-23T02:59:23.465Z",
    "last_attempt": "2025-06-24T20:01:23.422Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\n\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\n\\nlet netIncome = combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill \\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\nconsole.log(output)\\n\"}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1232,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "arrays-strings",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-07-10T23:20:59.887Z",
    "first_attempt": "2025-06-23T06:15:11.334Z",
    "last_attempt": "2025-07-10T23:20:59.887Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")) {\\n    light++\\n  }\\n  else if (coffee.includes(\"medium\")) {\\n    medium++\\n  }\\n  else if (coffee.includes(\"dark\") || coffee.includes(\"toasty\")) {\\n    toastyDark++\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1233,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-23T13:40:49.153Z",
    "first_attempt": "2025-06-23T12:38:11.127Z",
    "last_attempt": "2025-06-23T13:40:49.153Z",
    "completed_code": "{'code': '//Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\nconst calculateGameScore = (basePoints, multiplier) => {\\n  const calculatedGameScore = basePoints * multiplier\\n  console.log(calculatedGameScore)\\n  if (calculatedGameScore >= 1000) {\\n    return \"High Score!\"\\n  }\\n  else {\\n    return \"Keep trying!\"\\n  }\\n}\\n\\n  // Call your function with different values and store a result in a variable\\n\\nconst score1 = calculateGameScore(500, 3)\\n\\n\\n  \\n\\n  // Log the result to see the output\\nconsole.log(score1)\\nconsole.log(calculateGameScore(200, 3))\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1234,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-23T13:40:29.254Z",
    "first_attempt": "2025-06-23T13:24:38.071Z",
    "last_attempt": "2025-06-23T13:40:29.254Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\nconst totalPhoto = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhoto > 110) {\\n    photoStorage = \"Photo Album\";\\n}\\nelse if (totalPhoto >= 50) {\\n    photoStorage = \"Shoe Box\";\\n}\\nelse if (totalPhoto < 50) {\\n    photoStorage = \"Envelopes\";\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\";\\n}\\nelse if (malePhotos > femalePhotos) {\\n    albumColor = \"gray\";\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhoto} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1235,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-23T14:23:48.771Z",
    "first_attempt": "2025-06-23T14:23:48.768Z",
    "last_attempt": "2025-06-23T14:23:48.771Z",
    "completed_code": "{'code': '// // This code has scope problems!\\nlet score = 0    // global variable\\n\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1236,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-23T14:57:31.585Z",
    "first_attempt": "2025-06-23T14:57:31.584Z",
    "last_attempt": "2025-06-23T14:57:31.585Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1237,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-23T15:00:12.850Z",
    "first_attempt": "2025-06-23T15:00:12.849Z",
    "last_attempt": "2025-06-23T15:00:12.850Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1238,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Undefined",
    "slug": "functions-scope-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-23T15:14:13.915Z",
    "first_attempt": "2025-06-23T15:04:28.601Z",
    "last_attempt": "2025-06-23T15:14:13.915Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\nconst checkHighScore = (playerName, score) => {\\n  if (score > highScore) {\\n    highScore = score\\n    return `New high score: ${score}`\\n  }\\n  else { \\nreturn `High score undefeated!`\\n  }\\n}\\n\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\n  console.log(checkHighScore(\"Alice\", 50))\\n  console.log(checkHighScore(\"Amy\", 53))\\n  console.log(checkHighScore(\"Amber\", 49))'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1239,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-23T15:04:55.370Z",
    "first_attempt": "2025-06-23T15:04:55.368Z",
    "last_attempt": "2025-06-23T15:04:55.370Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const topic of topics) {\\n  console.log(topic)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1240,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-23T15:09:31.311Z",
    "first_attempt": "2025-06-23T15:09:31.310Z",
    "last_attempt": "2025-06-23T15:09:31.311Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunk of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1241,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-23T15:14:45.933Z",
    "first_attempt": "2025-06-23T15:14:45.932Z",
    "last_attempt": "2025-06-23T15:14:45.933Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n  if (ingredient === \"egg\") {\\n   finishedFood.push(\"biscuit\")\\n  } else if (ingredient === \"beef patty\") {\\n   finishedFood.push(\"burger\")\\n  } else if (ingredient === \"potato\") {\\n   finishedFood.push(\"fries\")\\n  }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1242,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-23T15:18:33.044Z",
    "first_attempt": "2025-06-23T15:18:33.043Z",
    "last_attempt": "2025-06-23T15:18:33.044Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expense of monthlyExpenses) {\\n   totalExpense += expense\\n  // Add the current monthly cost to the value of totalExpense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1243,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 3,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-23T16:16:15.350Z",
    "last_attempt": "2025-07-09T23:12:58.628Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1244,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-23T16:18:37.742Z",
    "first_attempt": "2025-06-23T16:16:30.617Z",
    "last_attempt": "2025-06-23T16:18:37.742Z",
    "completed_code": "{'code': '// 1. Define your function here\\r\\nfunction celebrateScore () {\\r\\n    console.log(\"Touchdown!\")\\r\\n    console.log(\"Touchdown!\")\\r\\n}\\r\\n\\r\\n\\r\\n// 2. Invoke it twice below)\\r\\n\\r\\ncelebrateScore()\\r\\n\\r\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1245,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 12,
    "complete": true,
    "completed_on": "2025-06-23T17:04:52.224Z",
    "first_attempt": "2025-06-23T16:32:05.571Z",
    "last_attempt": "2025-06-23T17:04:52.224Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\r\\nfunction isGreaterThanHundred(num) {\\r\\n    return num > 100\\r\\n}\\r\\n\\r\\n// This function adds \"Welcome\" before a name\\r\\nfunction displayMessage(name) {\\r\\n    console.log(\"Welcome \" + name)\\r\\n}\\r\\n\\r\\n// This function calculates the price after a 20% discount\\r\\nfunction calculateLastPrice(price) {\\r\\n    return price * 0.8\\r\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1246,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-23T16:35:02.581Z",
    "first_attempt": "2025-06-23T16:35:02.580Z",
    "last_attempt": "2025-06-23T16:35:02.581Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const arr of hours) {\\n   if (arr < 7) {\\n      grumpyHours.push(arr)\\n   } else {\\n      happyHours.push(arr)\\n   }\\n}\\n\\nconsole.log()\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1247,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-23T16:46:00.712Z",
    "first_attempt": "2025-06-23T16:46:00.711Z",
    "last_attempt": "2025-06-23T16:46:00.712Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")) {\\n   light++\\n  } else if (coffee.includes(\"medium\")) {\\n   medium++\\n  } else if (coffee.includes(\"dark\") || coffee.includes(\"toasty\")) {\\n   toastyDark++\\n  }\\n  // Add your logic here\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them.\\nI need ${medium} orders of the medium coffee with cream in them.\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them.`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1248,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-23T17:13:58.350Z",
    "first_attempt": "2025-06-23T16:56:23.631Z",
    "last_attempt": "2025-06-23T17:13:58.350Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1249,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-23T17:19:41.661Z",
    "first_attempt": "2025-06-23T17:15:22.880Z",
    "last_attempt": "2025-06-23T17:19:41.661Z",
    "completed_code": "{'code': \"/*\\r\\n  Currently this function can only talk about running.\\r\\n  Change it to work with any activity.\\r\\n*/\\r\\nfunction describeActivity(activity) {\\r\\n    console.log(`I love ${activity}!`)\\r\\n}\\r\\ndescribeActivity('walking')\\r\\ndescribeActivity('making dish')\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1250,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 16,
    "complete": true,
    "completed_on": "2025-07-02T17:32:22.152Z",
    "first_attempt": "2025-06-23T18:19:18.112Z",
    "last_attempt": "2025-07-02T17:32:22.152Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreaterThanHundred(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayWelcomeMessage(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscountedPrice(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1251,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-23T18:41:31.680Z",
    "last_attempt": "2025-06-23T18:50:36.015Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1252,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-23T19:03:18.932Z",
    "first_attempt": "2025-06-23T18:43:26.839Z",
    "last_attempt": "2025-06-23T19:03:18.932Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\ndescribeActivity(\"basketball\")\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1253,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-23T19:06:39.326Z",
    "first_attempt": "2025-06-23T18:57:12.780Z",
    "last_attempt": "2025-06-23T19:06:39.326Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\r\\nfunction calculateTotal(price) {\\r\\n    const total = price + (price * 0.1)\\r\\n    console.log(\"Total with tax: $\" + total)\\r\\n}\\r\\n\\r\\n// Call the function three times:\\r\\n// 1. Calculate total for $50\\r\\n// 2. Calculate total for $99.99\\r\\n// 3. Calculate total for $25.50\\r\\ncalculateTotal(50)\\r\\ncalculateTotal(99.99)\\r\\ncalculateTotal(25.50)\\r\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1254,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "functions-multiple-parameters",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-23T19:32:13.692Z",
    "first_attempt": "2025-06-23T19:26:55.183Z",
    "last_attempt": "2025-06-23T19:32:13.692Z",
    "completed_code": "{'code': '/*\\r\\n  Create your function here with two parameters.\\r\\n  Remember to use both parameters in the message.\\r\\n*/\\r\\nfunction displayGameScore(username, score){\\r\\n    console.log(`${username} scored ${score} points!`)\\r\\n}\\r\\n\\r\\n// Then invoke the function with different player names and scores\\r\\ndisplayGameScore(\"Mario\", 100)\\r\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1255,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Toy Catalog",
    "slug": "leonids-string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-23T19:36:54.446Z",
    "first_attempt": "2025-06-23T19:36:54.445Z",
    "last_attempt": "2025-06-23T19:36:54.446Z",
    "completed_code": "{'code': '// Define the toy catalog array with exactly three objects\\nconst toyCatalog = [\\n  { name: \"Wooden Train\", priceInDollars: 30, color: \"Red\" },\\n  { name: \"Stuffed Rabbit\", priceInDollars: 25, color: \"Gray\" },\\n  { name: \"Painted Kite\", priceInDollars: 20, color: \"Blue\" }\\n];\\n\\n// Define the display catalog array\\nconst displayCatalog = [];\\n\\n// Use for...of loop to build formatted strings and add them to displayCatalog\\nfor (const toy of toyCatalog) {\\n  const formattedString = `Toy: ${toy.name} | Price: $${toy.priceInDollars} | Color: ${toy.color}`;\\n  displayCatalog.push(formattedString);\\n}\\n\\n// Display the results\\nconsole.log(\"Original catalog:\");\\nconsole.log(toyCatalog);\\nconsole.log(\"\\\\nFormatted display catalog:\");\\ndisplayCatalog.forEach(item => console.log(item));'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1256,
  "fields": {
    "learner_github_id": "213928804",
    "learner_name": "Jason Norman",
    "title": "Undefined",
    "slug": "leonids-iteration-update",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-23T19:52:05.887Z",
    "first_attempt": "2025-06-23T19:48:36.421Z",
    "last_attempt": "2025-06-23T19:52:05.887Z",
    "completed_code": "{'code': 'const toyCatalog = [\\n { name: \"Wooden Train\", priceInDollars: 30, color: \"Red\" },\\n { name: \"Stuffed Rabbit\", priceInDollars: 25, color: \"Gray\" },\\n { name: \"Painted Kite\", priceInDollars: 20, color: \"Blue\" }\\n];\\n\\n// Define empty displayCatalog array\\nconst displayCatalog = [];\\n\\n// Use for...of loop to process each toy\\nfor (const toy of toyCatalog) {\\n  // Access properties using dot notation and increase price by 5%\\n  const increasedPrice = toy.priceInDollars * 1.05;\\n  \\n  // Format string using template literals and add directly to displayCatalog\\n  displayCatalog.push(`Toy: ${toy.name} | Price: $${increasedPrice.toFixed(2)} | Color: ${toy.color}`);\\n}\\n\\n// Display the results\\nconsole.log(\"Updated Toy Catalog with 5% Price Increase:\");\\nconsole.log(\"=\".repeat(50));\\n\\nfor (const toy of displayCatalog) {\\n  console.log(toy);\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1257,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-23T22:44:41.508Z",
    "first_attempt": "2025-06-23T22:44:41.507Z",
    "last_attempt": "2025-06-23T22:44:41.508Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1258,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-23T22:50:24.917Z",
    "first_attempt": "2025-06-23T22:50:24.914Z",
    "last_attempt": "2025-06-23T22:50:24.917Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\n\\n\\n// Then invoke the function with different player names and scores\\n\\nfunction displayGameScore(playerName, points){\\nconsole.log(`${playerName} scored ${points} points!`)\\n}\\ndisplayGameScore(\"Evan\", 26)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1259,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-23T23:19:39.604Z",
    "first_attempt": "2025-06-23T23:19:39.603Z",
    "last_attempt": "2025-06-23T23:19:39.604Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\n\\nconst add = (x, y) => x + y\\n\\n\\nconst greet = (name) => {\\n    return \"Hello, \" + name + \"!\"\\n}\\n\\nconst getRandomNumber = () => Math.random()\\n\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber()\\nconst greeting = greet (\"Evan\")\\nconst sum = add(225+123)\\n\\nconsole.log(random, greeting, sum)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1260,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "functions-arrow-syntax",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-06-24T00:21:01.154Z",
    "first_attempt": "2025-06-24T00:08:16.785Z",
    "last_attempt": "2025-06-24T00:21:01.154Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\r\\n\\r\\nconst add = (x, y) =>  x + y\\r\\n\\r\\nconst greet = name => \"Hello, \" + name + \"!\"\\r\\n\\r\\nconst getRandomNumber = () => Math.random()\\r\\n\\r\\n\\r\\n// After converting, test your functions by invoking them here\\r\\nconst random = getRandomNumber()\\r\\nconst greeting = greet(\"Deniz\")\\r\\nconst sum = add(5, 3)\\r\\n\\r\\nconsole.log(random, greeting, sum)\\r\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1261,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Undefined",
    "slug": "html-intro",
    "attempts": 483,
    "complete": true,
    "completed_on": "2025-06-26T14:41:12.004Z",
    "first_attempt": "2025-06-24T12:47:10.249Z",
    "last_attempt": "2025-06-28T15:37:04.983Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n      <!-- Your content goes here -->\\n  <h1>\\n    How I Became A Software Developer\\n  </h1>\\n<article>\\n    <h2>\\n      Nashville Software School\\n    </h2>\\n  <section>\\n        <p>I am so excited for Cohort 78 to commense on July 7th! I could not be more optimistic about the career change and shift in thinking starting this journey will initiate!</p>\\n  </section>\\n  <section>\\n        <p>I learned the following skills</p>\\n        <ol>\\n          <li>Variables</li>\\n          <li>Arrays</li>\\n          <li>Objects</li>\\n          <li>Functions</li>\\n          <li>HTML</li>\\n          <li>CSS</li>\\n        </ol>\\n  </section>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1262,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Introduction to HTML",
    "slug": "html-elements",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-24T12:49:22.391Z",
    "last_attempt": "2025-06-24T12:49:22.414Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1263,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Introduction to HTML",
    "slug": "html-elements",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-24T12:49:22.391Z",
    "last_attempt": "2025-06-24T12:49:22.410Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1264,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-24T12:49:31.925Z",
    "last_attempt": "2025-06-24T12:49:31.925Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1265,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-24T12:49:31.925Z",
    "last_attempt": "2025-06-24T12:49:31.947Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1266,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Undefined",
    "slug": "flexbox-intro",
    "attempts": 237,
    "complete": true,
    "completed_on": "2025-06-28T15:22:27.283Z",
    "first_attempt": "2025-06-24T12:50:09.441Z",
    "last_attempt": "2025-06-28T15:56:17.224Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links {\\n  list-style: none;\\n}\\n\\n/* Make the navbar a flex container and style it */\\n\\n.nav-links {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-evenly;\\n  background-color: aqua;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1267,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Undefined",
    "slug": "css-selectors",
    "attempts": 148,
    "complete": true,
    "completed_on": "2025-06-28T15:08:54.642Z",
    "first_attempt": "2025-06-24T12:50:13.674Z",
    "last_attempt": "2025-06-28T15:38:05.085Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\np {\\n color: magenta;\\n}\\nh1, h2, h3 {\\n  background-color: aquamarine;\\n}\\n.highlight {\\n  background-color: aqua;\\n}\\n#advanced {\\n  font-weight: bold;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1268,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "CSS Selectors",
    "slug": "flexbox-container",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-24T12:50:47.893Z",
    "last_attempt": "2025-06-24T12:50:47.893Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1269,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "CSS Selectors",
    "slug": "flexbox-container",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-24T12:50:47.893Z",
    "last_attempt": "2025-06-24T12:50:47.910Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1270,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "CSS Selectors",
    "slug": "flexbox-container",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-24T12:50:47.893Z",
    "last_attempt": "2025-06-24T12:50:47.913Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1271,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-24T12:51:21.377Z",
    "last_attempt": "2025-06-24T12:51:21.396Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1272,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-24T12:51:21.377Z",
    "last_attempt": "2025-06-24T12:51:21.377Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1273,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-24T12:51:21.377Z",
    "last_attempt": "2025-06-24T12:51:21.400Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1274,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Flexbox Item Properties",
    "slug": "functions-conditions",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-24T14:13:16.851Z",
    "first_attempt": "2025-06-24T12:51:37.941Z",
    "last_attempt": "2025-06-24T14:13:16.851Z",
    "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\n  let price = 10\\n        // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n  if (isWeekend === true) {\\n    price = price + 2\\n  }\\n        // 3. Apply a 50% discount the person is under 12 OR 65 or older\\n  if (age < 12 || age >= 65) {\\n    price = price * .5\\n  }\\n\\n  \\n      // 4. Return the final ticket price\\n  return price \\n}\\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n\\n  // Example:\\n   const adultWeekdayPrice = calculateTicketPrice(25, false);\\n   const childWeekdayPrice = calculateTicketPrice(8, false);\\n   const seniorWeekendPrice = calculateTicketPrice(68, true);\\n\\n  console.log(adultWeekdayPrice)\\n  console.log(childWeekdayPrice)\\n  console.log(seniorWeekendPrice)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1275,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Undefined",
    "slug": "functions-loops",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-24T15:27:07.237Z",
    "first_attempt": "2025-06-24T14:45:51.734Z",
    "last_attempt": "2025-06-24T15:27:07.237Z",
    "completed_code": "{'code': '\\nconst calculateCartTotal = (prices) => {\\n     // 1. Create a variable to store the total, starting at 0\\n  \\n  \\n  let cartTotal = 0\\n\\n      // 2. Loop through all prices in the array and add each to total\\n\\n  for (const price of prices) {\\n    cartTotal += price\\n    //return cartTotal\\n  }\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\n  if (cartTotal > 100) {\\n  cartTotal = cartTotal * .9\\n  }\\n      // 4. Return the final total\\n  return cartTotal\\n }\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\n\\n   const total1 = calculateCartTotal([20, 35, 60])\\n   console.log(total1)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1276,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Undefined",
    "slug": "functions-calling-functions",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-06-24T16:22:36.563Z",
    "first_attempt": "2025-06-24T16:12:32.482Z",
    "last_attempt": "2025-06-24T16:22:36.563Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    return (time * 100) + (targets * 50)\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    if (targets > 10) {\\n        return 1000\\n    }\\n    return 0\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    const basePoints = calculateBasePoints(time, targets)\\n    const bonus = calculateBonus(targets)\\n    return basePoints + bonus\\n}\\n\\nconst finalScoreNoBonus = calculateFinalScore(2, 12)\\nconsole.log(finalScoreNoBonus)\\n  '}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1277,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-24T16:54:36.176Z",
    "first_attempt": "2025-06-24T16:49:07.394Z",
    "last_attempt": "2025-06-24T16:54:36.176Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\r\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\r\\nconst makeGreeting = name => \"Hello,\" + \" \" + name +\"!\" \\r\\n\\r\\n\\r\\n// Invoke the function and assign the return value to a variable\\r\\nconst tellName = makeGreeting(\"John\")\\r\\n\\r\\n\\r\\n// Console log the variable you used above to see the greeting\\r\\nconsole.log(tellName)\\r\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1278,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-24T18:21:08.743Z",
    "first_attempt": "2025-06-24T17:27:11.765Z",
    "last_attempt": "2025-06-24T18:21:08.743Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => quantity * price\\n\\n// Create calculateTotal here\\n\\nconst calculateTotal = (subtotal) => subtotal * 1.08\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(3, 4.99)\\n\\n// 2. Calculate the final total with tax\\nconst totalWithTax = calculateTotal(subtotal)\\n\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $ ${subtotal}`)\\nconsole.log(`Total with tax: $${totalWithTax}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1279,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-24T18:09:19.163Z",
    "first_attempt": null,
    "last_attempt": "2025-06-24T18:09:19.163Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1280,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-24T18:09:20.079Z",
    "first_attempt": null,
    "last_attempt": "2025-06-24T18:09:20.079Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1281,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-24T19:00:25.728Z",
    "first_attempt": "2025-06-24T18:47:45.958Z",
    "last_attempt": "2025-06-24T19:00:25.728Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\nconst calculateGameScore = (basePoints, bonusMultiplier) => {\\n  const totalPoints = basePoints * bonusMultiplier\\n  if (totalPoints >= 1000) {\\n    return \"High Score!\"\\n  } else {\\n    return \"Keep trying!\"\\n  }\\n}\\n\\n  // Call your function with different values and store a result in a variable\\n\\nconst actualScore = calculateGameScore(700, 1.5)\\n  // Log the result to see the output\\n\\nconsole.log(`${actualScore}`)  '}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1282,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-24T19:40:55.527Z",
    "first_attempt": "2025-06-24T19:24:27.381Z",
    "last_attempt": "2025-06-24T19:40:55.527Z",
    "completed_code": "{'code': '// This code has scope problems!\\nlet score = 0\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1283,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-24T19:36:55.725Z",
    "first_attempt": "2025-06-24T19:36:55.721Z",
    "last_attempt": "2025-06-24T19:36:55.725Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n     name: \"Jeremy Landy\",\\n     location: \"Phoenix, AR\",\\n     gender: \"male\",\\n     age: 31   \\n}\\n\\nconsole.log(student)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1284,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-24T19:46:46.750Z",
    "first_attempt": "2025-06-24T19:46:46.749Z",
    "last_attempt": "2025-06-24T19:46:46.750Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n   color: \"pink\",\\n   stemLength: 4,\\n   growingSeason: \"Summer\",\\n   thorny: true\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n   color: \"red\",\\n   stemLength: 5,\\n   growingSeason: \"Spring\",\\n   thorny: false\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1285,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-24T19:54:00.901Z",
    "first_attempt": "2025-06-24T19:54:00.899Z",
    "last_attempt": "2025-06-24T19:54:00.901Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\n\\nfor (const patientObject of appointments) {\\n     schedule += `Patient ${patientObject.firstName} ${patientObject.lastName} has an appointment at ${patientObject.appointmentTime}\\\\n`   \\n}\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1286,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-24T20:09:55.047Z",
    "first_attempt": "2025-06-24T20:09:55.047Z",
    "last_attempt": "2025-06-24T20:09:55.047Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \"Large Tank\"\\n\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1287,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 13,
    "complete": true,
    "completed_on": "2025-06-25T00:02:23.154Z",
    "first_attempt": "2025-06-24T20:29:18.552Z",
    "last_attempt": "2025-06-25T00:02:23.154Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses;\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\nconsole.log(statement)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1288,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-24T22:18:08.866Z",
    "first_attempt": "2025-06-24T22:18:08.864Z",
    "last_attempt": "2025-06-24T22:18:08.866Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")) {\\n    light++\\n  }\\n  else if (coffee.includes(\"medium\")) {\\n    medium++\\n  }\\n  else if (coffee.includes(\"dark\") || coffee.includes(\"toasty\")) {\\n    toastyDark++\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1289,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-24T22:35:48.559Z",
    "first_attempt": "2025-06-24T22:26:36.245Z",
    "last_attempt": "2025-06-24T22:35:48.559Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1290,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-24T23:05:25.652Z",
    "first_attempt": "2025-06-24T22:44:37.011Z",
    "last_attempt": "2025-06-24T23:05:25.652Z",
    "completed_code": "{'code': 'const name = \"Jeremy Landy\"\\nconst location = \"Phoenix, AR\"\\nconst gender = \"male\"\\nconst age = 31\\n\\nconst student = {\\n    name: \"Jeremy Landy\",\\n    location: \"Phoenix, AR\",\\n    gender: \"male\",\\n    age: 31\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1291,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-24T23:11:36.929Z",
    "first_attempt": "2025-06-24T23:10:47.170Z",
    "last_attempt": "2025-06-24T23:11:36.929Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\ncolor: \"pink\",\\nstemLength: 7,\\ngrowingSeason: \"Spring\",\\nthorny: false\\n}\\n\\n// Complete the rose object\\nconst rose = {\\ncolor: \"red\",\\nstemLength: 8,\\ngrowingSeason: \"Summer\",\\nthorny: true\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1292,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "variables-review",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-30T23:52:36.862Z",
    "first_attempt": "2025-06-24T23:12:34.536Z",
    "last_attempt": "2025-06-30T23:52:36.862Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1293,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-25T01:02:47.894Z",
    "first_attempt": "2025-06-24T23:19:50.931Z",
    "last_attempt": "2025-06-25T01:02:47.895Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\nfor (const appointment of appointments) {\\n    schedule += `Patient ${appointment.firstName} ${appointment.lastName} has an appointment at ${appointment.appointmentTime}\\\\n`\\n}\\n\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1294,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T00:32:32.685Z",
    "first_attempt": "2025-06-25T00:32:32.683Z",
    "last_attempt": "2025-06-25T00:32:32.685Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1295,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T00:35:41.078Z",
    "first_attempt": "2025-06-25T00:35:41.076Z",
    "last_attempt": "2025-06-25T00:35:41.078Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1296,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T00:39:28.107Z",
    "first_attempt": "2025-06-25T00:39:28.106Z",
    "last_attempt": "2025-06-25T00:39:28.107Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\ngoldfish.location = \"Large Tank\"'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1297,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-25T00:55:29.778Z",
    "first_attempt": "2025-06-25T00:45:23.739Z",
    "last_attempt": "2025-06-25T00:55:29.778Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1298,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-25T00:54:47.031Z",
    "first_attempt": "2025-06-25T00:50:21.863Z",
    "last_attempt": "2025-06-25T00:54:47.031Z",
    "completed_code": "{'code': '\\nlet highScore = 0\\nconst checkHighScore = (playerName, score) => {\\n    if (score > highScore) {\\n        highScore = score\\n        return `New high score! Congrats, ${playerName}!`\\n    }\\n    else {\\n        return `Nice try, ${playerName}. The high score is still ${highScore}.`\\n    }\\n   \\n    }\\n\\nconsole.log(checkHighScore(\"Alice\", 50))\\nconsole.log(checkHighScore(\"Deniz\", 70))\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1299,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-25T01:05:59.731Z",
    "first_attempt": "2025-06-25T01:05:12.785Z",
    "last_attempt": "2025-06-25T01:05:59.731Z",
    "completed_code": "{'code': '// Write your function here\\n\\n\\n\\n// This should display \"Good dog!\" when you run your code\\nfunction greetPet() {\\n    console.log(\"Good dog!\")\\n}\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1300,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T01:08:32.024Z",
    "first_attempt": "2025-06-25T01:08:32.022Z",
    "last_attempt": "2025-06-25T01:08:32.024Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n    console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore()\\ncelebrateScore()\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1301,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-25T01:21:41.827Z",
    "first_attempt": "2025-06-25T01:21:06.017Z",
    "last_attempt": "2025-06-25T01:21:41.827Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreater(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction showGreeting(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscounted(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1302,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T01:25:30.664Z",
    "first_attempt": "2025-06-25T01:25:30.662Z",
    "last_attempt": "2025-06-25T01:25:30.664Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1303,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Undefined",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T01:31:48.810Z",
    "first_attempt": "2025-06-25T01:31:48.808Z",
    "last_attempt": "2025-06-25T01:31:48.810Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1304,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 22,
    "complete": true,
    "completed_on": "2025-06-25T01:59:46.624Z",
    "first_attempt": "2025-06-25T01:35:03.477Z",
    "last_attempt": "2025-06-25T01:59:46.624Z",
    "completed_code": "{'code': 'const calculateTicketPrice = (age, isWeekend) => {\\n  let price = 10\\n\\n  if (isWeekend) {\\n    price += 2\\n  }\\n\\n  if (age < 12 || age >= 65) {\\n    price *= 0.5\\n  }\\n\\n  return price\\n}\\n\\nconst seniorWeekday = calculateTicketPrice(70, false)\\nconsole.log(seniorWeekday)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1305,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "arrays-split-join",
    "attempts": 13,
    "complete": true,
    "completed_on": "2025-08-05T23:24:32.147Z",
    "first_attempt": "2025-06-25T03:20:36.388Z",
    "last_attempt": "2025-08-05T23:24:32.147Z",
    "completed_code": "{'code': 'const disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n// Split the string into an array\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n// Join the array back into a string with HTML div tags\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n// Add the opening and closing div tags\\nconst output = `<div>${htmlString}</div>`\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1306,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-25T05:32:38.593Z",
    "first_attempt": "2025-06-25T05:28:03.421Z",
    "last_attempt": "2025-06-25T05:32:38.593Z",
    "completed_code": "{'code': 'const student = {\\n  name: \"Jeremy Landy\",\\n  location: \"Phoenix, AR\",\\n  gender: \"male\",\\n  age: 31\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1307,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T05:43:03.164Z",
    "first_attempt": "2025-06-25T05:43:03.164Z",
    "last_attempt": "2025-06-25T05:43:03.164Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n  color: \"purple\",\\n  stemLength: 5,\\n  growingSeason: \"Spring\",\\n  thorny: false\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n  color: \"red\",\\n  stemLength: 7,\\n  growingSeason: \"Summer\",\\n  thorny: true\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1308,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "flexbox-container",
    "attempts": 3,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-25T05:45:40.226Z",
    "last_attempt": "2025-06-30T05:56:50.189Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1309,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "html-intro",
    "attempts": 411,
    "complete": true,
    "completed_on": "2025-06-28T22:25:23.232Z",
    "first_attempt": "2025-06-25T05:45:55.993Z",
    "last_attempt": "2025-06-28T22:42:34.752Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n  <article>\\n  <h1>How I Became A Software Developer</h1>      <!-- Your content goes here -->\\n  <h2>Nashville Software School</h2>\\n  <section>\\n  <p>Nashville Software School was truly a blessing from the very beginning! All Glory Be to God!</p>\\n  </section>\\n  <section>\\n    <p>I learned the following skills\\n      <ol>\\n        <li>Variables</li>\\n        <li>Arrays</li>\\n        <li>Objects</li>\\n        <li>Functions</li>\\n        <li>HTML</li>\\n        <li>CSS</li>\\n      </ol>\\n    </p>\\n  </section>\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1310,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "objects-collections",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-06-26T02:22:13.455Z",
    "first_attempt": "2025-06-25T05:46:01.752Z",
    "last_attempt": "2025-06-26T02:22:13.455Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\nfor (const appointment of appointments) {\\n    schedule += `Patient ${appointment.firstName} ${appointment.lastName} has an appointment at ${appointment.appointmentTime}\\\\n`\\n}\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1311,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T14:32:40.543Z",
    "first_attempt": "2025-06-25T14:32:40.541Z",
    "last_attempt": "2025-06-25T14:32:40.543Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const cost of monthlyExpenses) {\\n   totalExpense += cost\\n  // Add the current monthly cost to the value of totalExpense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1312,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-25T14:39:51.273Z",
    "first_attempt": "2025-06-25T14:38:19.088Z",
    "last_attempt": "2025-06-25T14:39:51.273Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 45, 74, 38, 25, 47, 26,  29, 41, 51, 32, 63,38  ]\\nlet totalMiles = 0\\n// Declare a variable to store the total. Initial value is 0.\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n    Add each mileage to the total mileage variable.\\n    */\\n    for (const mile of weeklyMiles) {\\n      totalMiles += mile\\n\\n    }\\n\\naverageMiles = totalMiles / weeklyMiles.length\\n    // Declare a new variable to store the average miles over time\\n    console.log(`I average ${totalMiles} miles each week. \\n    I have driven a total of ${totalMiles} miles.`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1313,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-25T14:45:21.489Z",
    "first_attempt": "2025-06-25T14:43:49.140Z",
    "last_attempt": "2025-06-25T14:45:21.489Z",
    "completed_code": "{'code': '// Don\\'t add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours) {\\n   if (hour < \"7\") {\\n      grumpyHours.push(hour)\\n   }\\n   else {\\n      happyHours.push(hour)\\n   }\\n}\\n\\nconsole.log(`I was grumpy on ${grumpyHours} days.\\nI was happy on ${happyHours} days.`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1314,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Undefined",
    "slug": "functions-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T15:34:36.258Z",
    "first_attempt": "2025-06-25T15:34:36.257Z",
    "last_attempt": "2025-06-25T15:34:36.258Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  // Otherwise, return \"Hello, [name]!\"\\n  if (time === \"morning\" || name.charAt(0) === \"A\") {\\n    return `Good morning, ${name}!`\\n  } else if (time === \"afternoon\") {\\n    return `Good afternoon, ${name}!`\\n  } else {\\n    return `Hello, ${name}!`\\n  }\\n}\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  // If topic is \"weather\", return the weather joke\\n  // If topic is \"animals\", return the animals joke\\n  // Otherwise, return the default joke\\n  if (topic === \"weather\") {\\n    return \"What do you call a stormy robot? A thunder-bot!\"\\n  } else if (topic ===\"animals\") {\\n    return \"Why did the robot go to the zoo? To study creature features!\"\\n  } else {\\n    return \"Why was the robot tired? Because it had too many bytes!\"\\n  }\\n\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n  let greetings = []\\n  // Loop through each person in the people array\\n  // Create a greeting for each person\\n  // Add the greeting to the array\\n  for (person of people) {\\n    const greeting = createGreeting(person, time)\\n    greetings.push(greeting)\\n  }\\n \\n  // Return the array of greetings\\n  return greetings\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n  const greeting = createGreeting(name, time)\\n\\n  // Get the joke\\n  const joke = tellJoke(topic)\\n\\n  // Return both together\\n  return `${greeting} ${joke}`\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1315,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-25T17:50:12.198Z",
    "first_attempt": "2025-06-25T17:47:45.631Z",
    "last_attempt": "2025-06-25T17:50:12.198Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n  return (time*100) + (targets*50)\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n  if (targets > 10) {\\n      return 1000\\n  }\\n    else {\\n      return 0\\n    }\\n}\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n    const basePoints = calculateBasePoints(time, targets)\\n    const bonusPoints = calculateBonus(targets)\\n    return basePoints + bonusPoints\\n    // Add the results together and return the sum\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\n\\n       const finalScore = calculateFinalScore(2, 5)\\n       console.log(calculateFinalScore(2, 5))\\n '}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1316,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T19:41:17.625Z",
    "first_attempt": "2025-06-25T19:41:17.624Z",
    "last_attempt": "2025-06-25T19:41:17.625Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet() {\\n  console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1317,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T19:42:54.213Z",
    "first_attempt": "2025-06-25T19:42:54.212Z",
    "last_attempt": "2025-06-25T19:42:54.213Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n     console.log(\"Touchdown!\")   \\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore()\\ncelebrateScore()\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1318,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-25T19:46:16.286Z",
    "first_attempt": "2025-06-25T19:44:49.778Z",
    "last_attempt": "2025-06-25T19:46:16.286Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isNumberGreater(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction createWelcomeText(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price aftert a 20% discount\\nfunction calculatePrice(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1319,
  "fields": {
    "learner_github_id": "186857286",
    "learner_name": "Darren Raines",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-25T19:45:40.898Z",
    "first_attempt": null,
    "last_attempt": "2025-06-25T19:45:40.898Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1320,
  "fields": {
    "learner_github_id": "186857286",
    "learner_name": "Darren Raines",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-25T19:45:43.038Z",
    "first_attempt": null,
    "last_attempt": "2025-06-25T19:45:43.038Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1321,
  "fields": {
    "learner_github_id": "186857286",
    "learner_name": "Darren Raines",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-25T19:45:43.699Z",
    "first_attempt": null,
    "last_attempt": "2025-06-25T19:45:43.699Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1322,
  "fields": {
    "learner_github_id": "186857286",
    "learner_name": "Darren Raines",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-25T19:45:45.080Z",
    "first_attempt": null,
    "last_attempt": "2025-06-25T19:45:45.080Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1323,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-25T19:49:55.673Z",
    "first_attempt": "2025-06-25T19:48:14.446Z",
    "last_attempt": "2025-06-25T19:49:55.673Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\ndescribeActivity(\"running\")\\ndescribeActivity(\"jumping\")\\ndescribeActivity(\"swimming\")'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1324,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T19:54:05.762Z",
    "first_attempt": "2025-06-25T19:54:05.762Z",
    "last_attempt": "2025-06-25T19:54:05.762Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1325,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T19:58:29.750Z",
    "first_attempt": "2025-06-25T19:58:29.747Z",
    "last_attempt": "2025-06-25T19:58:29.750Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(playerName, points) {\\n    console.log(`${playerName} scored ${points} points!`)\\n}\\n\\n// Then invoke the function with different player names and scores\\ndisplayGameScore(\"Jack\", 57)\\ndisplayGameScore(\"Kobe\", 43)\\ndisplayGameScore(\"Kadi\", 78)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1326,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Undefined",
    "slug": "functions-review",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-26T02:26:34.228Z",
    "first_attempt": "2025-06-25T19:59:54.211Z",
    "last_attempt": "2025-06-26T13:56:03.702Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\n const createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  // Otherwise, return \"Hello, [name]!\"\\n  \\n  if (time === \"morning\" || name.startsWith(\"A\")) {\\n      return \"Good morning, \" + name + \"!\"\\n  }\\n    else if (time === \"afternoon\") {\\n          return \"Good afternoon, \" + name + \"!\"\\n    }\\n      else {\\n        return \"Hello, \" + name + \"!\"\\n      }\\n}\\n  \\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  // If topic is \"weather\", return the weather joke\\n  // If topic is \"animals\", return the animals joke\\n  // Otherwise, return the default joke\\n if (topic === \"weather\")  {\\n      return \"What do you call a stormy robot? A thunder-bot!\"\\n  }\\n    else if \\n          (topic === \"animals\") {\\n          return \"Why did the robot go to the zoo? To study creature features!\"\\n    }\\n      else { \\n        return \"Why was the robot tired? Because it had too many bytes!\"\\n      }\\n}\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n    const greetings = []\\n  // Loop through each person in the people array\\n    \\n      for (const person of people) {\\n\\n      \\n  // Create a greeting for each person\\n        //createGreeting(person, time)\\n       \\n  // Add the greeting to the array\\n        const greeting = createGreeting(person, time)\\n          greetings.push(greeting)\\n          \\n  // Return the array of greetings\\n      }\\n    return greetings\\n}\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n    const theGreeting =  createGreeting(name, time)\\n   \\n  // Get the joke\\n    const theJoke = tellJoke(topic) \\n  // Return both together\\n    return `${theGreeting} ${theJoke}`\\n}\\n\\n// Test your functions\\n\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1327,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-25T20:15:54.331Z",
    "first_attempt": "2025-06-25T20:04:36.001Z",
    "last_attempt": "2025-06-25T20:15:54.331Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\n\\nconst add = (x, y) => {\\n    return x + y\\n}\\n\\nconst greet = name => {\\n    return \"Hello, \" + name + \"!\"\\n}\\n\\nconst getRandomNumber = () => Math.random()\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber()\\nconst greeting = greet(\"Jack\")\\nconst number = add(4, 3)\\n\\nconsole.log(random, greeting, number)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1328,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T20:30:57.764Z",
    "first_attempt": "2025-06-25T20:30:57.763Z",
    "last_attempt": "2025-06-25T20:30:57.764Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\nconst makeGreeting = (name) => {\\n        return `Hello, ${name}!`\\n}\\n\\n\\n// Invoke the function and assign the return value to a variable\\nconst greeting = makeGreeting(\"John\")\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(greeting)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1329,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-25T21:45:35.254Z",
    "first_attempt": "2025-06-25T20:47:49.393Z",
    "last_attempt": "2025-06-25T21:45:35.254Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => {\\n     return quantity * price   \\n}\\n\\n// Create calculateTotal here\\nconst calculateTotal = (subtotal) => {\\n     return subtotal * 1.08   \\n}\\n\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst calculate = calculateSubtotal(3, 4.99)\\n\\n// 2. Calculate the final total with tax\\nconst total = calculateTotal(calculate)\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $ ${calculate}`)\\nconsole.log(`Total with tax: $${total}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1330,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-25T20:51:16.603Z",
    "first_attempt": "2025-06-25T20:49:40.255Z",
    "last_attempt": "2025-06-25T20:51:16.603Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n   if (coffee.includes(\"light\")) {\\n      light++\\n   }\\n   else if (coffee.includes(\"medium\")) {\\n      medium++\\n   }\\n   else if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")) {\\n      toastyDark++\\n   }\\n  // Add your logic here\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1331,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T21:14:06.191Z",
    "first_attempt": "2025-06-25T21:14:06.190Z",
    "last_attempt": "2025-06-25T21:14:06.191Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(playerName, points) {\\n    console.log(`${playerName} scored ${points} points!`)\\n}\\n\\n// Then invoke the function with different player names and scores\\n\\ndisplayGameScore(\"Mario\", 100)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1332,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Undefined",
    "slug": "arrays-split-join",
    "attempts": 32,
    "complete": true,
    "completed_on": "2025-06-30T00:58:30.330Z",
    "first_attempt": "2025-06-25T21:20:36.912Z",
    "last_attempt": "2025-06-30T00:58:30.330Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\nconsole.log(disorderArray)\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\nconsole.log(`</div>${htmlString}</div>`)\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1333,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-06-25T21:36:08.819Z",
    "first_attempt": "2025-06-25T21:21:49.812Z",
    "last_attempt": "2025-06-25T21:36:08.819Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\nconst add = (x, y) => x + y\\nconst greet = name => `Hello, ${name}!`\\nconst getRandomNumber = () => Math.random()\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber()\\nconst greeting = greet(\"Alice\")\\nconst sum = add(5, 3)\\n\\n\\nconsole.log(random, greeting, sum)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1334,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-25T21:46:56.028Z",
    "first_attempt": "2025-06-25T21:42:34.984Z",
    "last_attempt": "2025-06-25T21:46:56.028Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\nconst makeGreeting = (name) => {\\n    return `\"Hello, ${name}!\"`\\n}\\n\\n\\n// Invoke the function and assign the return value to a variable\\nconst greet = makeGreeting(\"John\")\\n\\n// Console log the variable you used above to see the greeting\\n\\nconsole.log(greet)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1335,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T21:52:38.957Z",
    "first_attempt": "2025-06-25T21:52:38.955Z",
    "last_attempt": "2025-06-25T21:52:38.957Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\nconst calculateGameScore = (basePoints, bonusMultiplier) => {\\n      const total = basePoints * bonusMultiplier \\n      if (total >= 1000) {\\n        return \"High Score!\"\\n      } else {\\n        return \"Keep trying!\"\\n      }\\n}\\n\\n  // Call your function with different values and store a result in a variable\\nconst gameScore = calculateGameScore(400, 4)\\n\\n  // Log the result to see the output\\nconsole.log(gameScore)\\n  '}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1336,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-25T21:58:36.554Z",
    "first_attempt": "2025-06-25T21:57:51.219Z",
    "last_attempt": "2025-06-25T21:58:36.554Z",
    "completed_code": "{'code': '// This code has scope problems!\\nlet score = 0\\n\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n   score = score + 100\\n}\\n\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1337,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-25T22:13:45.969Z",
    "first_attempt": "2025-06-25T21:58:19.923Z",
    "last_attempt": "2025-06-25T22:13:45.969Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => {\\n    return quantity * price\\n}\\n\\n// Create calculateTotal here\\nconst calculateTotal = (subtotal) => {\\n    return subtotal * 1.08\\n}\\n\\n// Test your functions:\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(3, 4.99)\\nconsole.log(\"Subtotal: $\" + subtotal.toFixed(2))\\n\\n// 2. Calculate the final total with tax\\nconst finalTotal = calculateTotal(subtotal)\\nconsole.log(\"Total with tax: $\" + finalTotal.toFixed(2))\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1338,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-25T22:24:38.635Z",
    "first_attempt": "2025-06-25T22:07:42.074Z",
    "last_attempt": "2025-06-25T22:24:38.635Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\nconst checkHighScore = (playerName, score) => {\\n      if (score > highScore) {\\n        highScore = score\\n        return `New High Score of ${score} from ${playerName}`\\n      } else {\\n        return `Sorry! You did not beat the high score, ${playerName}.`\\n      }\\n}\\n\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\nconsole.log(checkHighScore(\"Jack\", 90))\\nconsole.log(checkHighScore(\"Kadi\", 80))\\nconsole.log(highScore)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1339,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-25T22:32:48.014Z",
    "first_attempt": "2025-06-25T22:23:47.114Z",
    "last_attempt": "2025-06-25T22:32:48.014Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  const calculateGameScore = (points, multiplier) => {\\n      const total = points * multiplier\\n      if (total >= 1000) {\\n          return \"High Score!\"\\n      } else {\\n          return \"Keep trying!\"\\n      }\\n  }\\n\\n  // Call your function with different values and store a result in a variable\\n  const result1 = calculateGameScore(500, 2.5)\\n  const result2 = calculateGameScore(400, 2)\\n\\n  // Log the result to see the output\\n  console.log(`Result 1: ${result1}`)\\n  console.log(`Result 2: ${result2}`)\\n  '}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1340,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-25T22:45:23.491Z",
    "first_attempt": "2025-06-25T22:39:56.069Z",
    "last_attempt": "2025-06-25T22:45:23.491Z",
    "completed_code": "{'code': '// This code has scope problems!\\nlet score = 0\\n\\nconst displayScore = () => {\\n    console.log(`Score: ${score}`)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1341,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-25T23:00:18.929Z",
    "first_attempt": "2025-06-25T22:53:01.609Z",
    "last_attempt": "2025-06-25T23:00:18.929Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\nconst checkHighScore = (playerName, score) => {\\n    if (score > highScore) {\\n        highScore = score\\n        return `${playerName} set a new high score of ${score}!`\\n    } else {\\n        return `${playerName} scored ${score}. High score is still ${highScore}`\\n    }\\n}\\n\\n// Test your function with multiple calls below\\nconsole.log(checkHighScore(\"Alice\", 50))\\nconsole.log(checkHighScore(\"Bob\", 30))\\nconsole.log(checkHighScore(\"Charlie\", 80))'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1342,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-26T16:00:39.450Z",
    "first_attempt": "2025-06-25T23:15:52.985Z",
    "last_attempt": "2025-06-26T16:00:39.450Z",
    "completed_code": "{'code': 'const calculateTicketPrice = (age, isWeekend) => {\\n      let price = 10\\n\\n      // Add weekend surcharge first\\n      if (isWeekend) {\\n          price += 2\\n      }\\n\\n      // Apply age discount if applicable\\n      if (age < 12 || age >= 65) {\\n          price = price * 0.5\\n      }\\n\\n      return price\\n  }\\n  const adultWeekendTicket = calculateTicketPrice(25, true)\\n  const childWeekdayTicket = calculateTicketPrice(10, false)\\n  console.log(adultWeekendTicket)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1343,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-25T23:27:40.505Z",
    "first_attempt": "2025-06-25T23:25:27.901Z",
    "last_attempt": "2025-06-25T23:27:40.505Z",
    "completed_code": "{'code': \"const calculateCartTotal = (prices) => {\\n  let total = 0\\n\\n  // for..of döngüsüyle tüm fiyatları topla\\n  for (const price of prices) {\\n    total += price\\n  }\\n\\n  // Toplam 100'den büyükse %10 indirim uygula\\n  if (total > 100) {\\n    total *= 0.9\\n  }\\n\\n  return total\\n}\\n\\n// Test et\\nconst cart1 = [20, 30, 40]\\nconst cart2 = [50, 60, 10]\\nconst cart3 = []\\nconst cart4 = [100]\\nconst cart5 = [100.01]\\n\\nconsole.log(calculateCartTotal(cart1))\\nconsole.log(calculateCartTotal(cart2))\\nconsole.log(calculateCartTotal(cart3))\\nconsole.log(calculateCartTotal(cart4))\\nconsole.log(calculateCartTotal(cart5).toFixed(2))\\n\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1344,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "functions-calling-functions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T23:32:53.502Z",
    "first_attempt": "2025-06-25T23:32:53.500Z",
    "last_attempt": "2025-06-25T23:32:53.502Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n  return time * 100 + targets * 50\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n  return targets > 10 ? 1000 : 0\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n  const basePoints = calculateBasePoints(time, targets)\\n  const bonus = calculateBonus(targets)\\n  return basePoints + bonus\\n}\\n\\n// Örnek çağırma\\nconst finalScore = calculateFinalScore(2, 5)\\nconsole.log(`Final Score: ${finalScore}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1345,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Undefined",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-25T23:50:53.203Z",
    "first_attempt": "2025-06-25T23:50:53.202Z",
    "last_attempt": "2025-06-25T23:50:53.203Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"MacBook Pro\"\\nconst phone = \"iPhone\"\\nconst television = \"LG 55 Oled\"\\nconst refrigerator = \"GE\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have quite a few electronics. For my computer I have a ${computer}, for my phone I have a ${phone}, for my TV I have a ${television} and finally for my refrigerator I have a ${refrigerator}`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1346,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-26T00:21:55.389Z",
    "first_attempt": "2025-06-26T00:21:55.387Z",
    "last_attempt": "2025-06-26T00:21:55.389Z",
    "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\n     let ticketPrice = 10\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n     if (isWeekend === true) {\\n        ticketPrice = ticketPrice + 2\\n     } \\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n     if (age < 12 || age >= 65) {\\n        ticketPrice = ticketPrice * .5\\n     }\\n      // 4. Return the final ticket price\\n      return ticketPrice\\n  }\\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n  const price = calculateTicketPrice(43, true)\\n  console.log(price)\\n  // Example:\\n  // const adultWeekdayPrice = calculateTicketPrice(25, false);\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1347,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-26T00:31:52.034Z",
    "first_attempt": "2025-06-26T00:31:12.672Z",
    "last_attempt": "2025-06-26T00:31:52.034Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\n    let total = 0\\n      // 2. Loop through all prices in the array and add each to total\\n    for (const price of prices) {\\n        total = total + price\\n    }\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\n    if (total > 100) {\\n        total = total * .9\\n    }\\n      // 4. Return the final total\\n      return total\\n  }\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\nconst cart = [50, 60, 70]\\nconst cartTotal = calculateCartTotal(cart)\\nconsole.log(cartTotal)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1348,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-26T00:52:07.033Z",
    "first_attempt": "2025-06-26T00:45:33.631Z",
    "last_attempt": "2025-06-26T00:52:07.033Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n   return (time * 100) + (targets * 50)\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n   let bonus = 0\\n   if (targets > 10) {\\n      return bonus = 1000 \\n   } else {\\n      return bonus\\n   }\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n    const finalScore = calculateBasePoints(time, targets)\\n    const bonus = calculateBonus(targets)\\n    // Add the results together and return the sum\\n    return bonus + finalScore\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\nconst result = calculateFinalScore(2, 5)\\nconsole.log(result)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1349,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-26T01:15:10.485Z",
    "first_attempt": "2025-06-26T01:14:15.251Z",
    "last_attempt": "2025-06-26T01:15:10.485Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\n\\n\\n\\n// Invoke the function and assign the return value to a variable\\n\\n\\n// Console log the variable you used above to see the greeting\\n\\nconst makeGreeting = (name) => {\\n    return `Hello, ${name}!`\\n}\\nconst greeting = makeGreeting(\"Evan\");\\n console.log(greeting)\\n\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1350,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-26T02:03:37.516Z",
    "first_attempt": "2025-06-26T01:38:39.198Z",
    "last_attempt": "2025-06-26T02:03:37.516Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (price, quantity) => {\\n    return price * quantity;\\n}\\n\\n// Create calculateTotal here\\nconst calculateTotal = (beforeTax) => {\\n    return beforeTax * 1.08;\\n}\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(4.99,3);\\n\\n// 2. Calculate the final total with tax\\nconst total = calculateTotal(subtotal);\\n\\n// 3. Use console.log to display both results\\nconsole.log(\"Subtotal: $\" + subtotal.toFixed(2))\\nconsole.log(\"Total with tax: $\" + total.toFixed(2))\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1351,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-26T02:26:25.800Z",
    "first_attempt": "2025-06-26T02:26:25.799Z",
    "last_attempt": "2025-06-26T02:26:25.800Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1352,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 4,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-26T02:32:25.014Z",
    "last_attempt": "2025-06-26T18:28:15.339Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1353,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-26T02:45:52.823Z",
    "first_attempt": "2025-06-26T02:45:52.822Z",
    "last_attempt": "2025-06-26T02:45:52.823Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1354,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-26T02:38:21.054Z",
    "first_attempt": "2025-06-26T02:38:21.053Z",
    "last_attempt": "2025-06-26T02:38:21.054Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\ngoldfish.location = \"Large Tank\"\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1355,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 258,
    "complete": true,
    "completed_on": "2025-06-26T03:04:04.510Z",
    "first_attempt": "2025-06-26T03:00:05.706Z",
    "last_attempt": "2025-06-26T03:04:04.510Z",
    "completed_code": "{'files': {'index.html': \"<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n  <h1>How I Became A Software Developer</h1>\\n  <article>\\n    <section>\\n      <h2>Nashville Software School</h2>\\n      <p>I'm looking forward to meeting the people attending NSS</p>\\n    </section>\\n    <section>\\n      <p>\\n        I learned the following skills\\n      </p>\\n      <ol>\\n        <li>Variables</li>\\n        <li>Arrays</li>\\n        <li>Objects</li>\\n        <li>Functions</li>\\n        <li>HTML</li>\\n        <li>CSS</li>\\n      </ol>\\n    </section>\\n  </article>\\n</body>\\n</html>\", 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1356,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Introduction to HTML",
    "slug": "html-elements",
    "attempts": 297,
    "complete": true,
    "completed_on": "2025-06-26T03:08:06.179Z",
    "first_attempt": "2025-06-26T03:04:06.878Z",
    "last_attempt": "2025-06-26T03:08:06.179Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n  <main>\\n    <article>\\n      <h1>Dan</h1>\\n      <section>\\n        <p>I have been writing this stuff for 23 years</p>\\n      </section>\\n      <section>\\n        <p>I want to bring designs to life</p>\\n      </section>\\n    </article>\\n  </main>\\n  <footer>\\n    Dan, 2025, dd.subscriptions@gmail.com\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1357,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 123,
    "complete": true,
    "completed_on": "2025-06-26T03:10:45.553Z",
    "first_attempt": "2025-06-26T03:08:09.354Z",
    "last_attempt": "2025-06-26T03:10:45.553Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: lightblue;\\n}\\n\\n/* Add your CSS styles here */\\narticle {\\n  border: 1px solid black;\\n  padding: 1rem;\\n}\\np {\\n  color: purple;\\n}\\nimg {\\n  height: 10rem;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1358,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 13,
    "complete": true,
    "completed_on": "2025-06-26T03:23:57.344Z",
    "first_attempt": "2025-06-26T03:08:38.615Z",
    "last_attempt": "2025-06-26T03:23:57.344Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1359,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "CSS Basics",
    "slug": "css-selectors",
    "attempts": 48,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-26T03:10:47.970Z",
    "last_attempt": "2025-06-26T03:11:30.488Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1360,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "CSS Selectors",
    "slug": "flexbox-intro",
    "attempts": 3,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-26T03:13:58.394Z",
    "last_attempt": "2025-06-26T03:13:58.433Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1361,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-container",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-26T03:14:10.319Z",
    "last_attempt": "2025-06-26T03:14:10.329Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1362,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-26T03:14:17.093Z",
    "last_attempt": "2025-06-26T03:14:17.103Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1363,
  "fields": {
    "learner_github_id": "283611",
    "learner_name": "Dan Denney",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-26T03:14:17.093Z",
    "last_attempt": "2025-06-26T03:14:17.117Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1364,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-26T23:08:31.366Z",
    "first_attempt": "2025-06-26T03:30:18.275Z",
    "last_attempt": "2025-06-26T23:08:31.366Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet () {\\n    console.log(`Good dog!`)\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1365,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-26T23:09:25.228Z",
    "first_attempt": "2025-06-26T03:34:35.935Z",
    "last_attempt": "2025-06-26T23:09:25.228Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction  celebrateScore () {\\n    console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore()\\ncelebrateScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1366,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-26T15:01:31.624Z",
    "first_attempt": null,
    "last_attempt": "2025-06-26T15:01:31.625Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1367,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-26T15:40:27.861Z",
    "first_attempt": "2025-06-26T15:39:28.327Z",
    "last_attempt": "2025-06-26T15:40:27.861Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n   name: \"Jeremy Landy\",\\n   location: \"Phoenix, AR\",\\n   gender: \"male\",\\n   age: 31\\n}\\nconsole.log(student)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1368,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-26T15:43:40.978Z",
    "first_attempt": "2025-06-26T15:43:40.976Z",
    "last_attempt": "2025-06-26T15:43:40.978Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n   color: \"purple\",\\n   stemLength: 12,\\n   growingSeason: \"spring\",\\n   thorny: false\\n\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n   color: \"red\",\\n   stemLength: 10,\\n   growingSeason: \"summer\",\\n   thorny: true\\n\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1369,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-26T15:50:02.293Z",
    "first_attempt": "2025-06-26T15:50:02.291Z",
    "last_attempt": "2025-06-26T15:50:02.293Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\nfor (const patient of appointments) {\\n   schedule += `Patient ${patient.firstName} ${patient.lastName} has an appointment at ${patient.appointmentTime}\\\\n`\\n}\\n\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1370,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-26T15:51:05.273Z",
    "first_attempt": "2025-06-26T15:51:05.272Z",
    "last_attempt": "2025-06-26T15:51:05.273Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1371,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-26T15:52:51.072Z",
    "first_attempt": "2025-06-26T15:52:04.891Z",
    "last_attempt": "2025-06-26T15:52:51.072Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.firstName && book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.firstName && book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1372,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-26T15:53:53.642Z",
    "first_attempt": "2025-06-26T15:53:53.640Z",
    "last_attempt": "2025-06-26T15:53:53.642Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\ngoldfish.location = \"Large Tank\"\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1373,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-26T15:58:01.274Z",
    "first_attempt": "2025-06-26T15:54:28.739Z",
    "last_attempt": "2025-06-26T15:58:01.274Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\nconsole.log(votingLocation)\\n\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1374,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-26T16:00:09.190Z",
    "first_attempt": "2025-06-26T16:00:09.188Z",
    "last_attempt": "2025-06-26T16:00:09.190Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet() {\\n   console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1375,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-26T16:02:05.907Z",
    "first_attempt": "2025-06-26T16:02:05.905Z",
    "last_attempt": "2025-06-26T16:02:05.907Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n   console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\n\\ncelebrateScore()\\ncelebrateScore()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1376,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 15,
    "complete": true,
    "completed_on": "2025-06-26T16:16:40.087Z",
    "first_attempt": "2025-06-26T16:04:04.704Z",
    "last_attempt": "2025-06-26T16:16:40.087Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isMore(num) {\\n    return num > 100\\n}\\nconsole.log(\"The number is greater than 100!\")\\n\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayMessage(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscount(price) {\\n    return price * 0.8\\n}\\nconsole.log(\"The new price is \")'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1377,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-26T16:33:26.013Z",
    "first_attempt": "2025-06-26T16:14:47.407Z",
    "last_attempt": "2025-06-26T16:33:26.013Z",
    "completed_code": "{'code': ' const calculateCartTotal = (prices) => {\\n \\n // 1. Create a variable to store the total, starting at 0\\n      let total = 0\\n      // 2. Loop through all prices in the array and add each to total\\n      for(const price of prices){\\n        total += price\\n      }\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\n      if(total > 100){\\n        total *= 0.9\\n      }\\n      // 4. Return the final total\\n      return total\\n  }\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  const finalPrice = calculateCartTotal([1,2,3,4,5])\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\n  console.log(finalPrice)\\n\\n\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1378,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-26T16:40:28.936Z",
    "first_attempt": "2025-06-26T16:38:09.177Z",
    "last_attempt": "2025-06-26T16:40:28.936Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\nreturn time * 100 + targets * 50\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\nif (targets > 10) {\\n    return 1000\\n}\\nelse {\\n    return 0\\n}\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\nconst basePoints = calculateBasePoints(time, targets)\\n  const bonusPoints = calculateBonus(targets)\\n    // Add the results together and return the sum\\nreturn basePoints + bonusPoints\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\nconst finalScore = calculateFinalScore(2, 5)\\nconsole.log(\"Final score:\", finalScore)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1379,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-26T16:38:12.480Z",
    "last_attempt": "2025-06-26T16:39:47.429Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1380,
  "fields": {
    "learner_github_id": "209704508",
    "learner_name": "Lea Edwards",
    "title": "Introduction to Flexbox",
    "slug": "primitive-vs-reference",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-26T16:44:41.639Z",
    "last_attempt": "2025-06-26T16:44:41.682Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1381,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-26T18:57:06.211Z",
    "first_attempt": "2025-06-26T18:55:59.746Z",
    "last_attempt": "2025-06-26T18:57:06.211Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1382,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-26T18:58:27.913Z",
    "first_attempt": "2025-06-26T18:58:27.911Z",
    "last_attempt": "2025-06-26T18:58:27.913Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1383,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-26T19:09:03.687Z",
    "first_attempt": "2025-06-26T19:08:26.018Z",
    "last_attempt": "2025-06-26T19:09:03.687Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(playerName, points){\\n    console.log(`${playerName} scored ${points} points!`)\\n\\n}\\n\\n\\n// Then invoke the function with different player names and scores\\n\\ndisplayGameScore(\"Mark\", 86)\\ndisplayGameScore(\"Harper\", 67)\\ndisplayGameScore(\"Gracyn\",36)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1384,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Undefined",
    "slug": "functions-arrow-syntax",
    "attempts": 29,
    "complete": true,
    "completed_on": "2025-06-27T20:04:42.092Z",
    "first_attempt": "2025-06-26T19:13:59.434Z",
    "last_attempt": "2025-06-27T20:04:42.092Z",
    "completed_code": "{'code': '\\nconst add = (x, y) => x + y\\n\\n\\nconst greet = (name) => \"Hello, \" + name + \"!\"\\n\\nconst getRandomNumber = () => Math.random()\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber()\\nconst greeting = greet(\"Erin\")\\nconst number = add(2, 6)\\n\\nconsole.log(random, greeting, number)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1385,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-26T19:20:14.795Z",
    "first_attempt": "2025-06-26T19:20:08.893Z",
    "last_attempt": "2025-06-26T19:20:14.795Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 120\\nlet marchBill = 135\\nlet aprilBill = 140\\nlet mayBill = 150\\nlet juneBill = 160\\nlet julyBill = 130\\nlet augustBill = 125\\nlet septemberBill = 140\\nlet octoberBill = 130\\nlet novemberBill = 125\\nlet decemberBill = 120\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill+ mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill \\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1386,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-26T19:36:13.295Z",
    "first_attempt": "2025-06-26T19:33:30.030Z",
    "last_attempt": "2025-06-26T19:36:13.295Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"2022 Mackbook Pro\"\\nconst phone = \"812736376198\"\\nconst television = \"Sony\"\\nconst refrigerator = \"Samsung\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have ${computer} and my contact number is ${phone}, We have tv ${television} and our refrigerator brand is${refrigerator}`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1387,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-26T19:54:07.771Z",
    "first_attempt": "2025-06-26T19:50:13.846Z",
    "last_attempt": "2025-06-26T19:54:07.771Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1388,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-26T20:28:44.750Z",
    "first_attempt": "2025-06-26T20:28:44.746Z",
    "last_attempt": "2025-06-26T20:28:44.750Z",
    "completed_code": "{'code': '// This code has scope problems!\\nlet score = 0\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1389,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "functions-naming",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-07-17T00:50:58.126Z",
    "first_attempt": "2025-06-26T22:51:09.892Z",
    "last_attempt": "2025-07-17T00:50:58.126Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreaterThanHundred(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction createWelcomeMessage(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscountedPrice(price) {\\n    return price * 0.8\\n}\\n\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1390,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-26T22:58:22.098Z",
    "first_attempt": "2025-06-26T22:52:04.018Z",
    "last_attempt": "2025-06-26T22:58:22.098Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  if (time === \"morning\" || name.charAt(0).toLowerCase() === \"a\") {\\n    return `Good morning, ${name}!`\\n  }\\n  // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  if (time === \"afternoon\") {\\n    return `Good afternoon, ${name}!`\\n  }\\n  // Otherwise, return \"Hello, [name]!\"\\n  return `Hello, ${name}!`\\n};\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  // If topic is \"weather\", return the weather joke\\n  if (topic === \"weather\") {\\n    return \"What do you call a stormy robot? A thunder-bot!\"\\n  }\\n  // If topic is \"animals\", return the animals joke\\n  if (topic === \"animals\") {\\n    return \"What do you call a sleeping bull? A bulldozer!\"\\n  }\\n  // Otherwise, return the default joke\\n  return \"Why don\\'t scientists trust atoms? Because they make up everything!\"\\n};\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n  const greetings = []\\n  \\n  // Loop through each person in the people array\\n  for (let i = 0; i < people.length; i++) {\\n    // Create a greeting for each person\\n    const greeting = createGreeting(people[i], time)\\n    // Add the greeting to the array\\n    greetings.push(greeting)\\n  }\\n  \\n  // Return the array of greetings\\n  return greetings\\n};\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n  const greeting = createGreeting(name, time)\\n  // Get the joke\\n  const joke = tellJoke(topic)\\n  // Return both together\\n  return `${greeting} ${joke}`\\n}\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\")\\nconsole.log(greeting)\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\")\\nconsole.log(joke)\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"]\\nconst greetings = greetPeople(people, \"afternoon\")\\nconsole.log(greetings)\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\")\\nconsole.log(interaction)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1391,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "HTML Elements",
    "slug": "html-elements",
    "attempts": 655,
    "complete": true,
    "completed_on": "2025-06-26T23:28:21.862Z",
    "first_attempt": "2025-06-26T23:15:40.102Z",
    "last_attempt": "2025-06-26T23:28:21.862Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n<header>\\n  <nav>\\n    <div>Home</div>\\n    <div>Projects</div>\\n    <div>Education</div>\\n</header>\\n\\n<main>\\n  <article>\\n    <h1>Nicholas Segui</h1>\\n    <section>\\n      <p>Much of my most recent career history is in new home construction, however, I have past experience in a variety of areas to include customer service, sales, and retail.</p>\\n    </section>\\n\\n    <section>\\n      <p>I am pursuing education in the field of software development to grow my skillset and make myself more valuable moving forward.  I am always striving to be a better provider for my family</p>\\n    </section>\\n    </article>\\n\\n<footer>\\n  <p>Nicholas Segui, 2025, nicksegui5@gmail.com</p>\\n  </footer>\\n  \\n\\n    \\n\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1392,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 120,
    "complete": true,
    "completed_on": "2025-06-26T23:37:59.599Z",
    "first_attempt": "2025-06-26T23:28:27.935Z",
    "last_attempt": "2025-06-26T23:37:59.599Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: lightblue;\\n}\\n\\n/* Add your CSS styles here */\\narticle {\\n  border: 1px solid black;\\n  padding: 1rem;\\n}\\np {\\n  color: purple;\\n}\\nimg {\\n  height: 10rem;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1393,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "functions-parameters",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-07-17T00:52:14.913Z",
    "first_attempt": "2025-06-26T23:28:56.902Z",
    "last_attempt": "2025-07-17T00:52:14.913Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\nconsole.log(describeActivity)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1394,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "CSS Selectors",
    "slug": "css-selectors",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-26T23:38:01.814Z",
    "last_attempt": "2025-06-26T23:38:01.845Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1395,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "CSS Selectors",
    "slug": "css-selectors",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-26T23:38:01.814Z",
    "last_attempt": "2025-06-26T23:38:01.814Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1396,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-26T23:47:08.600Z",
    "first_attempt": "2025-06-26T23:47:08.597Z",
    "last_attempt": "2025-06-26T23:47:08.600Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1397,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 438,
    "complete": true,
    "completed_on": "2025-06-26T23:59:37.681Z",
    "first_attempt": "2025-06-26T23:48:24.981Z",
    "last_attempt": "2025-06-26T23:59:37.681Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links {\\n  list-style: none;\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-evenly;\\n  background-color: lightblue;\\n  border: 1px solid black;\\n\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1398,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-container",
    "attempts": 90,
    "complete": true,
    "completed_on": "2025-06-27T00:06:26.736Z",
    "first_attempt": "2025-06-26T23:59:40.816Z",
    "last_attempt": "2025-06-27T00:06:26.736Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Base styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n/* Card styles */\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.card h3 {\\n  margin-top: 0;\\n  color: #2c3e50;\\n}\\n\\n/* Flexbox container properties */\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  align-items: flex-start;\\n  gap: 20px;\\n  padding: 10px;\\n}\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1399,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Flexbox Item Properties",
    "slug": "flexbox-items",
    "attempts": 130,
    "complete": true,
    "completed_on": "2025-06-27T00:16:02.569Z",
    "first_attempt": "2025-06-27T00:06:28.740Z",
    "last_attempt": "2025-06-27T00:16:02.569Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n/* Add your flexbox properties below */\\n.navbar {\\n  display: flex;\\n  flex: auto;\\n}\\n.main-container {\\n  display: flex;\\n  background-color: lightblue;\\n}\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1400,
  "fields": {
    "learner_github_id": "207940958",
    "learner_name": "Nick Segui",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-27T00:38:10.988Z",
    "first_attempt": "2025-06-27T00:38:10.985Z",
    "last_attempt": "2025-06-27T00:38:10.988Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []        // \"Clothing\"\\nconst entertainment = []   // \"Movie\"\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nconst utilities = []       // \"Utility\"\\nconst largePurchases = []  // Expenses over 100.00\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nlet averageExpense = 0\\n\\n\\n/*\\n Use your algorithmic thinking for the steps to\\n categorize, total, and average the expenses.\\n\\n Be patient and take your time. This is challenging.\\n*/\\nfor (let i = 0; i < monthlyExpenses.length; i++) {\\n  // Split each expense string by colon to separate description and amount\\n  const parts = monthlyExpenses[i].split(\":\");\\n  const description = parts[0];\\n  const amount = parseFloat(parts[1]);\\n  \\n  // Add to total expenses\\n  totalExpenses += amount;\\n  \\n  // Check if expense is over $100 for large purchases\\n  if (amount > 100) {\\n    largePurchases.push(monthlyExpenses[i]);\\n  }\\n  \\n  // Categorize based on keywords in description\\n  if (description.includes(\"Clothing\")) {\\n    clothing.push(monthlyExpenses[i]);\\n  } else if (description.includes(\"Movie\")) {\\n    entertainment.push(monthlyExpenses[i]);\\n  } else if (description.includes(\"Groceries\") || description.includes(\"Restaurant\")) {\\n    food.push(monthlyExpenses[i]);\\n  } else if (description.includes(\"Fuel\") || description.includes(\"Gas\")) {\\n    fuel.push(monthlyExpenses[i]);\\n  } else if (description.includes(\"Lyft\") || description.includes(\"Uber\")) {\\n    travel.push(monthlyExpenses[i]);\\n  } else if (description.includes(\"Utility\")) {\\n    utilities.push(monthlyExpenses[i]);\\n  }\\n}\\n\\n// Calculate average expense\\naverageExpense = totalExpenses / monthlyExpenses.length;\\n\\n// Display results\\nconsole.log(\"=== EXPENSE CATEGORIZATION RESULTS ===\");\\nconsole.log(`Total Expenses: $${totalExpenses.toFixed(2)}`);\\nconsole.log(`Average Expense: $${averageExpense.toFixed(2)}`);\\nconsole.log();\\n\\nconsole.log(`Clothing (${clothing.length} items):`, clothing);\\nconsole.log(`Entertainment (${entertainment.length} items):`, entertainment);\\nconsole.log(`Food (${food.length} items):`, food);\\nconsole.log(`Fuel (${fuel.length} items):`, fuel);\\nconsole.log(`Travel (${travel.length} items):`, travel);\\nconsole.log(`Utilities (${utilities.length} items):`, utilities);\\nconsole.log(`Large Purchases over $100 (${largePurchases.length} items):`, largePurchases);\\n\\n// Calculate category totals\\nconst calculateCategoryTotal = (category) => {\\n  let total = 0;\\n  for (let i = 0; i < category.length; i++) {\\n    const amount = parseFloat(category[i].split(\":\")[1]);\\n    total += amount;\\n  }\\n  return total;\\n};\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1401,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 920,
    "complete": true,
    "completed_on": "2025-06-27T03:09:15.758Z",
    "first_attempt": "2025-06-27T02:26:51.847Z",
    "last_attempt": "2025-06-27T03:09:15.758Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n  <h1>How I Became A Software Developer</h1>\\n\\n  <article>\\n    <h2>Nashville Software School</h2>\\n    <section>\\n      <p>My Journeyinto software development began when I enrolled at NSS School.</p>\\n    </section>\\n    <section>\\n      <p>I learned the following skills</p>\\n      <ol>\\n        <li>Variables</li>\\n        <li>Arrays</li>\\n        <li>Objects</li>\\n        <li>Functions</li>\\n        <li>HTML</li>\\n        <li>CSS</li>\\n        </ol>\\n    </section>\\n  </article>\\n      <!-- Your content goes here -->\\n\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1402,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Introduction to HTML",
    "slug": "functions-multiple-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-28T16:42:17.629Z",
    "first_attempt": "2025-06-27T02:38:49.263Z",
    "last_attempt": "2025-06-28T16:42:17.629Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore (playerName, points) {\\n    console.log(`${playerName} scored ${points} points!`)\\n}\\n\\n// Then invoke the function with different player names and scores\\ndisplayGameScore(\"Moses\", 100)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1403,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Undefined",
    "slug": "html-elements",
    "attempts": 403,
    "complete": true,
    "completed_on": "2025-06-27T03:24:23.344Z",
    "first_attempt": "2025-06-27T03:09:36.921Z",
    "last_attempt": "2025-06-27T15:41:51.464Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n       <div>Projects</div>\\n        <div>Education</div>\\n    </nav>\\n  </header>\\n\\n  <!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n<main>\\n\\n<article>\\n  <h1>Priti</h1>\\n  <section>\\n    <p>I have Bachlors of Engineering Degree. I want a Software developer thats why I join NSS.</p>\\n  </section>\\n  <section>\\n    <p>I want to become a software developer because i am interasting in coding.</p>\\n  </section>\\n</article>\\n</main>\\n<footer>\\n  <p>Priti Chan,2025,pritinikgaikwad1226@gmail.com</p>\\n</footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1404,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-27T03:10:30.782Z",
    "last_attempt": "2025-06-27T03:10:30.782Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1405,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-27T03:10:30.782Z",
    "last_attempt": "2025-06-27T03:10:30.836Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1406,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-27T03:10:30.782Z",
    "last_attempt": "2025-06-27T03:10:30.826Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1407,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Undefined",
    "slug": "css-selectors",
    "attempts": 215,
    "complete": true,
    "completed_on": "2025-06-27T15:51:13.433Z",
    "first_attempt": "2025-06-27T03:10:41.679Z",
    "last_attempt": "2025-06-27T22:30:45.427Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\np, h {\\n  color: pink;\\n  font-size: 20px;\\n}\\n\\n.highlight {\\n  background-color: gray;\\n}\\n\\n#main-header {\\n  color: lightblue;\\n  background-color: purple;\\n  height: 25px;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1408,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Undefined",
    "slug": "flexbox-intro",
    "attempts": 157,
    "complete": true,
    "completed_on": "2025-06-27T16:19:18.294Z",
    "first_attempt": "2025-06-27T03:10:47.586Z",
    "last_attempt": "2025-06-27T16:21:18.510Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links {\\n  list-style: none;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: space-evenly;\\n  background-color: #3498db;\\npadding:20px;\\nborder: 10rem;\\n}\\n\\n\\n/* Make the navbar a flex container and style it */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1409,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Undefined",
    "slug": "flexbox-container",
    "attempts": 268,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-27T03:10:49.407Z",
    "last_attempt": "2025-06-27T22:31:06.359Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1410,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Undefined",
    "slug": "flexbox-items",
    "attempts": 5,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-27T03:10:50.836Z",
    "last_attempt": "2025-06-27T22:23:13.448Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1411,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-27T16:16:27.452Z",
    "first_attempt": "2025-06-27T16:14:08.112Z",
    "last_attempt": "2025-06-27T16:16:27.452Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\nconst makeGreeting = (name) => {\\n    return \"Hello, \" + name + \"!\"\\n}\\n\\n\\n// Invoke the function and assign the return value to a variable\\nconst greeting = makeGreeting(name)\\n\\n// Console log the variable you used above to see the greeting\\n\\nconsole.log(greeting)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1412,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-27T16:29:06.681Z",
    "first_attempt": null,
    "last_attempt": "2025-06-27T16:29:06.681Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1413,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-27T16:29:07.861Z",
    "first_attempt": null,
    "last_attempt": "2025-06-27T16:29:07.861Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1414,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-27T16:29:09.190Z",
    "first_attempt": null,
    "last_attempt": "2025-06-27T16:29:09.190Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1415,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Flexbox Container Properties",
    "slug": "multiline-strings",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-27T16:29:43.645Z",
    "last_attempt": "2025-06-27T16:29:43.645Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1416,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-27T16:35:32.196Z",
    "first_attempt": "2025-06-27T16:33:46.663Z",
    "last_attempt": "2025-06-27T16:35:32.196Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => {\\n    return quantity * price\\n}\\n\\n// Create calculateTotal here\\nconst calculateTotal = (price) => {\\n    return price * 1.08\\n}\\n\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal (3, 4.99)\\n\\n\\n// 2. Calculate the final total with tax\\nconst total = calculateTotal(subtotal)\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $ ${subtotal}`)\\nconsole.log(`Total with tax: $${total}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1417,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-27T16:43:07.674Z",
    "first_attempt": "2025-06-27T16:43:07.672Z",
    "last_attempt": "2025-06-27T16:43:07.674Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\",\"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1418,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-27T16:47:28.639Z",
    "first_attempt": "2025-06-27T16:46:33.490Z",
    "last_attempt": "2025-06-27T16:47:28.639Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1];\\nconst secondGlass = dirtyDishes[3];\\nconst thirdGlass = dirtyDishes[5];\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1419,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Undefined",
    "slug": "functions-return-practice",
    "attempts": 27,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-27T16:47:57.430Z",
    "last_attempt": "2025-06-30T01:08:53.901Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1420,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-27T17:05:42.311Z",
    "first_attempt": "2025-06-27T16:58:47.839Z",
    "last_attempt": "2025-06-27T17:05:42.311Z",
    "completed_code": "{'code': 'const topics = [\"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\"  ]\\n\\nfor (const study of topics) {\\n    console.log(study)\\n\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1421,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-27T17:18:16.977Z",
    "first_attempt": "2025-06-27T17:17:49.919Z",
    "last_attempt": "2025-06-27T17:18:16.977Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n    name: \"Jeremy Landy\",\\n    location: \"Phoenix,AR\",\\n    gender: \"male\",\\n    age: 31\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1422,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-27T17:29:35.767Z",
    "first_attempt": "2025-06-27T17:25:47.644Z",
    "last_attempt": "2025-06-27T17:29:35.767Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\ncolor: \"pink\",\\nstemLength: 20,\\ngrowingSeason: \"Spring\",\\nthorny: true\\n}\\n\\n// Complete the rose object\\nconst rose = {\\ncolor: \"red\",\\nstemLength: 15,\\ngrowingSeason: \"Summer\",\\nthorny: false\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1423,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-06-27T17:42:34.272Z",
    "first_attempt": "2025-06-27T17:38:00.374Z",
    "last_attempt": "2025-06-27T17:42:34.272Z",
    "completed_code": "{'code': '// This code has scope problems!\\nlet score = 0\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1424,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-27T17:51:11.501Z",
    "first_attempt": "2025-06-27T17:38:16.771Z",
    "last_attempt": "2025-06-27T17:51:11.501Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\nfor (const appointmentsObject of appointments) {\\n    schedule += `Patient ${appointmentsObject.firstName} ${appointmentsObject.lastName} has an appointment at ${appointmentsObject.appointmentTime}\\\\n`\\n}\\n\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1425,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-27T17:54:27.046Z",
    "first_attempt": "2025-06-27T17:54:27.045Z",
    "last_attempt": "2025-06-27T17:54:27.046Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1426,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Undefined",
    "slug": "functions-scope-parameters",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-06-27T18:45:28.895Z",
    "first_attempt": "2025-06-27T17:58:05.762Z",
    "last_attempt": "2025-06-27T18:45:28.895Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\n\\nconst checkHighScore = (playerName, score) => {\\n    if (score > highScore) {\\n        return highScore = score\\n    } else if (score <= highScore) {\\n        return highScore\\n    }\\n    }\\n\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\n\\nconsole.log(checkHighScore(\"Erin\", 60))\\nconsole.log(checkHighScore(\"Halie\", 35))'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1427,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-27T17:58:56.930Z",
    "first_attempt": "2025-06-27T17:58:56.927Z",
    "last_attempt": "2025-06-27T17:58:56.930Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy =book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1428,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-27T18:02:11.837Z",
    "first_attempt": "2025-06-27T18:02:11.835Z",
    "last_attempt": "2025-06-27T18:02:11.837Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\ngoldfish.location =\"Large Tank\"\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1429,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-27T18:24:21.284Z",
    "first_attempt": "2025-06-27T18:19:18.623Z",
    "last_attempt": "2025-06-27T18:24:21.284Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 50\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\nconst checkHighScore = (playerName, score) => {\\n    if (score > highScore) {\\n        return highScore = score\\n    } else {\\n        return highScore\\n    }\\n}\\nconsole.log(checkHighScore(\"Alice\", 49))\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1430,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 39,
    "complete": true,
    "completed_on": "2025-06-27T19:32:20.752Z",
    "first_attempt": "2025-06-27T18:50:21.941Z",
    "last_attempt": "2025-06-27T19:32:20.752Z",
    "completed_code": "{'code': \"\\nconst calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\nlet base = 10\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\nif (isWeekend === true) {\\n    base = base + 2\\n}\\n\\n\\nif (age < 12) {\\n    return base * .5\\n}\\n\\n\\n\\nelse if (age >= 65) {\\n    return base * .5\\n}\\n\\nif (age < 12 && isWeekend === true) {\\n    return base * .5\\n}\\n\\n\\nreturn base\\n   \\n\\n\\n}\\n      // 4. Return the final ticket price\\n  \\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n\\nadultWeekdayPrice = calculateTicketPrice(32, false)\\nconsole.log(adultWeekdayPrice)\\n\\nseniorWeekendPrice = calculateTicketPrice (68, true)\\nconsole.log(seniorWeekendPrice)\\n\\n  // Example:\\n  // const adultWeekdayPrice = calculateTicketPrice(25, false);\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1431,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-06-27T19:25:25.079Z",
    "first_attempt": "2025-06-27T18:53:45.933Z",
    "last_attempt": "2025-06-27T19:25:25.079Z",
    "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\n    const baseTicketPrice = 10\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n    if ((isWeekend === true) && (age < 12) || (age > 65)) {\\n       return (baseTicketPrice + 2) * .5\\n    } else if ((isWeekend === true) && (age >= 12) && (age <= 65)) {\\n        return baseTicketPrice + 2\\n    }\\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n    if ((age < 12) || (age >= 65)) {\\n        return baseTicketPrice * .5\\n    } \\n      // 4. Return the final ticket price\\n    return baseTicketPrice  \\n  }\\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\nconst adultWeekdayPrice = calculateTicketPrice(25, true);\\nconsole.log(adultWeekdayPrice)\\n  // Example:\\n  // const adultWeekdayPrice = calculateTicketPrice(25, false);\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1432,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-27T19:07:29.561Z",
    "first_attempt": "2025-06-27T19:04:54.005Z",
    "last_attempt": "2025-06-27T19:07:29.561Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager= \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1433,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-27T19:43:50.021Z",
    "first_attempt": "2025-06-27T19:43:50.020Z",
    "last_attempt": "2025-06-27T19:43:50.021Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const clays of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1434,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 13,
    "complete": true,
    "completed_on": "2025-06-30T00:34:13.424Z",
    "first_attempt": "2025-06-27T19:48:35.641Z",
    "last_attempt": "2025-06-30T00:34:13.424Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\nlet total = 0\\n      // 2. Loop through all prices in the array and add each to total\\nfor (const price of prices) {\\n    total = total + price\\n}\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\nif (total > 100) {\\n    return total * .9\\n}\\n      // 4. Return the final total\\n      return total\\n  }\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\nconst prices = [20, 40, 60]\\n  const cartTotal = calculateCartTotal(prices)\\n  // 2. Store the return value in a variable\\nconsole.log(`${calculateCartTotal}`)\\n  // 3. Log the variable to the console\\n\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1435,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-27T19:53:05.030Z",
    "first_attempt": "2025-06-27T19:53:05.028Z",
    "last_attempt": "2025-06-27T19:53:05.030Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\nif (ingredient === \"egg\"){\\n    finishedFood.push(\"biscuit\")\\n}\\nelse if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n}\\nelse if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\")\\n}\\n}\\n\\nconsole.log()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1436,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Undefined",
    "slug": "arrays-length",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-27T20:10:05.384Z",
    "first_attempt": "2025-06-27T20:02:55.785Z",
    "last_attempt": "2025-06-27T20:10:05.384Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const monthly of monthlyExpenses) {\\n  // Add the current monthly cost to the value of totalExpense\\n  totalExpense += monthly\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1437,
  "fields": {
    "learner_github_id": "216775687",
    "learner_name": "Deniz Koc",
    "title": "Undefined",
    "slug": "functions-review",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-27T20:12:11.309Z",
    "first_attempt": "2025-06-27T20:10:27.936Z",
    "last_attempt": "2025-06-27T20:12:11.309Z",
    "completed_code": "{'code': 'const createGreeting = (name, time) => {\\r\\n  if (time === \"morning\" || name[0].toUpperCase() === \"A\") {\\r\\n    return `Good morning, ${name}!`;\\r\\n  } else if (time === \"afternoon\") {\\r\\n    return `Good afternoon, ${name}!`;\\r\\n  } else {\\r\\n    return `Hello, ${name}!`;\\r\\n  }\\r\\n};\\r\\n\\r\\nconst tellJoke = (topic) => {\\r\\n  if (topic === \"weather\") {\\r\\n    return \"What do you call a stormy robot? A thunder-bot!\";\\r\\n  } else if (topic === \"animals\") {\\r\\n    return \"Why did the robot go to the zoo? To study creature features!\";\\r\\n  } else {\\r\\n    return \"Why was the robot tired? Because it had too many bytes!\";\\r\\n  }\\r\\n};\\r\\n\\r\\nconst greetPeople = (people, time) => {\\r\\n  const greetings = [];\\r\\n  for (let person of people) {\\r\\n    const greeting = createGreeting(person, time);\\r\\n    greetings.push(greeting);\\r\\n  }\\r\\n  return greetings;\\r\\n};\\r\\n\\r\\nconst robotInteraction = (name, time, topic) => {\\r\\n  const greeting = createGreeting(name, time);\\r\\n  const joke = tellJoke(topic);\\r\\n  return `${greeting} ${joke}`;\\r\\n};\\r\\n\\r\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\r\\nconsole.log(greeting);\\r\\n\\r\\nconst joke = tellJoke(\"weather\");\\r\\nconsole.log(joke);\\r\\n\\r\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\r\\nconst greetings = greetPeople(people, \"afternoon\");\\r\\nconsole.log(greetings);\\r\\n\\r\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\r\\nconsole.log(interaction);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1438,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 297,
    "complete": true,
    "completed_on": "2025-06-27T20:31:19.668Z",
    "first_attempt": "2025-06-27T20:15:52.652Z",
    "last_attempt": "2025-06-27T20:31:19.668Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n      <h1>How I Became A Software Developer<h1>\\n\\n        <article>\\n          <h2>Nashville Software School<h2>\\n            <section>\\n\\n              <p>I am excited to start NSS and learn a new skill!<p>\\n\\n                <section>\\n                  <section>\\n                    <p>I learned the following skills<p>\\n                      <ol>\\n                        <li>Variables</li>\\n                        <li>Arrays</li>\\n                        <li>Objects</li>\\n                        <li>Functions</li>\\n                        <li>HTML</li>\\n                        <li>CSS</li>\\n                        </ol>\\n                        <section>\\n\\n\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1439,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-27T20:21:13.970Z",
    "first_attempt": "2025-06-27T20:21:13.970Z",
    "last_attempt": "2025-06-27T20:21:13.970Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [15, 10, 20, 40, 30, 25, 35 ]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const weekly of weeklyMiles) {\\ntotalMiles += weekly\\n}\\nconst averageMiles= totalMiles / weeklyMiles.length\\n// Declare a new variable to store the average miles over time\\n console.log (`I average ${averageMiles} miles each week. \\\\n I have driven a total of ${totalMiles}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1440,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "HTML Elements",
    "slug": "html-elements",
    "attempts": 705,
    "complete": true,
    "completed_on": "2025-06-27T20:40:36.002Z",
    "first_attempt": "2025-06-27T20:31:23.738Z",
    "last_attempt": "2025-06-27T20:40:36.002Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n <header>\\n  <nav>\\n    <div>Home</div>\\n    <div>Projects</div>\\n    <div>Education</div>\\n  </nav>\\n </header>\\n <main>\\n  <article>\\n    <h1>Erin Telfer</h1>\\n\\n    <section>\\n\\n      <p>I have worked in childcare since graduating college in 2018 and am excited to have a career change into something more analytical!</p>\\n\\n      </section>\\n      <section>\\n\\n        <p>I would like to be a software developer because I feel it will bring new problems to solve each day and I enjoy working through things until I find an answer. I also would like to do UI and bring my creative side into it.</p>\\n\\n      </section>\\n  </article>\\n </main>\\n      <footer>\\n\\n        <p>Erin Telfer, 2025, eringtelfer@gmail.com</p>\\n\\n      </footer>\\n\\n\\n\\n\\n\\n  \\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1441,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Undefined",
    "slug": "arrays-conditions-practice",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-27T20:32:42.914Z",
    "first_attempt": "2025-06-27T20:32:02.703Z",
    "last_attempt": "2025-06-27T20:32:42.914Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours) {\\n  if (hour <= 6) {\\n    grumpyHours.push(hour)\\n  }\\n  else {\\n    happyHours.push(hour)\\n  }\\n}\\n\\nconsole.log(`\\nI was grumpy on ${grumpyHours} day. \\\\n I was happy on ${happyHours} days.\\n`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1442,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 109,
    "complete": true,
    "completed_on": "2025-06-27T20:49:46.088Z",
    "first_attempt": "2025-06-27T20:40:37.418Z",
    "last_attempt": "2025-06-30T00:37:11.074Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: lightblue;\\n}\\narticle {\\n  border: 1px solid black;\\n  padding: 1rem;\\n}\\np {\\n  color: purple;\\n}\\nimg {\\n  line-height: 10rem;\\n}\\n\\n/* Add your CSS styles here */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1443,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "CSS Selectors",
    "slug": "css-selectors",
    "attempts": 136,
    "complete": true,
    "completed_on": "2025-06-27T20:57:48.396Z",
    "first_attempt": "2025-06-27T20:49:47.456Z",
    "last_attempt": "2025-06-30T00:37:09.855Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n.example {\\n  color: purple;\\n\\n}\\n#advanced {\\n  background-color: red;\\n\\n}\\nfooter {\\n  padding: 8rem;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1444,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 283,
    "complete": true,
    "completed_on": "2025-06-27T21:04:38.547Z",
    "first_attempt": "2025-06-27T20:57:49.627Z",
    "last_attempt": "2025-06-30T00:44:21.309Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\n\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links {\\n  display: flex;\\n  flex-direction: column-reverse;\\n  justify-content:;\\n  list-style: none;\\n}\\n\\n/* Make the navbar a flex container and style it */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1445,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Introduction to Flexbox",
    "slug": "flower-shop",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-27T20:58:04.969Z",
    "last_attempt": "2025-06-27T20:58:05Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1446,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "CSS Basics",
    "slug": "flexbox-container",
    "attempts": 526,
    "complete": true,
    "completed_on": "2025-06-30T00:47:00.217Z",
    "first_attempt": "2025-06-27T21:05:48.144Z",
    "last_attempt": "2025-06-30T00:47:00.217Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  font-size: 0.8rem;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n}\\n\\n/* Add your flexbox container properties below */\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  gap: 10px;\\n}\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1447,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-27T21:08:16.956Z",
    "first_attempt": "2025-06-27T21:08:16.953Z",
    "last_attempt": "2025-06-27T21:08:16.956Z",
    "completed_code": "{'code': '// Write your function here\\n\\nfunction greetPet (){\\n    console.log(\"Good,dog!\")\\n    }\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1448,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-27T21:20:55.446Z",
    "first_attempt": "2025-06-27T21:14:17.079Z",
    "last_attempt": "2025-06-27T21:20:55.446Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n    console.log(\"Touchdown!\")\\n}\\n// 2. Invoke it twice below\\n\\ncelebrateScore()\\ncelebrateScore()\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1449,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-items",
    "attempts": 147,
    "complete": true,
    "completed_on": "2025-06-30T00:45:31.336Z",
    "first_attempt": "2025-06-27T21:15:08.233Z",
    "last_attempt": "2025-06-30T00:47:04.645Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n.navbar {\\n  display: flex;\\n  align-self: baseline;\\n  justify-content: space-evenly;\\n}\\n\\n.container {\\n  flex: 1 1 auto;\\n  order: 4;\\n}\\n/* Add your flexbox properties below */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1450,
  "fields": {
    "learner_github_id": "115299265",
    "learner_name": "Kate Rogers",
    "title": "Undefined",
    "slug": "functions-conditions",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-27T21:15:33.355Z",
    "last_attempt": "2025-06-27T21:15:33.355Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1451,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 16,
    "complete": true,
    "completed_on": "2025-06-27T21:36:44.742Z",
    "first_attempt": "2025-06-27T21:24:08.161Z",
    "last_attempt": "2025-06-27T21:36:44.742Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreaterThanHundred(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayWelcomeMessage(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculatesDiscoundPrice(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1452,
  "fields": {
    "learner_github_id": "88989211",
    "learner_name": "Patrick.McIsaac",
    "title": "Undefined",
    "slug": "functions-review",
    "attempts": 16,
    "complete": true,
    "completed_on": "2025-05-21T16:56:19.764Z",
    "first_attempt": "2025-04-29T22:28:40.578Z",
    "last_attempt": "2025-05-21T16:56:19.764Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  if(time === \\'morning\\' || name.startsWith(\\'A\\')){\\n    return `Good morning, ${name}!`\\n    // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  }else if(time ===\\'afternoon\\'){\\n    return `Good afternoon, ${name}!`\\n  }else {\\n    return `Hello, ${name}!`\\n  }\\n  // Otherwise, return \"Hello, [name]!\"\\n}\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  // If topic is \"weather\", return the weather joke\\n  if(topic === \\'weather\\'){\\n    return \"What do you call a stormy robot? A thunder-bot!\"\\n  }else if(topic === \\'animals\\'){// If topic is \"animals\", return the animals joke\\n    return \"Why did the robot go to the zoo? To study creature features!\"\\n    }else {\\n        return \"Why was the robot tired? Because it had too many bytes!\"\\n    }// Otherwise, return the default joke\\n\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n  const greetings = []\\n  // Loop through each person in the people array\\n  for (const person of people){\\n    const greet = createGreeting(person, time)\\n    greetings.push(greet)\\n  }\\n  return greetings\\n  // Create a greeting for each person\\n\\n  // Add the greeting to the array\\n\\n  // Return the array of greetings\\n\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n  const greet = createGreeting(name, time)\\n  // Get the joke\\n  const joke = tellJoke(topic)\\n  // Return both together\\n  return `${greet} ${joke}`\\n\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1453,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Undefined",
    "slug": "functions-parameters",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-27T21:46:34.469Z",
    "first_attempt": "2025-06-27T21:44:49.136Z",
    "last_attempt": "2025-06-27T21:46:34.469Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(myActivity) {\\n    console.log(`I love ${myActivity}!`)\\n}\\ndescribeActivity(\"playing\")\\ndescribeActivity(\"painting\")\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1454,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-27T21:53:34.005Z",
    "first_attempt": "2025-06-27T21:53:34.004Z",
    "last_attempt": "2025-06-27T21:53:34.005Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1455,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-27T21:53:37.278Z",
    "first_attempt": "2025-06-27T21:53:37.274Z",
    "last_attempt": "2025-06-27T21:53:37.278Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\nconst checkHighScore = (playerName, score) => {\\n    if (score > highScore){\\n        highScore = score\\n    return `Congratulations ${playerName} you scored, ${score} New Highscore!!`\\n    } else {\\n        return `Good try ${playerName} you scored, ${score} points, the high score is still ${highScore}.` \\n    }\\n}\\n\\n\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\n\\nconsole.log(checkHighScore(\"Dickson\", 40))\\nconsole.log(checkHighScore(\"Fred, 30\"))\\nconsole.log(checkHighScore(\"Trey\",50))\\nconsole.log(checkHighScore(\"Evan, 75\"))'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1456,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-27T22:00:57.730Z",
    "first_attempt": "2025-06-27T22:00:57.728Z",
    "last_attempt": "2025-06-27T22:00:57.730Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\n\\nfunction displayGameScore(name, noOfPoints){\\n    console.log(`${name} scored ${noOfPoints} points!`)\\n\\n}\\ndisplayGameScore(\"Mario\", 100)\\n// Then invoke the function with different player names and scores\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1457,
  "fields": {
    "learner_github_id": "155575806",
    "learner_name": "PritiB-Chandan",
    "title": "Undefined",
    "slug": "functions-arrow-syntax",
    "attempts": 4,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-27T22:13:39.618Z",
    "last_attempt": "2025-06-27T22:32:43.244Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1458,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-27T22:49:55.440Z",
    "first_attempt": "2025-06-27T22:32:45.257Z",
    "last_attempt": "2025-06-27T22:49:55.440Z",
    "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\n    let ticketPrice = 10;\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n    if (isWeekend){\\n            ticketPrice += 2\\n        }\\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n    if (age < 12|| age >= 65){\\n            ticketPrice *= .5\\n            }\\n      // 4. Return the final ticket price\\n      return ticketPrice;\\n  }\\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n\\n  // Example:\\n  // const adultWeekdayPrice = calculateTicketPrice(25, false);\\nconst seniorWeekendPrice = calculateTicketPrice(70,true);\\n    console.log(seniorWeekendPrice);\\nconst seniorWeekdayPrice = calculateTicketPrice(70, false)\\n    console.log(seniorWeekdayPrice)\\nconst adultWeekendPrice = calculateTicketPrice(30, true)\\n    console.log(adultWeekendPrice)\\nconst adultWeekdayPrice = calculateTicketPrice(30,false)\\n    console.log(adultWeekdayPrice)\\nconst kidsWeekendPrice = calculateTicketPrice(3,true)\\n    console.log(kidsWeekendPrice)\\nconst kidsWeekdayPrice = calculateTicketPrice(3, false)\\n    console.log(kidsWeekdayPrice)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1459,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-28T01:12:13.557Z",
    "first_attempt": "2025-06-28T01:12:13.556Z",
    "last_attempt": "2025-06-28T01:12:13.557Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome\\ncombinedIncome += spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome += combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1460,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-28T01:45:26.887Z",
    "first_attempt": "2025-06-28T01:37:12.433Z",
    "last_attempt": "2025-06-28T01:45:26.887Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses;\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\nconsole.log(statement)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1461,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Undefined",
    "slug": "string-methods",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-29T18:47:03.599Z",
    "first_attempt": "2025-06-28T01:39:53.180Z",
    "last_attempt": "2025-06-29T18:47:03.599Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\nconsole.log(email.trim())\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\nconsole.log(phone.replace(\" \", \"-\"))\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\nconsole.log(customerName.toUpperCase())\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\nconsole.log(password.includes(\"x\"))\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\nconsole.log(filename.substring(0,4))\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.substring(0,4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1462,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "functions-arrow-syntax",
    "attempts": 20,
    "complete": true,
    "completed_on": "2025-07-12T06:11:42.671Z",
    "first_attempt": "2025-06-28T17:26:04.532Z",
    "last_attempt": "2025-07-12T06:11:42.671Z",
    "completed_code": "{'code': 'const add = (x, y) => x + y\\nconst greet = name => `Hello, ${name}!`\\nconst getRandomNumber = () => Math.random()\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber()\\nconst greeting = greet(\"Jane\")\\nconst sum = add(7, 6)\\n\\nconsole.log(random, greeting, sum)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1463,
  "fields": {
    "learner_github_id": "217850819",
    "learner_name": "Jordan Haddock",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-25T01:53:28.999Z",
    "first_attempt": null,
    "last_attempt": "2025-06-25T01:53:28.999Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1464,
  "fields": {
    "learner_github_id": "217850819",
    "learner_name": "Jordan Haddock",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-28T18:07:41.971Z",
    "first_attempt": null,
    "last_attempt": "2025-06-28T18:07:41.971Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1465,
  "fields": {
    "learner_github_id": "217850819",
    "learner_name": "Jordan Haddock",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-28T18:07:42.581Z",
    "first_attempt": null,
    "last_attempt": "2025-06-28T18:07:42.581Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1466,
  "fields": {
    "learner_github_id": "217850819",
    "learner_name": "Jordan Haddock",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-28T18:07:43.390Z",
    "first_attempt": null,
    "last_attempt": "2025-06-28T18:07:43.390Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1467,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-06-28T19:29:23.487Z",
    "first_attempt": "2025-06-28T18:16:15.657Z",
    "last_attempt": "2025-06-28T19:29:23.487Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  const calculateGameScore = (points, multiplier) => {\\n      const total = points * multiplier\\n      if (total >= 1000) {\\n          return \"High Score!\"\\n      } else {\\n          return \"Keep trying!\"\\n      }\\n  }\\n\\n  // Call your function with different values and store a result in a variable\\n  const result1 = calculateGameScore(500, 2.5)\\n  const result2 = calculateGameScore(400, 2)\\n\\n  // Log the result to see the output\\n  console.log(`Result 1: ${result1}`)\\n  console.log(`Result 2: ${result2}`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1468,
  "fields": {
    "learner_github_id": "217850819",
    "learner_name": "Jordan Haddock",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-28T18:25:41.399Z",
    "first_attempt": "2025-06-28T18:24:35.766Z",
    "last_attempt": "2025-06-28T18:25:41.399Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\nlet februaryBill = 140\\nlet marchBill = 140\\nlet aprilBill = 140\\nlet mayBill = 140\\nlet juneBill = 140\\nlet julyBill = 140\\nlet augustBill = 140\\nlet septemberBill = 140\\nlet octoberBill = 140\\nlet novemberBill = 140\\nlet decemberBill = 140\\nconst yearlyTotal = 1685\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1469,
  "fields": {
    "learner_github_id": "217850819",
    "learner_name": "Jordan Haddock",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-06-28T18:41:41.920Z",
    "first_attempt": "2025-06-28T18:33:13.248Z",
    "last_attempt": "2025-06-28T18:41:41.920Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"2017 Macbook Pro\"\\nconst phone = \"Iphone 12\"\\nconst television = \"Sony Monitor\"\\nconst refrigerator = \"Sony Refrigerator\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television} television, my ${computer} computer, my ${refrigerator} refrigerator, and my ${phone} phone`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1470,
  "fields": {
    "learner_github_id": "217850819",
    "learner_name": "Jordan Haddock",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-28T19:14:11.195Z",
    "first_attempt": "2025-06-28T18:48:53.891Z",
    "last_attempt": "2025-06-28T19:14:11.195Z",
    "completed_code": "{'code': '// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband\\'s monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\nlet totalIncome = 0\\n\\n\\n// Calculate combined income\\n\\nconst combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome = combinedIncome - internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = \"Our combined monthly income is \" + `${combinedIncome}` + \". Our net monthly income is \" + `${netIncome}` + \".\"\\n\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1471,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-07-01T01:31:13.182Z",
    "first_attempt": "2025-06-28T19:34:23.439Z",
    "last_attempt": "2025-07-01T01:31:13.182Z",
    "completed_code": "{'code': '// This code has scope problems!\\n\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\n\\nlet score = 0\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1472,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "HTML Elements",
    "slug": "html-elements",
    "attempts": 336,
    "complete": true,
    "completed_on": "2025-06-29T00:08:58.308Z",
    "first_attempt": "2025-06-28T22:40:50.660Z",
    "last_attempt": "2025-06-29T00:08:58.308Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <body>\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n\\n  <main>\\n    <article>\\n      <h1>Marcus D. Upton</h1>\\n\\n      <section>\\n        <p>I currently work for UK based Davies-Group as a Service Operations Analyst</p>\\n      </section>\\n\\n      <section>\\n        <p>To be able to build web applications and build my own projects from scratch. It would be awesome to see how far I can go with this new found skill!</p>\\n      </section>\\n    </article>\\n  </main>\\n\\n  <footer>\\n    <p>Marcus Upton, 2025, marcusdupton13@gmail.com</p>\\n  </footer>\\n<!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1473,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "css-basics",
    "attempts": 182,
    "complete": true,
    "completed_on": "2025-06-29T01:09:11.146Z",
    "first_attempt": "2025-06-29T00:09:00.520Z",
    "last_attempt": "2025-06-29T05:22:19.907Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: lightblue;\\n}\\n\\n/* Add your CSS styles here */\\narticle {\\n  border: 1px solid black;\\n  padding: 1rem;\\n  }\\n\\np {\\n  color: purple;\\n}\\n\\nimg {\\n  height: 10rem\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1474,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "css-selectors",
    "attempts": 311,
    "complete": true,
    "completed_on": "2025-06-29T01:32:17.969Z",
    "first_attempt": "2025-06-29T01:09:14.052Z",
    "last_attempt": "2025-06-30T01:07:52.199Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\np {\\n  color: green;\\n}\\n\\nheader {\\n  text-align: center\\n}\\n\\n.highlight {\\n  background-color: yellow\\n}\\n\\n#header {\\n  font-size: 12;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1475,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "flexbox-intro",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-06-30T05:56:41.937Z",
    "first_attempt": "2025-06-29T01:32:22.910Z",
    "last_attempt": "2025-06-30T05:56:41.937Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Base styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n/* Navbar styles with flexbox */\\n.nav-links {\\n  list-style: none;\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-evenly;\\n  border: 1px solid lightgray;\\n  padding: 0.25rem;\\n  margin: 0.25rem 0.5rem;\\n  background-color: aliceblue;\\n}\\n\\n.logo {\\n  font-size: 1.5rem;\\n  font-weight: bold;\\n}\\n\\n.nav-links {\\n  display: flex;\\n  flex-direction: row;\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links li {\\n  margin-left: 1.5rem;\\n}\\n\\n.nav-links a {\\n  color: white;\\n  text-decoration: none;\\n}\\n\\n.nav-links a:hover {\\n  text-decoration: underline;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1476,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "functions-return-intro",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-07-12T07:04:44.087Z",
    "first_attempt": "2025-06-29T23:36:37.833Z",
    "last_attempt": "2025-07-12T07:04:44.087Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\n\\n\\n\\n// Invoke the function and assign the return value to a variable\\n\\n\\n// Console log the variable you used above to see the greeting\\n\\n\\n\\n\\nconst makeGreeting = (name) => `Hello, ${name}!`\\n\\n\\nconst greeting = makeGreeting(\"John\")\\n\\n\\nconsole.log(greeting)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1477,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Flexbox Item Properties",
    "slug": "flexbox-items",
    "attempts": 111,
    "complete": true,
    "completed_on": "2025-06-30T01:24:58.308Z",
    "first_attempt": "2025-06-29T08:48:08.118Z",
    "last_attempt": "2025-06-30T01:25:05.713Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Base styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n/* Navbar styles with flexbox */\\n.navbar {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  background-color: #2c3e50;\\n  color: white;\\n  padding: 1rem 2rem;\\n}\\n\\n.logo {\\n  font-size: 1.5rem;\\n  font-weight: bold;\\n}\\n\\n.nav-links {\\n  display: flex;\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links li {\\n  margin-left: 1.5rem;\\n}\\n\\n.nav-links a {\\n  color: white;\\n  text-decoration: none;\\n}\\n\\n.nav-links a:hover {\\n  text-decoration: underline;\\n}\\n\\n/* Main container with flexbox */\\n.container {\\n  display: flex;\\n  max-width: 1200px;\\n  margin: 2rem auto;\\n  padding: 0 1rem;\\n}\\n\\n.content {\\n  flex: 3;\\n  margin-right: 2rem;\\n}\\n\\n.sidebar {\\n  flex: 1;\\n  background-color: #f5f5f5;\\n  padding: 1.5rem;\\n  border-radius: 5px;\\n}\\n\\n/* Cards with flexbox */\\n.cards {\\n  display: flex;\\n  flex-wrap: wrap;\\n  gap: 1.5rem;\\n  margin-top: 2rem;\\n}\\n\\n.card {\\n  display: flex;\\n  flex-direction: column;\\n  flex: 1 1 300px;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 1.5rem;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.card h3 {\\n  margin-top: 0;\\n  color: #2c3e50;\\n}\\n\\n.card p {\\n  flex-grow: 1;\\n}\\n\\n.card button {\\n  align-self: flex-start;\\n  background-color: #3498db;\\n  color: white;\\n  border: none;\\n  padding: 0.5rem 1rem;\\n  border-radius: 3px;\\n  cursor: pointer;\\n}\\n\\n.card button:hover {\\n  background-color: #2980b9;\\n}\\n\\n/* Sidebar styles */\\n.sidebar h2 {\\n  margin-top: 0;\\n  color: #2c3e50;\\n}\\n\\n.sidebar ul {\\n  padding-left: 1.5rem;\\n}\\n\\n.sidebar li {\\n  margin-bottom: 0.5rem;\\n}\\n\\n.sidebar a {\\n  color: #3498db;\\n  text-decoration: none;\\n}\\n\\n.sidebar a:hover {\\n  text-decoration: underline;\\n}\\n\\n.info-box {\\n  background-color: #e8f4fc;\\n  border-left: 4px solid #3498db;\\n  padding: 1rem;\\n  margin-top: 2rem;\\n}\\n\\n/* Footer styles */\\nfooter {\\n  background-color: #2c3e50;\\n  color: white;\\n  text-align: center;\\n  padding: 1.5rem;\\n  margin-top: 2rem;\\n}\\n\\n/* Responsive adjustments */\\n@media (max-width: 768px) {\\n  .container {\\n    flex-direction: column;\\n  }\\n\\n  .content {\\n    margin-right: 0;\\n    margin-bottom: 2rem;\\n  }\\n\\n  .navbar {\\n    flex-direction: column;\\n    padding: 1rem;\\n  }\\n\\n  .nav-links {\\n    margin-top: 1rem;\\n  }\\n\\n  .nav-links li {\\n    margin-left: 1rem;\\n    margin-right: 1rem;\\n  }\\n}\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1478,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-29T16:47:25.124Z",
    "first_attempt": "2025-06-29T16:43:45.962Z",
    "last_attempt": "2025-06-29T16:47:25.124Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\n    let total = 0\\n      // 2. Loop through all prices in the array and add each to total\\n    for (const price of prices) {\\n        total = total + price\\n    }\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\n    if (total > 100) {\\n        total = total * .9\\n    } \\n      // 4. Return the final total\\n      return total\\n  }\\nconst cartTotal = calculateCartTotal([29, 49, 14, 62, 3, 17])\\nconsole.log(cartTotal)\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\n\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1479,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-29T18:45:03.221Z",
    "first_attempt": "2025-06-29T18:40:50.254Z",
    "last_attempt": "2025-06-29T18:45:03.221Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    return time * 100 + targets * 50\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    if (targets > 10) {\\n        return 1000\\n    } else {\\n        return 0\\n    }\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n    const basePoints = calculateBasePoints(time, targets)\\n    const bonusPoints = calculateBonus(targets)\\n    // Add the results together and return the sum\\n    return basePoints + bonusPoints\\n}\\nconst finalScore = calculateFinalScore(2, 5)\\nconsole.log(finalScore)\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1480,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-29T19:09:43.569Z",
    "first_attempt": "2025-06-29T19:09:43.568Z",
    "last_attempt": "2025-06-29T19:09:43.569Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse {\\n    console.log(\"I need to sleep in anyway. It was a long week. Netflix was fun today\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1481,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-29T19:30:48.621Z",
    "first_attempt": "2025-06-29T19:21:24.846Z",
    "last_attempt": "2025-06-29T19:30:48.621Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n    if(time === \"morning\" || name.startsWith(\"A\")) {\\n        return `Good morning, ${name}!`\\n    } else if(time === \"afternoon\") {\\n        return `Good afternoon, ${name}!`\\n    } else {\\n        return `Hello, Riley!`\\n    }\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  // Otherwise, return \"Hello, [name]!\"\\n\\n}\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n    if(topic === \"weather\") {\\n        return \"What do you call a stormy robot? A thunder-bot!\"\\n    } else if(topic === \"animals\") {\\n        return \"Why did the robot go to the zoo? To study creature features!\"\\n    } else {\\n        return \"Why was the robot tired? Because it had too many bytes!\"\\n    }\\n  // If topic is \"weather\", return the weather joke\\n  // If topic is \"animals\", return the animals joke\\n  // Otherwise, return the default joke\\n\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n    const greetings = []\\n  // Loop through each person in the people array\\n    for(const person of people) {\\n        const greet = createGreeting(person, time)\\n        greetings.push(greet)\\n    }\\n    return greetings\\n  // Create a greeting for each person\\n\\n  // Add the greeting to the array\\n\\n  // Return the array of greetings\\n\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n    const greet = createGreeting(name, time)\\n  // Get the joke\\n    const joke = tellJoke(topic)\\n  // Return both together\\n    return `${greet} ${joke}`\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1482,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-29T19:29:03.568Z",
    "first_attempt": "2025-06-29T19:28:30.871Z",
    "last_attempt": "2025-06-29T19:29:03.568Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"    \\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"   \\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\nelse if (temperature < 35) {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\"    \\n}\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1483,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 434,
    "complete": true,
    "completed_on": "2025-06-29T19:57:15.453Z",
    "first_attempt": "2025-06-29T19:31:01.831Z",
    "last_attempt": "2025-06-29T19:58:53.267Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n  <h1>How I Became A Software Developer</h1>\\n\\n  <article>\\n    <h2>Nashville Software School</h2>\\n\\n    <section>\\n      <p>My journey into software development began when I enrolled at Nashville Software School. The instructors were amazing and the curriculum was challenging but rewarding.</p>\\n    </section>\\n\\n    <section>\\n      <p>I learned the following skills</p>\\n      <ol>\\n        <li>Variables</li>\\n        <li>Arrays</li>\\n        <li>Objects</li>\\n        <li>Functions</li>\\n        <li>HTML</li>\\n        <li>CSS</li>\\n      </ol>\\n    </section>\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1484,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-29T19:41:02.051Z",
    "first_attempt": "2025-06-29T19:40:56.285Z",
    "last_attempt": "2025-06-29T19:41:02.051Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos += femalePhotos\\ntotalPhotos += malePhotos\\n\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n}\\nelse if (totalPhotos < 110 && totalPhotos > 50){\\n    photoStorage = \"Shoe Box\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n}\\nelse {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1485,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-29T19:43:12.974Z",
    "first_attempt": "2025-06-29T19:43:12.972Z",
    "last_attempt": "2025-06-29T19:43:12.974Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1486,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Undefined",
    "slug": "arrays-indices",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-06-29T19:56:09.892Z",
    "first_attempt": "2025-06-29T19:48:06.433Z",
    "last_attempt": "2025-06-29T19:56:09.892Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1487,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "HTML Elements",
    "slug": "html-elements",
    "attempts": 914,
    "complete": true,
    "completed_on": "2025-06-29T20:16:43.469Z",
    "first_attempt": "2025-06-29T19:57:31.162Z",
    "last_attempt": "2025-06-29T20:16:43.469Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n\\n  <main>\\n    <article>\\n      <h1>Thomas Castellon</h1>\\n      <section>\\n        I first joined the army in 2008 and \\n        was medically retired in 2014. \\n        After the military I did some overseas \\n        protective work for a few years and \\n        now transitioning to a career in software \\n        development.\\n      </section>\\n\\n      <section>\\n        I sustained a workplace injury while doing\\n         overseas protective work and have to switch\\n          to a different career that I can do with \\n          my restrictions. I have always had an \\n          interest in software development and its \\n          a career I can get into that doesn\\'t require \\n          much physical work.\\n      </section>\\n    </article>\\n  </main>\\n\\n  <footer>\\n    <p>Thomas Castellon, 2025, thomas.castellon@gmail.com</p>\\n  </footer>\\n  <!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1488,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Undefined",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-29T20:00:28.708Z",
    "first_attempt": "2025-06-29T20:00:28.706Z",
    "last_attempt": "2025-06-29T20:00:28.708Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const topic of topics) {\\nconsole.log(topic)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1489,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 129,
    "complete": true,
    "completed_on": "2025-06-29T20:23:15.412Z",
    "first_attempt": "2025-06-29T20:16:45.290Z",
    "last_attempt": "2025-06-30T04:05:50.033Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: lightblue;\\n}\\n\\n/* Add your CSS styles here */\\narticle {\\n  border: 1px solid black;\\n  padding: 1rem;\\n}\\np {\\n  color: purple;\\n}\\n\\nimg {\\n  height: 10rem;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1490,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "CSS Selectors",
    "slug": "css-selectors",
    "attempts": 230,
    "complete": true,
    "completed_on": "2025-06-30T04:10:06.152Z",
    "first_attempt": "2025-06-29T20:23:18.168Z",
    "last_attempt": "2025-06-30T04:10:06.152Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\np {\\n  color: red;\\n  font-family: helvetica;\\n}\\n\\nheader {\\n  color: blue;\\n  font-family: sans-serif;\\n}\\n\\n.example {\\n  font-weight: bold;\\n  color: orange;\\n}\\n\\n#basics {\\n  text-align: center;\\n  font-size: 10px\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1491,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-29T22:33:31.656Z",
    "first_attempt": "2025-06-29T22:33:10.823Z",
    "last_attempt": "2025-06-29T22:33:31.656Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunk of clay) {\\n   const mug = `coffee mug`\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1492,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-29T22:38:46.746Z",
    "first_attempt": "2025-06-29T22:38:46.744Z",
    "last_attempt": "2025-06-29T22:38:46.746Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\nif (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")}\\n\\nelse if (ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\") }\\n\\nelse if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\") }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1493,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Undefined",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-29T22:43:34.869Z",
    "first_attempt": "2025-06-29T22:43:34.867Z",
    "last_attempt": "2025-06-29T22:43:34.869Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const monthExpense of monthlyExpenses) {\\n  // Add the current monthly cost to the value of totalExpense\\n  totalExpense += monthExpense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1494,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-29T22:55:27.993Z",
    "first_attempt": "2025-06-29T22:54:46.385Z",
    "last_attempt": "2025-06-29T22:55:27.993Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 30, 45, 65, 20, 54, 33, 45 ]\\nlet totalMiles = 0\\n\\n// Declare a variable to store the total. Initial value is 0.\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\ntotalMiles += miles\\n}\\n\\nconst averageMiles = totalMiles / weeklyMiles.length\\n// Declare a new variable to store the average miles over time\\n\\nconsole.log(`my total miles are ${totalMiles}.\\n My average miles are ${averageMiles}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1495,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-29T23:01:44.266Z",
    "first_attempt": "2025-06-29T23:01:44.265Z",
    "last_attempt": "2025-06-29T23:01:44.266Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours){\\n    if (hour >= 7){\\n        happyHours.push(hour)\\n    }\\n    else{\\n        grumpyHours.push(hour)\\n    }\\n}\\n\\nconsole.log(`I was happy on ${happyHours.length} days\\nI was grumpy on ${grumpyHours.length} days`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1496,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-29T23:13:24.977Z",
    "first_attempt": "2025-06-29T23:13:24.976Z",
    "last_attempt": "2025-06-29T23:13:24.977Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")){\\n    light++\\n  }\\n else if (coffee.includes(\"medium\")){\\n    medium++\\n  }\\n else if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")){\\n    toastyDark++\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1497,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-29T23:27:18.230Z",
    "first_attempt": "2025-06-29T23:24:36.775Z",
    "last_attempt": "2025-06-29T23:27:18.230Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\n\\n\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1498,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-06-29T23:34:19.179Z",
    "first_attempt": "2025-06-29T23:32:36.321Z",
    "last_attempt": "2025-06-29T23:34:19.179Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n  name: \"Jeremy Landy\",\\n  age: 31,\\n  location: \"Phoenix, AR\",\\n  gender: \"male\"\\n} '}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1499,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-29T23:39:01.514Z",
    "first_attempt": "2025-06-29T23:39:01.513Z",
    "last_attempt": "2025-06-29T23:39:01.514Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\ncolor: \"yellow\",\\nstemLength: 10,\\ngrowingSeason: \"summer\",\\nthorny: false\\n\\n\\n}\\n\\n// Complete the rose object\\nconst rose = {\\ncolor: \"red\",\\nstemLength: 4,\\ngrowingSeason: \"spring\",\\nthorny: true\\n\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1500,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-29T23:44:52.291Z",
    "first_attempt": "2025-06-29T23:44:17.959Z",
    "last_attempt": "2025-06-29T23:44:52.291Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\nfor (const appointmentObject of appointments) {\\n    schedule += `Patient ${appointmentObject.firstName} ${appointmentObject.lastName} has an appointment at ${appointmentObject.appointmentTime}\\\\n`\\n}\\n\\n// Add your code here to iterate the array and build the string\\n\\n\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1501,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-29T23:46:45.048Z",
    "first_attempt": "2025-06-29T23:46:45.047Z",
    "last_attempt": "2025-06-29T23:46:45.048Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1502,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-29T23:48:57.157Z",
    "first_attempt": "2025-06-29T23:48:57.156Z",
    "last_attempt": "2025-06-29T23:48:57.157Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1503,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-29T23:50:39.303Z",
    "first_attempt": "2025-06-29T23:50:39.302Z",
    "last_attempt": "2025-06-29T23:50:39.303Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\ngoldfish.location = \"Large Tank\"\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1504,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Undefined",
    "slug": "objects-voting",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-06-29T23:59:21.355Z",
    "first_attempt": "2025-06-29T23:52:05.719Z",
    "last_attempt": "2025-06-29T23:59:21.355Z",
    "completed_code": "{'code': 'const votingLocation = {\\n    name: \"Commonwealth Community Center\",\\n    address: {\\n        street: {\\n            number: 70,\\n            name: \"Main Street\"\\n        },\\n        city: \"Nashville\",\\n        state: \"TN\",\\n        zipCode: \"37021\"\\n    }\\n}\\n\\n// Add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\nconsole.log(output)\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1505,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-30T00:00:42.995Z",
    "first_attempt": "2025-06-30T00:00:42.994Z",
    "last_attempt": "2025-06-30T00:00:42.995Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet(){\\n  console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1506,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-30T00:01:35.429Z",
    "first_attempt": "2025-06-30T00:01:35.428Z",
    "last_attempt": "2025-06-30T00:01:35.429Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n  console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore()\\ncelebrateScore()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1507,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 14,
    "complete": true,
    "completed_on": "2025-06-30T00:05:51.568Z",
    "first_attempt": "2025-06-30T00:01:52.117Z",
    "last_attempt": "2025-06-30T00:05:51.568Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreater(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction showWelcome(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscount(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1508,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-30T00:08:40.890Z",
    "first_attempt": "2025-06-30T00:07:55.425Z",
    "last_attempt": "2025-06-30T00:08:40.890Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\ndescribeActivity(\"running\")\\ndescribeActivity(\"sleeping\")'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1509,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-30T00:09:33.751Z",
    "first_attempt": "2025-06-30T00:09:33.750Z",
    "last_attempt": "2025-06-30T00:09:33.751Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1);\\n    console.log(\"Total with tax: $\" + total);\\n}\\n\\n// Call the function three times:\\n\\n// 1. Calculate total for $50\\ncalculateTotal(50);\\n\\n// 2. Calculate total for $99.99\\ncalculateTotal(99.99);\\n\\n// 3. Calculate total for $25.50\\ncalculateTotal(25.50);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1510,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-30T00:10:05.364Z",
    "first_attempt": "2025-06-30T00:10:05.362Z",
    "last_attempt": "2025-06-30T00:10:05.364Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\n\\nfunction displayGameScore(playerName, points) {\\n  console.log(`${playerName} scored ${points} points!`);\\n}\\n\\n\\n// Then invoke the function with different player names and scores\\ndisplayGameScore(\"Mario\", 100);\\ndisplayGameScore(\"Luigi\", 150);\\ndisplayGameScore(\"Princess Peach\", 200);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1511,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-30T00:11:33.687Z",
    "first_attempt": "2025-06-30T00:10:43.249Z",
    "last_attempt": "2025-06-30T00:11:33.687Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\nconst add = (x, y) => x + y;\\n\\nconst greet = name => `Hello, ${name}!`;\\n\\nconst getRandomNumber = () => Math.random();\\n\\n\\n// After converting, test your functions by invoking them here\\nconst sum = add(10, 5);\\nconst greeting = greet(\"Justin\");\\nconst random = getRandomNumber();\\n\\nconsole.log(sum);\\nconsole.log(greeting);\\nconsole.log(random);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1512,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-30T00:12:44.756Z",
    "first_attempt": "2025-06-30T00:12:44.755Z",
    "last_attempt": "2025-06-30T00:12:44.756Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\nconst makeGreeting = (name) => {\\n  return `Hello, ${name}!`;\\n};\\n\\n\\n// Invoke the function and assign the return value to a variable\\nconst greeting = makeGreeting(\"Justin\");\\n\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(greeting);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1513,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-30T00:13:46.020Z",
    "first_attempt": "2025-06-30T00:13:46.019Z",
    "last_attempt": "2025-06-30T00:13:46.020Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => quantity * price;\\n\\n// Create calculateTotal here\\nconst calculateTotal = (subtotal) => subtotal * 1.08; // Adds 8% tax\\n\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotalValue = calculateSubtotal(3, 4.99);\\n\\n// 2. Calculate the final total with tax\\nconst finalTotal = calculateTotal(subtotalValue);\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $${subtotalValue.toFixed(2)}`);\\nconsole.log(`Total with tax: $${finalTotal.toFixed(2)}`);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1514,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-30T00:14:27.808Z",
    "first_attempt": "2025-06-30T00:14:27.807Z",
    "last_attempt": "2025-06-30T00:14:27.808Z",
    "completed_code": "{'code': '// Create your arrow function here\\n// Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n// because 500 × 2.5 = 1250, which is >= 1000\\nconst calculateGameScore = (basePoints, bonusMultiplier) => {\\n  const totalPoints = basePoints * bonusMultiplier;\\n\\n  if (totalPoints >= 1000) {\\n    return \"High Score!\";\\n  } else {\\n    return \"Keep trying!\";\\n  }\\n};\\n\\n\\n// Call your function with different values and store a result in a variable\\nconst highScoreAttempt = calculateGameScore(400, 3);    // 400 * 3 = 1200\\nconst regularScoreAttempt = calculateGameScore(250, 3); // 250 * 3 = 750\\n\\n\\n// Log the result to see the output\\nconsole.log(`Result for 1200 points: ${highScoreAttempt}`);\\nconsole.log(`Result for 750 points: ${regularScoreAttempt}`);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1515,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-30T00:15:36.730Z",
    "first_attempt": "2025-06-30T00:15:36.729Z",
    "last_attempt": "2025-06-30T00:15:36.730Z",
    "completed_code": "{'code': '\\n\\nlet score = 0;\\n\\nconst displayScore = () => {\\n  console.log(\"Score: \" + score);\\n};\\n\\nconst updateScore = () => {\\n\\n  score = score + 100;\\n};\\n\\n\\n\\ndisplayScore();\\n\\n\\nupdateScore();\\n\\n\\ndisplayScore();'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1516,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-30T00:16:55.708Z",
    "first_attempt": "2025-06-30T00:16:55.707Z",
    "last_attempt": "2025-06-30T00:16:55.708Z",
    "completed_code": "{'code': 'let highScore = 0;\\n\\nconst checkHighScore = (playerName, score) => {\\n  if (score > highScore) {\\n    highScore = score;\\n    return `New high score! ${playerName} scored ${score}.`;\\n  } else {\\n    return `${score} is not a high score. The score to beat is ${highScore}.`;\\n  }\\n};\\n\\nconsole.log(checkHighScore(\"Alice\", 50));\\nconsole.log(checkHighScore(\"Bob\", 30));\\nconsole.log(checkHighScore(\"Charlie\", 100));\\nconsole.log(checkHighScore(\"Alice\", 90));'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1517,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-06-30T00:18:30.899Z",
    "first_attempt": "2025-06-30T00:17:27.819Z",
    "last_attempt": "2025-06-30T00:18:30.899Z",
    "completed_code": "{'code': 'const calculateTicketPrice = (age, isWeekend) => {\\n  let price = 10;\\n\\n  if (isWeekend) {\\n    price += 2;\\n  }\\n\\n  if (age < 12 || age >= 65) {\\n    price *= 0.5;\\n  }\\n\\n  return price;\\n};\\n\\nconst adultWeekdayPrice = calculateTicketPrice(30, false);\\nconsole.log(adultWeekdayPrice);\\n\\nconst adultWeekendPrice = calculateTicketPrice(30, true);\\nconsole.log(adultWeekendPrice);\\n\\nconst childWeekdayPrice = calculateTicketPrice(10, false);\\nconsole.log(childWeekdayPrice);\\n\\nconst childWeekendPrice = calculateTicketPrice(10, true);\\nconsole.log(childWeekendPrice);\\n\\nconst seniorWeekendPrice = calculateTicketPrice(70, true);\\nconsole.log(seniorWeekendPrice);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1518,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-30T00:19:05.432Z",
    "first_attempt": "2025-06-30T00:19:05.432Z",
    "last_attempt": "2025-06-30T00:19:05.432Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n  let total = 0;\\n\\n  for (const price of prices) {\\n    total += price;\\n  }\\n\\n  if (total > 100) {\\n    total *= 0.9;\\n  }\\n\\n  return total;\\n};\\n\\nconst smallCart = [15.5, 20, 35.25];\\nconst totalForSmallCart = calculateCartTotal(smallCart);\\nconsole.log(totalForSmallCart);\\n\\nconst largeCart = [50, 75.8, 12];\\nconst totalForLargeCart = calculateCartTotal(largeCart);\\nconsole.log(totalForLargeCart);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1519,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-30T00:19:31.666Z",
    "first_attempt": "2025-06-30T00:19:31.665Z",
    "last_attempt": "2025-06-30T00:19:31.666Z",
    "completed_code": "{'code': 'const calculateBasePoints = (time, targets) => {\\n  return time * 100 + targets * 50;\\n};\\n\\nconst calculateBonus = (targets) => {\\n  if (targets > 10) {\\n    return 1000;\\n  } else {\\n    return 0;\\n  }\\n};\\n\\nconst calculateFinalScore = (time, targets) => {\\n  const basePoints = calculateBasePoints(time, targets);\\n  const bonusPoints = calculateBonus(targets);\\n  return basePoints + bonusPoints;\\n};\\n\\nconst lowScore = calculateFinalScore(2, 5);\\nconsole.log(lowScore);\\n\\nconst highScore = calculateFinalScore(3, 12);\\nconsole.log(highScore);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1520,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-06-30T00:20:14.900Z",
    "first_attempt": "2025-06-30T00:20:14.899Z",
    "last_attempt": "2025-06-30T00:20:14.900Z",
    "completed_code": "{'code': 'const createGreeting = (name, time) => {\\n  if (time === \"morning\" || name.startsWith(\"A\")) {\\n    return `Good morning, ${name}!`;\\n  } else if (time === \"afternoon\") {\\n    return `Good afternoon, ${name}!`;\\n  } else {\\n    return `Hello, ${name}!`;\\n  }\\n};\\n\\nconst tellJoke = (topic) => {\\n  if (topic === \"weather\") {\\n    return \"What do you call a stormy robot? A thunder-bot!\";\\n  } else if (topic === \"animals\") {\\n    return \"Why did the robot go to the zoo? To study creature features!\";\\n  } else {\\n    return \"Why was the robot tired? Because it had too many bytes!\";\\n  }\\n};\\n\\nconst greetPeople = (people, time) => {\\n  const greetings = [];\\n  for (const person of people) {\\n    const singleGreeting = createGreeting(person, time);\\n    greetings.push(singleGreeting);\\n  }\\n  return greetings;\\n};\\n\\nconst robotInteraction = (name, time, topic) => {\\n  const greeting = createGreeting(name, time);\\n  const joke = tellJoke(topic);\\n  return `${greeting} ${joke}`;\\n};\\n\\nconst peopleToGreet = [\"Alice\", \"Bob\", \"Charlie\"];\\nconst morningGreetings = greetPeople(peopleToGreet, \"morning\");\\nconsole.log(morningGreetings);\\n\\nconst eveningGreetings = greetPeople(peopleToGreet, \"evening\");\\nconsole.log(eveningGreetings);\\n\\nconst fullInteraction = robotInteraction(\"Justin\", \"afternoon\", \"weather\");\\nconsole.log(fullInteraction);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1521,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 56,
    "complete": true,
    "completed_on": "2025-06-30T00:22:51.474Z",
    "first_attempt": "2025-06-30T00:20:18.952Z",
    "last_attempt": "2025-06-30T00:22:51.474Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n  <h1>How I Became A Software Developer</h1>\\n  <article>\\n    <h2>Nashville Software School</h2>\\n    <section>\\n      <p>Attending Nashville Software School is an exciting experience.</p>\\n    </section>\\n    <section>\\n      <p>I learned the following skills</p>\\n      <ol>\\n        <li>Variables</li>\\n        <li>Arrays</li>\\n        <li>Objects</li>\\n        <li>Functions</li>\\n        <li>HTML</li>\\n        <li>CSS</li>\\n      </ol>\\n    </section>\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1522,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Undefined",
    "slug": "html-elements",
    "attempts": 43,
    "complete": true,
    "completed_on": "2025-06-30T00:24:55.259Z",
    "first_attempt": "2025-06-30T00:22:53.625Z",
    "last_attempt": "2025-06-30T00:29:57.819Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n  <main>\\n    <article>\\n      <h1>Justin Lawson</h1>\\n      <section>\\n        <p>My previous career was in It, where I learned the importance of layouts and visual communication.</p>\\n      </section>\\n      <section>\\n        <p>I want to become a software developer to build the logic and functionality behind beautiful interfaces and to solve complex problems with code.</p>\\n      </section>\\n    </article>\\n  </main>\\n  <footer>\\n    <p>Justin Lawson - 2025 - jlawsonphill@gmail.com</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1523,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Undefined",
    "slug": "css-basics",
    "attempts": 52,
    "complete": true,
    "completed_on": "2025-06-30T00:31:37.282Z",
    "first_attempt": "2025-06-30T00:25:04.168Z",
    "last_attempt": "2025-06-30T00:39:03.669Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  background-color: lightblue;\\n}\\n\\narticle {\\n  border: 1px solid black;\\n  padding: 1rem;\\n}\\n\\np {\\n  color: purple;\\n}\\n\\nimg {\\n  height: 10rem;\\n}'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1524,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Undefined",
    "slug": "css-selectors",
    "attempts": 21,
    "complete": true,
    "completed_on": "2025-06-30T00:34:12.393Z",
    "first_attempt": "2025-06-30T00:25:25.761Z",
    "last_attempt": "2025-06-30T00:39:13.109Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n    font-family: Arial, sans-serif;\\n  background-color: #f0f8ff;\\n}\\n\\np {\\n  line-height: 1.6;\\n}\\n\\nh1 {\\n  text-align: center;\\n  font-size: 2.5rem;\\n}\\n\\n.highlight {\\n  background-color: #fcf8e3;\\n  border-left: 5px solid #f0ad4e;\\n  padding: 0.5rem;\\n}\\n\\n.important-note {\\n  color: #a94442;\\n  font-weight: bold;\\n}\\n\\n#main-header {\\n  background-color: #2c3e50;\\n  color: white;\\n  padding: 2rem;\\n  margin-bottom: 1rem;\\n}\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1525,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 62,
    "complete": true,
    "completed_on": "2025-06-30T00:36:54.477Z",
    "first_attempt": "2025-06-30T00:34:13.712Z",
    "last_attempt": "2025-06-30T00:41:46.367Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\n.navbar {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  background-color: #2c3e50;\\n  padding: 0.5rem 1rem;\\n  font-family: Arial, sans-serif;\\n}\\n\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links {\\n  list-style: none;\\n    display: flex;\\n  flex-direction: row;\\n  justify-content: space-evenly;\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.logo {\\n  color: #ecf0f1;\\n  font-size: 1.5rem;\\n  font-weight: bold;\\n}\\n\\n\\n\\n\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1526,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Flexbox Item Properties",
    "slug": "functions-calling-functions",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-06-30T00:55:54.781Z",
    "first_attempt": "2025-06-30T00:35:02.432Z",
    "last_attempt": "2025-06-30T00:55:54.781Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\nreturn time * 100 + targets * 50\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\nif (targets > 10) {\\n    return bonus = 1000\\n}\\nelse {\\n    return bonus = 0\\n}\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n    const base = calculateBasePoints(time, targets)\\n    const bonus = calculateBonus(targets)\\n    return base + bonus \\n    // Add the results together and return the sum\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\nconst finalScore = calculateFinalScore(2, 5)\\nconsole.log(`Final score is ${calculateFinalScore}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1527,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-container",
    "attempts": 13,
    "complete": true,
    "completed_on": "2025-06-30T00:44:32.736Z",
    "first_attempt": "2025-06-30T00:40:24.819Z",
    "last_attempt": "2025-06-30T00:44:32.736Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Base styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n/* Card styles */\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.card h3 {\\n  margin-top: 0;\\n  color: #2c3e50;\\n}\\n\\n/* Flexbox container properties */\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  align-items: flex-start;\\n  gap: 20px;\\n  padding: 10px;\\n}\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1528,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Flexbox Item Properties",
    "slug": "flexbox-items",
    "attempts": 16,
    "complete": true,
    "completed_on": "2025-06-30T00:46:15.132Z",
    "first_attempt": "2025-06-30T00:44:37.653Z",
    "last_attempt": "2025-06-30T00:46:15.132Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n.navbar {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n}\\n\\n.main-container {\\n  display: flex;\\n  gap: 1rem;\\n}\\n\\n.sidebar {\\n  flex-shrink: 0;\\n  flex-basis: 250px;\\n}\\n\\n/* Add your flexbox properties below */\\n\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  gap: 1rem;\\n}\\n\\n.card {\\n  display: flex;\\n  flex-direction: column;\\n  flex-basis: 300px;\\n  flex-grow: 1;\\n}\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1529,
  "fields": {
    "learner_github_id": "159566991",
    "learner_name": "Justin Lawson",
    "title": "Undefined",
    "slug": "arrays-review",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-30T00:46:38.730Z",
    "last_attempt": "2025-06-30T00:46:38.730Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1530,
  "fields": {
    "learner_github_id": "211066248",
    "learner_name": "Erin Telfer",
    "title": "Undefined",
    "slug": "functions-review",
    "attempts": 8,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-30T01:22:38.974Z",
    "last_attempt": "2025-06-30T01:37:17.516Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1531,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "functions-return-working",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-06-30T01:25:50.116Z",
    "last_attempt": "2025-07-22T04:36:48.365Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1532,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 132,
    "complete": true,
    "completed_on": "2025-07-02T14:23:45.165Z",
    "first_attempt": "2025-06-30T04:10:08.191Z",
    "last_attempt": "2025-07-02T14:23:45.165Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links {\\n  display: flex;\\n  flex-direction: row-reverse;\\n  justify-content: space-evenly;\\n  border: 1px solid black;\\n  background: lightblue;\\n  list-style: none;\\n}\\n\\n/* Make the navbar a flex container and style it */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1533,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-30T14:16:36.603Z",
    "first_attempt": null,
    "last_attempt": "2025-06-30T14:16:36.603Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1534,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-30T14:16:37.187Z",
    "first_attempt": null,
    "last_attempt": "2025-06-30T14:16:37.187Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1535,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-06-30T14:16:37.891Z",
    "first_attempt": null,
    "last_attempt": "2025-06-30T14:16:37.891Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1536,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Undefined",
    "slug": "leonids-data-structures",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-07-01T13:19:33.471Z",
    "first_attempt": "2025-06-30T21:20:06.854Z",
    "last_attempt": "2025-07-01T13:19:33.471Z",
    "completed_code": "{'code': '\\n    const inventory = [\\n  { id: 101, name: \"Hand-Carved Wooden Train\", maker: \"Leonid\" },\\n  { id: 102, name: \"Painted Rocking Horse\", maker: \"Leonid\" },\\n  { id: 103, name: \"Stuffed Bear with Bow Tie\", maker: \"Leonid\" },\\n  { id: 104, name: \"Miniature Sailboat\", maker: \"Leonid\" },\\n  { id: 105, name: \"Patchwork Doll\", maker: \"Leonid\" },\\n  { id: 106, name: \"Wooden Puzzle Box\", maker: \"Leonid\" },\\n  { id: 107, name: \"Knitted Sock Monkey\", maker: \"Leonid\" },\\n  { id: 108, name: \"Spinning Top\", maker: \"Leonid\" },\\n  { id: 109, name: \"Tiny Puppet Theater\", maker: \"Leonid\" },\\n  { id: 110, name: \"Hand-Painted Marbles\", maker: \"Leonid\" },\\n  { id: 111, name: \"Fabric Kite with Tail\", maker: \"Leonid\" },\\n  { id: 112, name: \"Wool-Stuffed Bunny\", maker: \"Leonid\" },\\n  { id: 113, name: \"Wooden Xylophone\", maker: \"Leonid\" },\\n  { id: 114, name: \"Tin Wind-Up Robot\", maker: \"Leonid\" },\\n  { id: 115, name: \"Miniature Toy Chest\", maker: \"Leonid\" }\\n];\\n\\nfunction findToyById(toys, id) {\\n  // Your code here\\n  for (const toy of toys) {\\n    if (toy.id === id) {\\n      return toy\\n    }\\n  }\\n  return null \\n}\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1537,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Undefined",
    "slug": "arrays-review",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-06T00:05:21.443Z",
    "first_attempt": "2025-07-01T00:50:23.596Z",
    "last_attempt": "2025-08-06T00:05:21.443Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []        // \"Clothing\"\\nconst entertainment = []   // \"Movie\"\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nconst utilities = []       // \"Utility\"\\nconst largePurchases = []  // Expenses over 100.00\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nlet averageExpense = 0\\n\\n// Step 1: Go through each expense one by one\\nfor (let i = 0; i < monthlyExpenses.length; i++) {\\n    // Step 2: Split each expense into description and amount\\n    // \"Kroger Groceries:251\" becomes [\"Kroger Groceries\", \"251\"]\\n    let parts = monthlyExpenses[i].split(\":\")\\n    let description = parts[0]  // \"Kroger Groceries\"\\n    let amount = Number(parts[1])  // 251 (as a number)\\n    \\n    // Step 3: Add to total expenses\\n    totalExpenses = totalExpenses + amount\\n    \\n    // Step 4: Check if it\\'s a large purchase (over $100)\\n    if (amount > 100) {\\n        largePurchases.push(monthlyExpenses[i])\\n    }\\n    \\n    // Step 5: Check what category it belongs to\\n    // We use .includes() to see if certain words are in the description\\n    \\n    if (description.includes(\"Clothing\")) {\\n        clothing.push(monthlyExpenses[i])\\n    }\\n    \\n    if (description.includes(\"Movie\")) {\\n        entertainment.push(monthlyExpenses[i])\\n    }\\n    \\n    if (description.includes(\"Groceries\") || description.includes(\"Restaurant\")) {\\n        food.push(monthlyExpenses[i])\\n    }\\n    \\n    if (description.includes(\"Fuel\") || description.includes(\"Gas\")) {\\n        fuel.push(monthlyExpenses[i])\\n    }\\n    \\n    if (description.includes(\"Lyft\") || description.includes(\"Uber\")) {\\n        travel.push(monthlyExpenses[i])\\n    }\\n    \\n    if (description.includes(\"Utility\")) {\\n        utilities.push(monthlyExpenses[i])\\n    }\\n}\\n\\n// Step 6: Calculate average\\naverageExpense = totalExpenses / monthlyExpenses.length\\n\\n// Display results\\nconsole.log(\"=== EXPENSE REPORT ===\")\\nconsole.log(\"Total Expenses: $\" + totalExpenses)\\nconsole.log(\"Average Expense: $\" + averageExpense.toFixed(2))\\nconsole.log(\"\")\\n\\nconsole.log(\"Clothing (\" + clothing.length + \" items):\", clothing)\\nconsole.log(\"Entertainment (\" + entertainment.length + \" items):\", entertainment)\\nconsole.log(\"Food (\" + food.length + \" items):\", food)\\nconsole.log(\"Fuel (\" + fuel.length + \" items):\", fuel)\\nconsole.log(\"Travel (\" + travel.length + \" items):\", travel)\\nconsole.log(\"Utilities (\" + utilities.length + \" items):\", utilities)\\nconsole.log(\"Large Purchases (\" + largePurchases.length + \" items):\", largePurchases)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1538,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Undefined",
    "slug": "functions-scope-parameters",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-07-01T02:10:23.814Z",
    "first_attempt": "2025-07-01T01:56:50.361Z",
    "last_attempt": "2025-07-06T21:46:36.361Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\n\\nconst checkHighScore = (playerName, score) => {\\n    if (highScore < score) {\\n        highScore = score\\n        return `${playerName} has the high score!`\\n    }\\n    else {\\n        return `The high score is ${highScore}`\\n    }\\n}\\n\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\n\\nconsole.log(checkHighScore(\"Alice\", 50))'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1539,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Undefined",
    "slug": "functions-conditions",
    "attempts": 11,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-07-01T02:30:50.217Z",
    "last_attempt": "2025-07-06T21:47:33.542Z",
    "completed_code": "False",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1540,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-01T02:30:52.535Z",
    "first_attempt": "2025-07-01T02:30:52.530Z",
    "last_attempt": "2025-07-01T02:30:52.536Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\nlet total = 0\\n      // 2. Loop through all prices in the array and add each to total\\nfor (const price of prices) {\\n    total += price\\n}\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\nif (total > 100) {\\n    total *= .90\\n}\\n      // 4. Return the final total\\n      return total\\n  }\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  const cart1 = [12, 54, 51]\\n  const total1 = calculateCartTotal(cart1)\\n  console.log(total1)\\n\\n  const cart2 = [21, 30, 38]\\n  const total2 = calculateCartTotal(cart2)\\n  console.log(total2)\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\n\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1541,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Representing Toys as Objects",
    "slug": "leonids-objects",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-07-01T13:32:25.492Z",
    "first_attempt": "2025-07-01T13:20:40.086Z",
    "last_attempt": "2025-07-01T13:32:25.492Z",
    "completed_code": "{'code': 'const woodenTrain = {name: \"woodenTrain\", manufacturer: \"Hasbro\", priceInDollars: null, inStock: true, recommendedAgeRange: \"Five to seven\", weightInGrams: 542}\\nconst stuffedRabbit = {name: \"stuffedRabbit\", manufacturer: \"Mattel\", priceInDollars: 10, inStock: false, recommendedAgeRange: null, weightInGrams: 116}\\nconst kite =  {name: \"kite\", manufacturer: \"Fischer-Price\", priceInDollars: 5, inStock: true, recommendedAgeRange: \"All ages\", weightInGrams: null}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1542,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Toy Collection",
    "slug": "leonids-arrays",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-01T13:37:34.340Z",
    "first_attempt": "2025-07-01T13:37:34.339Z",
    "last_attempt": "2025-07-01T13:37:34.340Z",
    "completed_code": "{'code': 'const toyInventory = [\\n  {name: \"Race car\", manufacturer: \"Hasbro\", priceInDollars: 12},\\n  {name: \"Action Figure\", manufacturer: \"Mattel\", priceInDollars: 10},\\n  {name: \"Stuffed Bear\", manufacturer: null, priceInDollars: 8}\\n]'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1543,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Displaying Toy Properties",
    "slug": "leonids-iteration",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-01T13:45:44.914Z",
    "first_attempt": "2025-07-01T13:45:15.402Z",
    "last_attempt": "2025-07-01T13:45:44.914Z",
    "completed_code": "{'code': 'const toyInventory = [\\n    {\\n        name: \"Wooden Train\",\\n        priceInDollars: 12,\\n    },\\n    {\\n        name: \"Stuffed Rabbit\",\\n        priceInDollars: 18,\\n    },\\n    {\\n        name: \"Painted Kite\",\\n        priceInDollars: 10,\\n    },\\n]\\n\\nfor (const toy of toyInventory) {\\n    console.log(toy.name)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1544,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "New Toys",
    "slug": "leonids-arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-01T14:08:56.472Z",
    "first_attempt": "2025-07-01T14:08:56.470Z",
    "last_attempt": "2025-07-01T14:08:56.472Z",
    "completed_code": "{'code': 'const toyInventory = [];\\n\\ntoyInventory.push(\"Wooden Train\")\\ntoyInventory.push(\"Stuffed Rabbit\")\\ntoyInventory.push(\"Painted Kite\")\\n\\nconsole.log(toyInventory)\\n\\nconst toyInventoryCollection = [];\\n\\ntoyInventoryCollection.push({name: \"Wooden Train\", priceInDollars: 30 })\\ntoyInventoryCollection.push({name: \"Stuffed Rabbit\", priceInDollars: 25})\\ntoyInventoryCollection.push({name: \"Painted Kite\", priceInDollars: 20})'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1545,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Helping Customers Find the Right Toy",
    "slug": "leonids-conditionals",
    "attempts": 4,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-07-01T14:16:04.286Z",
    "last_attempt": "2025-07-01T14:24:31.740Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1546,
  "fields": {
    "learner_github_id": "210622487",
    "learner_name": "James Freeman",
    "title": "Toy Catalog",
    "slug": "leonids-string-interpolation",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-07-01T14:54:01.169Z",
    "first_attempt": "2025-07-01T14:37:23.851Z",
    "last_attempt": "2025-07-01T14:54:01.169Z",
    "completed_code": "{'code': 'const toyCatalog = [\\n  { name: \"Wooden Train\", priceInDollars: 30, color: \"Red\" },\\n  { name: \"Stuffed Rabbit\", priceInDollars: 25, color: \"Gray\" },\\n  { name: \"Painted Kite\", priceInDollars: 20, color: \"Blue\" }\\n];\\nconst displayCatalog = [];\\nfor (const toy of toyCatalog) {\\n  const line = `Toy: ${toy.name} | Price: $${toy.priceInDollars} | Color: ${toy.color}`;\\n  displayCatalog.push(line);\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1547,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-01T16:48:05.114Z",
    "first_attempt": "2025-07-01T16:47:00.166Z",
    "last_attempt": "2025-07-01T16:48:05.114Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\nconst combinedIncome = myIncome + spouseIncome\\nconst monthlyExpenses = phoneBill + mortgage + carInsurance + healthInsurance\\nconst netIncome = combinedIncome - monthlyExpenses\\n\\nconst statement = `Our combined monthly income is ${combinedIncome}.\\nOur total monthly expenses are ${monthlyExpenses}.\\nOur net monthly income is ${netIncome}.`;\\n  // Use backticks and calculations here\\n\\n  console.log(statement)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1548,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Undefined",
    "slug": "string-methods",
    "attempts": 4,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-07-01T17:20:39.742Z",
    "last_attempt": "2025-07-06T18:40:13.165Z",
    "completed_code": "False",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1549,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-01T17:34:19.465Z",
    "first_attempt": "2025-07-01T17:34:19.463Z",
    "last_attempt": "2025-07-01T17:34:19.465Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \",\"-\")\\nconst formattedName = customerName.toLocaleUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0,4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1550,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-01T18:04:59.404Z",
    "first_attempt": "2025-07-01T18:02:22.695Z",
    "last_attempt": "2025-07-01T18:04:59.404Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n} else {\\n    console.log(\"skipped yoga and watched netflix all day\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1551,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-01T19:04:18.402Z",
    "first_attempt": "2025-07-01T19:04:18.402Z",
    "last_attempt": "2025-07-01T19:04:18.402Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n    // Add your code here\\n} else if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n} else if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n} else if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n} else {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\"\\n}\\nconsole.log(`torso : ${torsoClothing}`)\\nconsole.log(`legs: ${legClothing}`)\\nconsole.log(`footwear: ${footWear}`)\\n\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1552,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 4,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-07-01T19:25:46.345Z",
    "last_attempt": "2025-07-02T19:32:58.501Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1553,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-01T19:49:44.258Z",
    "first_attempt": "2025-07-01T19:48:52.959Z",
    "last_attempt": "2025-07-01T19:49:44.258Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1554,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-01T20:19:52.674Z",
    "first_attempt": "2025-07-01T20:19:52.672Z",
    "last_attempt": "2025-07-01T20:19:52.674Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1555,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-01T20:33:22.856Z",
    "first_attempt": "2025-07-01T20:28:09.489Z",
    "last_attempt": "2025-07-01T20:33:22.856Z",
    "completed_code": "{'code': 'const topics = [\"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const jsTopics of topics) {\\n    console.log(jsTopics)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1556,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-01T20:43:02.705Z",
    "first_attempt": "2025-07-01T20:43:02.702Z",
    "last_attempt": "2025-07-01T20:43:02.705Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (pieces of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1557,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-01T20:58:18.699Z",
    "first_attempt": "2025-07-01T20:58:18.699Z",
    "last_attempt": "2025-07-01T20:58:18.699Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n    if (ingredient === \"egg\") {\\n        finishedFood.push(\"biscuit\")\\n    } else if (ingredient === \"beef patty\"){\\n        finishedFood.push(\"burger\")\\n    } else if (ingredient === \"potato\"){\\n        finishedFood.push(\"fries\")\\n    }\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1558,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-01T21:05:57.323Z",
    "first_attempt": "2025-07-01T21:05:57.322Z",
    "last_attempt": "2025-07-01T21:05:57.323Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expenses of monthlyExpenses) {\\n    totalExpense += expenses\\n  // Add the current monthly cost to the value of totalExpense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1559,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-01T21:16:31.714Z",
    "first_attempt": "2025-07-01T21:16:31.713Z",
    "last_attempt": "2025-07-01T21:16:31.714Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 89, 105, 27, 84, 12, 77, 82, 6 ]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\n    totalMiles += miles\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nconst result = `I average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.`\\n\\nconsole.log(result)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1560,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-01T21:26:08.604Z",
    "first_attempt": "2025-07-01T21:26:08.603Z",
    "last_attempt": "2025-07-01T21:26:08.604Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hoursSlept of hours) {\\n    if (hoursSlept < 7) {\\n        grumpyHours.push(hoursSlept)\\n    }\\n    else {\\n        happyHours.push(hoursSlept)\\n    }\\n}\\n\\nconst hoursOfGrumpyDays = `I was grumpy on ${grumpyHours.length} days.` \\nconst hoursOfHappyDays = `I was happy on ${happyHours.length} days.`\\n\\nconsole.log(hoursOfGrumpyDays)\\nconsole.log(hoursOfHappyDays)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1561,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-01T21:44:20.594Z",
    "first_attempt": "2025-07-01T21:43:14.003Z",
    "last_attempt": "2025-07-01T21:44:20.594Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n    if (coffee.includes(\"light\")) {\\n        light++\\n    }\\n    else if (coffee.includes(\"medium\")) {\\n        medium++\\n    }\\n    else if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")) {\\n        toastyDark++\\n    }\\n  // Add your logic here\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1562,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-01T21:47:57.139Z",
    "first_attempt": "2025-07-01T21:45:18.042Z",
    "last_attempt": "2025-07-01T21:47:57.139Z",
    "completed_code": "{'code': '// This code has scope problems!\\nlet score = 0\\n\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1563,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-07-01T22:32:14.327Z",
    "first_attempt": "2025-07-01T22:13:03.548Z",
    "last_attempt": "2025-07-01T22:32:14.327Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 10\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\n\\nconst checkHighScore = (playerName, score) => {\\n    if (score > highScore) {\\n        highScore = score\\n        return `Congratulations ${playerName}! The new high score is ${score}!`\\n    }\\n    else {\\n        return `The high score is ${highScore}`\\n    }\\n}\\n\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\n\\nconsole.log(checkHighScore(\"Alice\", 50))\\nconsole.log(checkHighScore(\"Richard\", 5))\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1564,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-01T22:38:26.713Z",
    "first_attempt": "2025-07-01T22:38:11.480Z",
    "last_attempt": "2025-07-01T22:38:26.713Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\") \\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1565,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 3,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-07-01T23:25:44.116Z",
    "last_attempt": "2025-07-02T18:40:55.699Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1566,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-02T00:06:25.938Z",
    "first_attempt": "2025-07-02T00:06:25.936Z",
    "last_attempt": "2025-07-02T00:06:25.938Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n    name: \"Jeremy Landy\",\\n    location: \"Phoenix, AR\",\\n    gender: \"male\",\\n    age: 31\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1567,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-02T00:12:13.341Z",
    "first_attempt": "2025-07-02T00:12:13.340Z",
    "last_attempt": "2025-07-02T00:12:13.341Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n    color: \"purple\",\\n    stemLength: 12,\\n    growingSeason: \"Summer\",\\n    thorny: false\\n\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n    color: \"Red\",\\n    stemLength: 6,\\n    growingSeason: \"Spring\",\\n    thorny: true\\n\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1568,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-07-02T00:23:50.440Z",
    "first_attempt": "2025-07-02T00:21:42.965Z",
    "last_attempt": "2025-07-02T00:23:50.440Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\nfor (const appt of appointments) {\\n    schedule += `Patient ${appt.firstName} ${appt.lastName} has an appointment at ${appt.appointmentTime}\\\\n`\\n}\\n\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1569,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-02T00:29:23.266Z",
    "first_attempt": "2025-07-02T00:29:23.266Z",
    "last_attempt": "2025-07-02T00:29:23.266Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1570,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-02T00:31:58.307Z",
    "first_attempt": "2025-07-02T00:31:58.306Z",
    "last_attempt": "2025-07-02T00:31:58.307Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy =book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1571,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-02T00:33:45.315Z",
    "first_attempt": "2025-07-02T00:33:45.314Z",
    "last_attempt": "2025-07-02T00:33:45.315Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \"Large Tank\"\\n\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1572,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-02T00:44:38.154Z",
    "first_attempt": "2025-07-02T00:40:05.494Z",
    "last_attempt": "2025-07-02T00:44:38.154Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1573,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-container",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-07-02T14:23:53.507Z",
    "last_attempt": "2025-07-02T14:23:53.516Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1574,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-container",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-07-02T14:23:53.507Z",
    "last_attempt": "2025-07-02T14:23:53.507Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1575,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 375,
    "complete": true,
    "completed_on": "2025-07-02T15:32:10.710Z",
    "first_attempt": "2025-07-02T14:49:44.917Z",
    "last_attempt": "2025-07-02T15:32:10.710Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n/* Add your flexbox properties below */\\n\\n.navbar {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-around;\\n}\\n\\n.content {\\n  display: flex;\\n  \\n}\\n\\n.sidebar {\\n\\n}\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1576,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Flexbox Item Properties",
    "slug": "leonids-data-types",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-07-02T15:34:24.295Z",
    "last_attempt": "2025-07-02T15:34:24.295Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1577,
  "fields": {
    "learner_github_id": "211275989",
    "learner_name": "Thomas Robert Castellon",
    "title": "Flexbox Item Properties",
    "slug": "leonids-data-types",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-07-02T15:34:24.295Z",
    "last_attempt": "2025-07-02T15:34:24.313Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1578,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Flexbox Item Properties",
    "slug": "functions-calling-functions",
    "attempts": 3,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-07-02T17:03:09.331Z",
    "last_attempt": "2025-07-02T17:42:30.913Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1579,
  "fields": {
    "learner_github_id": "196719773",
    "learner_name": "Evan Alford",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-02T18:33:49.274Z",
    "first_attempt": "2025-07-02T18:33:49.268Z",
    "last_attempt": "2025-07-02T18:33:49.274Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n\\n    if (time === \"morning\" || name.startsWith(\"A\")) {\\n        return `Good morning, ${name}!`\\n    }\\n    else if (time === \"afternoon\") {\\n        return `Good afternoon, ${name}!`\\n    } else {\\n        return `Hello, ${name}!`\\n    }\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  // Otherwise, return \"Hello, [name]!\"\\n\\n}\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n\\n    if (topic === \"weather\") {\\n        return \"What do you call a stormy robot? A thunder-bot!\"\\n    }\\n    else if (topic === \"animals\") {\\n        return \"Why did the robot go to the zoo? To study creature features!\"\\n    } else {\\n        return \"Why was the robot tired? Because it has too many bytes!\"\\n    }\\n  // If topic is \"weather\", return the weather joke\\n  // If topic is \"animals\", return the animals joke\\n  // Otherwise, return the default joke\\n\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\nconst greetings = []\\n  // Loop through each person in the people array\\nfor (const person of people) {\\nconst message = createGreeting(person, time)\\ngreetings.push(message)\\n}\\nreturn greetings;\\n  // Create a greeting for each person\\n\\n  // Add the greeting to the array\\n\\n  // Return the array of greetings\\n\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\nconst greeting = createGreeting(name, time)\\n\\n  // Get the joke\\nconst joke = tellJoke(topic)\\n  // Return both together\\nreturn `${greeting} ${joke}`\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1580,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-07-02T20:47:34.805Z",
    "first_attempt": "2025-07-02T20:16:47.198Z",
    "last_attempt": "2025-07-02T20:47:34.805Z",
    "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n    let price = 10\\n\\n    if (isWeekend) {\\n        price += 2\\n    }\\n\\n    if (age < 12 || age >= 65) {\\n        price = price * 0.5\\n    }\\n\\n    return price\\n  }\\n\\n  const adultWeekdayPrice = calculateTicketPrice(65, false)\\n  console.log(adultWeekdayPrice)\\n\\n      // 1. Start with the base ticket price of $10\\n\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n\\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n\\n      // 4. Return the final ticket price\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n\\n  // Example:\\n  // const adultWeekdayPrice = calculateTicketPrice(25, false);\\n\"}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1581,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-02T21:14:35.341Z",
    "first_attempt": "2025-07-02T21:14:35.340Z",
    "last_attempt": "2025-07-02T21:14:35.341Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\n      let total = 0\\n\\n      // 2. Loop through all prices in the array and add each to total\\n      for (price of prices) {\\n        total = total + price\\n      }\\n\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\n      if (total > 100) {\\n        total = total * 0.9\\n      }\\n\\n      return total\\n\\n      // 4. Return the final total\\n  }\\n\\ncartPrices = [8, 27, 14, 70, 12]\\ntotalCartPrice = calculateCartTotal(cartPrices)\\nconsole.log(totalCartPrice)\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\n\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1582,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-02T22:20:32.965Z",
    "first_attempt": "2025-07-02T22:14:14.330Z",
    "last_attempt": "2025-07-02T22:20:32.965Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    time = time * 100\\n    targets = targets * 50\\n    return time + targets\\n}\\n\\n\\n// // 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    if (targets > 10) {\\n        return 1000\\n    } else {\\n        return 0\\n    }\\n}\\n\\n// // 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    const finalScore = calculateBasePoints(time, targets)\\n    const bonus = calculateBonus(targets)\\n    return finalScore + bonus\\n}\\n    // Get the base points and bonus points\\n\\n    // Add the results together and return the sum\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\n\\ntotalScore = calculateFinalScore(2, 5)\\nconsole.log(totalScore)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1583,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-02T23:56:07.900Z",
    "first_attempt": "2025-07-02T23:56:07.898Z",
    "last_attempt": "2025-07-02T23:56:07.900Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n    if (time === (\"morning\") || name.startsWith(\"A\")) {\\n        return (`Good morning, ${name}!`)\\n    } if (time === (\"afternoon\")) {\\n        return (`Good afternoon, ${name}!`)\\n    } else {\\n        return (`Hello, ${name}!`)\\n    }\\n}\\n\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  // Otherwise, return \"Hello, [name]!\"\\n\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n    if (topic === (\"weather\")) {\\n        return (\"What do you call a stormy robot? A thunder-bot!\")\\n    } if (topic === (\"animals\")) {\\n        return (\"Why did the robot go to the zoo? To study creature features!\")\\n    } else {\\n        return (\"Why was the robot tired? Because it had too many bytes!\")\\n    }\\n}\\n\\n  // If topic is \"weather\", return the weather joke\\n  // If topic is \"animals\", return the animals joke\\n  // Otherwise, return the default joke\\n\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n    const allGreetings = []\\n    for (const names of people) {\\n        const greeting = createGreeting(names, time)\\n        allGreetings.push(greeting)\\n    }\\n    return allGreetings\\n}\\n\\n  // Create an empty array to store all the greetings\\n\\n  // Loop through each person in the people array\\n\\n  // Create a greeting for each person\\n\\n  // Add the greeting to the array\\n\\n  // Return the array of greetings\\n\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n    const greeting = createGreeting(name, time)\\n    const joke = tellJoke(topic)\\n    return (`${greeting} ${joke}`)\\n}\\n\\n  // Get the greeting\\n\\n  // Get the joke\\n\\n  // Return both together\\n\\n\\n// Test your functions\\n\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// // Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1584,
  "fields": {
    "learner_github_id": "204808586",
    "learner_name": "Misty Blue ",
    "title": "Flexbox Container Properties",
    "slug": "leonids-data-types",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-07-03T17:28:29.700Z",
    "last_attempt": "2025-07-03T17:28:29.721Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1585,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 108,
    "complete": true,
    "completed_on": "2025-07-03T19:56:53.282Z",
    "first_attempt": "2025-07-02T23:56:24.226Z",
    "last_attempt": "2025-07-03T19:56:53.282Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n      <!-- Your content goes here -->\\n\\n<h1>How I Became A Software Developer</h1>\\n\\n<article>\\n  <h2>Nashville Software School</h2>\\n  <section>\\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\\n  </section>\\n  <section>\\n    <p>I learned the following skills</p>\\n    <ol>\\n      <li>Variables</li>\\n      <li>Arrays</li>\\n      <li>Objects</li>\\n      <li>Functions</li>\\n      <li>HTML</li>\\n      <li>CSS</li>\\n    </ol>\\n  </section>\\n  \\n\\n</article>\\n\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1586,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "HTML Elements",
    "slug": "html-elements",
    "attempts": 137,
    "complete": true,
    "completed_on": "2025-07-03T20:03:18.802Z",
    "first_attempt": "2025-07-03T19:56:56.156Z",
    "last_attempt": "2025-07-03T20:03:18.802Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n\\n<header>\\n  <nav>\\n    <div>Home</div>\\n    <div>Projects</div>\\n    <div>Education</div>\\n  </nav>\\n</header>\\n\\n<main>\\n  <article>\\n    <h1>Jimmy Heat</h1>\\n    <section>\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n    </section>\\n    <section>\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n    </section>\\n  </article>\\n</main>\\n\\n<footer>\\n  Jimmy Heat, 2025, email@email.com\\n</footer>\\n\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1587,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 137,
    "complete": true,
    "completed_on": "2025-07-03T20:08:31.171Z",
    "first_attempt": "2025-07-03T20:03:21.332Z",
    "last_attempt": "2025-07-03T20:08:31.171Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: lightblue;\\n}\\n\\narticle {\\n  border: 1px solid black;\\n  padding: 1rem;\\n}\\n\\np {\\n  color: purple;\\n}\\n\\nimg {\\n  height: 10rem;\\n}\\n\\n\\n\\n/* Add your CSS styles here */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1588,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "CSS Selectors",
    "slug": "css-selectors",
    "attempts": 326,
    "complete": true,
    "completed_on": "2025-07-03T20:17:32.570Z",
    "first_attempt": "2025-07-03T20:08:33.194Z",
    "last_attempt": "2025-07-03T20:17:32.570Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\np {\\n  color: steelblue;\\n  border: 5px solid gold;\\n  padding: 1rem;\\n}\\n\\nh1 {\\n  color: red;\\n  text-align: center;\\n}\\n\\nh2 {\\n  color: lightblue;\\n  text-align: center;\\n}\\n\\nh3 {\\n  color: purple;\\n  font-weight: bold;\\n  text-align: center;\\n}\\n\\n.highlight {\\n  background-color: pink;\\n}\\n\\n.form-group {\\n  background-color: orange;\\n}\\n\\n#advanced {\\n  background-color: lightgreen;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1589,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 175,
    "complete": true,
    "completed_on": "2025-07-03T20:24:53.147Z",
    "first_attempt": "2025-07-03T20:17:33.696Z",
    "last_attempt": "2025-07-03T20:24:53.147Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links {\\n  list-style: none;\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-evenly;\\n  background-color: gold;\\n  border: 3px solid blue;\\n  margin: 1rem;\\n  padding: 1rem;\\n}\\n\\n/* Make the navbar a flex container and style it */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1590,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-container",
    "attempts": 108,
    "complete": true,
    "completed_on": "2025-07-03T20:38:13.129Z",
    "first_attempt": "2025-07-03T20:24:56.388Z",
    "last_attempt": "2025-07-03T20:38:13.129Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  font-size: 0.8rem;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n}\\n\\n/* Add your flexbox container properties below */\\n\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  gap: 10px;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1591,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Undefined",
    "slug": "flexbox-items",
    "attempts": 76,
    "complete": true,
    "completed_on": "2025-07-03T20:50:14.170Z",
    "first_attempt": "2025-07-03T20:38:18.933Z",
    "last_attempt": "2025-07-03T20:50:14.170Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n/* Add your flexbox properties below */\\n\\n.navbar {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-evenly;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1592,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-07-03T20:50:47.522Z",
    "first_attempt": null,
    "last_attempt": "2025-07-03T20:50:47.522Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1593,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-07-03T20:50:48.084Z",
    "first_attempt": null,
    "last_attempt": "2025-07-03T20:50:48.084Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1594,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-07-03T20:50:48.659Z",
    "first_attempt": null,
    "last_attempt": "2025-07-03T20:50:48.659Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1595,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Data Types",
    "slug": "leonids-data-types",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-07-03T21:35:57.069Z",
    "first_attempt": "2025-07-03T21:20:09.670Z",
    "last_attempt": "2025-07-03T21:35:57.069Z",
    "completed_code": "{'code': 'function createToy(name, category, ageRecommendation, isBatteryOperated, features, dimensions) {\\n    return {\\n        name,\\n        category,\\n        ageRecommendation,\\n        isBatteryOperated,\\n        features,\\n        dimensions\\n    };\\n}\\n\\n// TODO: Call createToy with the correct data types\\nconst myToy = createToy(\"Turbo Man\", \"Action Figure\", 8, true, [\"Retractable Wings, Catchphrases\"], { width: 3, height: 12 });\\nconsole.log(myToy)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1596,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Data Structures",
    "slug": "leonids-data-structures",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-07-03T22:31:49.919Z",
    "first_attempt": "2025-07-03T21:57:14.565Z",
    "last_attempt": "2025-07-03T22:31:49.919Z",
    "completed_code": "{'code': '\\n    const inventory = [\\n  { id: 101, name: \"Hand-Carved Wooden Train\", maker: \"Leonid\" },\\n  { id: 102, name: \"Painted Rocking Horse\", maker: \"Leonid\" },\\n  { id: 103, name: \"Stuffed Bear with Bow Tie\", maker: \"Leonid\" },\\n  { id: 104, name: \"Miniature Sailboat\", maker: \"Leonid\" },\\n  { id: 105, name: \"Patchwork Doll\", maker: \"Leonid\" },\\n  { id: 106, name: \"Wooden Puzzle Box\", maker: \"Leonid\" },\\n  { id: 107, name: \"Knitted Sock Monkey\", maker: \"Leonid\" },\\n  { id: 108, name: \"Spinning Top\", maker: \"Leonid\" },\\n  { id: 109, name: \"Tiny Puppet Theater\", maker: \"Leonid\" },\\n  { id: 110, name: \"Hand-Painted Marbles\", maker: \"Leonid\" },\\n  { id: 111, name: \"Fabric Kite with Tail\", maker: \"Leonid\" },\\n  { id: 112, name: \"Wool-Stuffed Bunny\", maker: \"Leonid\" },\\n  { id: 113, name: \"Wooden Xylophone\", maker: \"Leonid\" },\\n  { id: 114, name: \"Tin Wind-Up Robot\", maker: \"Leonid\" },\\n  { id: 115, name: \"Miniature Toy Chest\", maker: \"Leonid\" }\\n];\\n\\nfunction findToyById(toys, id) {\\n  // Your code here\\n    \\n    for (const toy of toys) {\\n        if (toy.id === id) {\\n            return toy\\n        }\\n    }\\n    \\n    return null;\\n}\\n\\nconst foundToy = findToyById(inventory, 101)\\nconsole.log(foundToy)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1597,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Representing Toys as Objects",
    "slug": "leonids-objects",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-04T16:04:27.161Z",
    "first_attempt": "2025-07-04T16:04:27.161Z",
    "last_attempt": "2025-07-04T16:04:27.161Z",
    "completed_code": "{'code': 'const woodenTrain = {\\n    name: \"Thomas\",\\n    manufacturer: \"Train Toys Inc.\",\\n    priceInDollars: 10,\\n    inStock: true,\\n    recommendedAgeRange: null,\\n    weightInGrams: 40\\n}\\n\\nconst stuffedRabbit = {\\n    name: \"Thumper\",\\n    manufacturer: \"Leonid\\'s Toys\",\\n    priceInDollars: 12,\\n    inStock: false,\\n    recommendedAgeRange: null,\\n    weightInGrams: 25\\n}\\n\\nconst kite = {\\n    name: null,\\n    manufacturer: \"Kites Galore\",\\n    priceInDollars: 15,\\n    inStock: true,\\n    recommendedAgeRange: \"10 and up\",\\n    weightInGrams: 10\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1598,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Toy Collection",
    "slug": "leonids-arrays",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-04T16:12:09.417Z",
    "first_attempt": "2025-07-04T16:12:09.417Z",
    "last_attempt": "2025-07-04T16:12:09.418Z",
    "completed_code": "{'code': 'const toyInventory = [\\n\\n    {\\n        id: 1,\\n        name: \"G.I. Joe\",\\n        manufacturer: \"Hasbro\",\\n        priceInDollars: 10,\\n        batteryType: null\\n    },\\n    {\\n        id: 2,\\n        name: \"Stormtrooper\",\\n        manufacturer: \"Hasbro\",\\n        priceInDollars: 7\\n    },\\n    {\\n        id: 3,\\n        name: \"Stretch Armstrong\",\\n        manufacturer: \"Kenner\",\\n        priceInDollars: 7\\n    }\\n\\n]'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1599,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Displaying Toy Properties",
    "slug": "leonids-iteration",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-04T16:28:11.048Z",
    "first_attempt": "2025-07-04T16:28:01.095Z",
    "last_attempt": "2025-07-04T16:28:11.048Z",
    "completed_code": "{'code': 'const toyInventory = [\\n    {\\n        name: \"Wooden Train\",\\n        priceInDollars: 5\\n    },\\n    {\\n        name: \"Stuffed Rabbit\",\\n        priceInDollars: 12\\n    },\\n    {\\n        name: \"Painted Kite\",\\n        priceInDollars: 10\\n    }\\n]\\n\\nfor (const toy of toyInventory) {\\n    console.log(toy.name)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1600,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "New Toys",
    "slug": "leonids-arrays-push",
    "attempts": 14,
    "complete": true,
    "completed_on": "2025-07-04T21:55:09.309Z",
    "first_attempt": "2025-07-04T16:49:31.982Z",
    "last_attempt": "2025-07-04T21:55:09.309Z",
    "completed_code": "{'code': 'const toyInventory = [];\\n\\ntoyInventory.push(\"Wooden Train\");\\ntoyInventory.push(\"Stuffed Rabbit\");\\ntoyInventory.push(\"Painted Kite\");\\n\\nconsole.log(toyInventory);\\n\\nconst toyInventoryCollection = [];\\n\\ntoyInventoryCollection.push({\\n    name: \"Wooden Train\",\\n    priceInDollars: 30\\n});\\n\\ntoyInventoryCollection.push({\\n    name: \"Stuffed Rabbit\",\\n    priceInDollars: 25\\n});\\n\\ntoyInventoryCollection.push({\\n    name: \"Painted Kite\",\\n    priceInDollars: 20\\n});\\n\\nfor (const toy of toyInventoryCollection) {\\n    console.log(toy.name)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1601,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-04T18:15:40.287Z",
    "first_attempt": "2025-07-04T18:15:40.286Z",
    "last_attempt": "2025-07-04T18:15:40.287Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) \\n{\\n    console.log(\"Yoga was fun today.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1602,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-04T20:18:09.202Z",
    "first_attempt": "2025-07-04T20:18:09.202Z",
    "last_attempt": "2025-07-04T20:18:09.202Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) \\n{\\n    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sandals\"\\n}\\n\\nelse if (temperature <95 && temperature >=75)\\n{\\n    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\" \\n    footWear = \"Sneakers\"\\n}\\n\\nelse if (temperature <75 &&  temperature >= 50)\\n{\\n    torsoClothing =\"Sweater\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\n\\nelse if (temperature <50 && temperature >= 35)\\n{\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\n\\nelse\\n{\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Boots\"\\n}\\n\\nconsole.log(`This is what I\\'m wearing today:\\n${torsoClothing} on my torso\\n${legClothing} on my legs\\n${footWear} on my feet`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1603,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-04T20:21:27.920Z",
    "first_attempt": "2025-07-04T20:21:27.919Z",
    "last_attempt": "2025-07-04T20:21:27.920Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\n    let total = 0\\n      // 2. Loop through all prices in the array and add each to total\\n    for (const price of prices) {\\n        total += price\\n    }\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\n    if  (total > 100) {\\n        return total * 0.9\\n    }\\n      // 4. Return the final total\\n    return total\\n  }\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\nconst prices = [22, 11, 33, 44, 55]\\n  // 2. Store the return value in a variable\\nconst totalPrice = calculateCartTotal(prices)\\n  // 3. Log the variable to the console\\n  console.log(`Total: ${totalPrice}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1604,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-04T20:51:40.924Z",
    "first_attempt": "2025-07-04T20:49:20.777Z",
    "last_attempt": "2025-07-04T20:51:40.924Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    return time * 100 + targets * 50\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    if (targets > 10) {\\n        return 1000\\n    } else {\\n        return 0\\n    }\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n    const points = calculateBasePoints(time, targets)\\n    const bonus = calculateBonus(targets)\\n    // Add the results together and return the sum\\n    return total = points + bonus\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\nconst score = calculateFinalScore(2, 5);\\nconsole.log(`The final score is ${score}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1605,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Undefined",
    "slug": "functions-review",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-07-06T21:46:28.228Z",
    "first_attempt": "2025-07-04T21:38:10.886Z",
    "last_attempt": "2025-07-06T21:46:28.228Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  if (time === \"morning\" || name.startsWith(\"A\")) {\\n    return `Good morning, ${name}!`\\n  }\\n  // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  if (time === \"afternoon\") {\\n    return `Good afternoon, ${name}!`\\n  }\\n  // Otherwise, return \"Hello, [name]!\"\\n  return `Hello, ${name}!`\\n}\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  // If topic is \"weather\", return the weather joke\\n  if (topic === \"weather\") {\\n    return \"What do you call a stormy robot? A thunder-bot!\"\\n  }\\n  // If topic is \"animals\", return the animals joke\\n  if (topic === \"animals\") {\\n    return \"Why did the robot go to the zoo? To study creature features!\"\\n  }\\n  // Otherwise, return the default joke\\n  return \"Why was the robot tired? Because it had too many bytes!\"\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n  const allGreetings = [];\\n\\n  // Loop through each person in the people array\\n  for (const person of people) {\\n    // Create a greeting for each person\\n    const personGreeting = createGreeting(person, time);\\n\\n    // Add the greeting to the array\\n    allGreetings.push(personGreeting);\\n  }\\n\\n  // Return the array of greetings\\n  return allGreetings;\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n  // Get the joke\\n  // Return both together\\n  const greeting = createGreeting(name, time)\\n  const joke = tellJoke(topic)\\n\\n  return greeting + \" \" + joke\\n\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1606,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "HTML Elements",
    "slug": "css-basics",
    "attempts": 328,
    "complete": true,
    "completed_on": "2025-07-04T22:01:05.936Z",
    "first_attempt": "2025-07-04T21:48:56.464Z",
    "last_attempt": "2025-07-04T22:01:05.936Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: lightblue;\\n}\\n\\n/* Add your CSS styles here */\\n\\narticle {\\n  border: 1px solid black;\\n  padding: 1rem;\\n}\\n\\np {\\n  color: purple;\\n}\\n\\nimg {\\n  height: 10rem\\n}'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1607,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Helping Customers Find the Right Toy",
    "slug": "leonids-conditionals",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-04T22:05:48.396Z",
    "first_attempt": "2025-07-04T22:00:58.599Z",
    "last_attempt": "2025-07-04T22:05:48.396Z",
    "completed_code": "{'code': '// Define the phones array\\nconst phones = [\\n  {\\n    id: 1,\\n    name: \"iPhone\",\\n    maker: \"Apple, Inc.\",\\n    operatingSystem: \"iOS\",\\n    price: 900,\\n    weight: 1.2\\n  },\\n  {\\n    id: 2,\\n    name: \"Galaxy\",\\n    maker: \"Samsung\",\\n    operatingSystem: \"Android\",\\n    price: 600,\\n    weight: 1.4\\n  },\\n  {\\n    id: 3,\\n    name: \"Pixel\",\\n    maker: \"Google\",\\n    operatingSystem: \"Android\",\\n    price: 750,\\n    weight: 1.3\\n  }\\n]\\n\\nconst phoneToFind = 2\\n\\nfor (const phone of phones) {\\n    // Only one phone will cause the condition below to evaluate to true\\n    if (phone.id === phoneToFind) {\\n        phone.weight = phone.weight + 0.4\\n        const formattedWeight = phone.weight.toFixed(2);\\n        console.log(`The ${phone.maker} ${phone.name} costs ${phone.price} dollars. It weighs ${formattedWeight} grams.`)\\n    }\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1608,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "CSS Basics",
    "slug": "css-selectors",
    "attempts": 220,
    "complete": true,
    "completed_on": "2025-07-04T22:08:53Z",
    "first_attempt": "2025-07-04T22:01:08.971Z",
    "last_attempt": "2025-07-04T22:08:53Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\np {\\n  font-weight: bold;\\n}\\n\\nh1 {\\n  text-align: center\\n}\\n\\nh2 {\\n  color: blue;\\n  text-align: center\\n}\\n\\n.example {\\n  color: red;\\n}\\n\\n#main-header {\\n  padding: 10px;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1609,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Toy Catalog",
    "slug": "leonids-string-interpolation",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-04T22:21:41.001Z",
    "first_attempt": "2025-07-04T22:17:20.303Z",
    "last_attempt": "2025-07-04T22:21:41.001Z",
    "completed_code": "{'code': 'const toyCatalog = [\\n    { \\n        name: \"Wooden Train\", \\n        priceInDollars: 30, \\n        color: \"Red\" \\n    },\\n    { \\n        name: \"Stuffed Rabbit\", \\n        priceInDollars: 25, \\n        color: \"Gray\" \\n    },\\n    { \\n        name: \"Painted Kite\", \\n        priceInDollars: 20, \\n        color: \"Blue\" \\n    }\\n];\\n\\nconst displayCatalog = [\\n\\n];\\n\\nfor (const toy of toyCatalog) {\\n    displayCatalog.push(`Toy: ${toy.name} | Price: $${toy.priceInDollars} | Color: ${toy.color}`)\\n};\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1610,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Raising Prices",
    "slug": "leonids-iteration-update",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-07-04T22:38:51.132Z",
    "first_attempt": "2025-07-04T22:27:27.394Z",
    "last_attempt": "2025-07-04T22:38:51.132Z",
    "completed_code": "{'code': 'const toyCatalog = [\\n  { name: \"Wooden Train\", priceInDollars: 30, color: \"Red\" },\\n  { name: \"Stuffed Rabbit\", priceInDollars: 25, color: \"Gray\" },\\n  { name: \"Painted Kite\", priceInDollars: 20, color: \"Blue\" }\\n];\\n\\nconst displayCatalog = [];\\n\\nfor (const toy of toyCatalog) {\\n    increasedPrice = toy.priceInDollars * 1.05\\n    const formattedPrice = increasedPrice.toFixed(2)\\n    displayCatalog.push(`Toy: ${toy.name} | Price: $${formattedPrice} | Color: ${toy.color}`)\\n}\\n\\nconsole.log(displayCatalog)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1611,
  "fields": {
    "learner_github_id": "213261719",
    "learner_name": "James Heaton",
    "title": "Finding the Flowers",
    "slug": "flower-shop",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-07-05T15:34:14.991Z",
    "first_attempt": "2025-07-05T05:16:39.721Z",
    "last_attempt": "2025-07-05T15:34:14.991Z",
    "completed_code": "{'code': '\\nconst flowers = [\\n    {\\n        id: 1,\\n        type: \"Rose\",\\n        colors: [\"White\", \"Red\", \"Violet\", \"Pink\", \"Black\", \"Yellow\"],\\n        price: 2.59,\\n        usdaZones: [3, 4, 5, 6, 7, 8, 9, 10]\\n    },\\n    {\\n        id: 2,\\n        type: \"Tulip\",\\n        colors: [\"Orange\", \"White\", \"Yellow\", \"Violet\", \"Red\"],\\n        price: 1.04,\\n        usdaZones: [5, 6, 7, 8, 9]\\n    },\\n    {\\n        id: 3,\\n        type: \"Daisy\",\\n        colors: [\"Gold\", \"White\", \"Orange\", \"Crimson\"],\\n        price: 0.89,\\n        usdaZones: [3, 4, 5, 6, 7, 8]\\n    },\\n    {\\n        id: 4,\\n        type: \"Carnation\",\\n        colors: [\"Peach\", \"Yellow\", \"Magenta\", \"Pink\", \"Coral\"],\\n        price: 1.59,\\n        usdaZones: [5, 6, 7, 8, 9]\\n    },\\n    {\\n        id: 5,\\n        type: \"Bird of Paradise\",\\n        colors: [\"Orange\", \"White\"],\\n        price: 2.33,\\n        usdaZones: [9, 10, 11]\\n    },\\n    {\\n        id: 6,\\n        type: \"Delphinium\",\\n        colors: [\"Blue\", \"Violet\", \"White\", \"Pink\"],\\n        price: 1.67,\\n        usdaZones: [3, 4, 5, 6, 7]\\n    },\\n    {\\n        id: 7,\\n        type: \"Gladiolus\",\\n        colors: [\"White\", \"Cream\", \"Yellow\", \"Red\", \"Pink\", \"Green\", \"Lavender\", \"Voilet\"],\\n        price: 1.85,\\n        usdaZones: [6, 7, 8, 9, 10]\\n    },\\n    {\\n        id: 8,\\n        type: \"Lilly\",\\n        colors: [\"White\", \"Yellow\", \"Orange\", \"Red\", \"Pink\", \"Lavender\"],\\n        price: 1.52,\\n        usdaZones: [3, 4, 5, 6, 7, 8, 9]\\n    },\\n    {\\n        id: 9,\\n        type: \"Chinese Lantern\",\\n        colors: [\"Orange\"],\\n        price: 2.33,\\n        usdaZones: [3, 4, 5, 6, 7, 8, 9]\\n    }\\n]\\n\\n/*\\n    Below are some functions, in which you will write ALL of your\\n    code. Do not modify the code that defines the functions, and\\n    do not write any code outside of the functions.\\n*/\\n\\n\\n/*\\n    This function should return inexpensive flowers - ones that cost\\n    less than 2.00 per flower.\\n*/\\nconst inexpensiveFlowers = () => {\\n    let filteredFlowers = []  // Do not modify\\n\\n    for (const flower of flowers) {\\n      if (flower.price < 2) {\\n        filteredFlowers.push(flower)\\n      }\\n    }\\n\\n    // Write your algorithm first, and then your code. Feel free to remove this comment\\n\\n\\n\\n    return filteredFlowers  // Do not modify\\n\\n}\\n\\n\\n\\n/*\\n    This function should return flowers that grow in\\n    USDA zones of 3 and 8.\\n*/\\nconst zoneFlowers = () => {\\n    let filteredFlowers = []  // Do not modify\\n\\n    for (const flower of flowers) {\\n      if (flower.usdaZones.includes(3) && flower.usdaZones.includes(8)) {\\n        filteredFlowers.push(flower)\\n      }\\n    }\\n\\n    // Write your algorithm first, and then your code. Feel free to remove this comment\\n\\n\\n\\n\\n    return filteredFlowers  // Do not modify\\n}\\n\\n\\n\\n/*\\n    This function should return flowers that come in the color Orange\\n*/\\nconst orangeFlowers = () => {\\n    let filteredFlowers = []  // Do not modify\\n\\n    for (const flower of flowers) {\\n      if (flower.colors.includes(\"Orange\")) {\\n        filteredFlowers.push(flower)\\n      }\\n    }\\n\\n    // Write your algorithm first, and then your code. Feel free to remove this comment\\n\\n\\n\\n\\n    return filteredFlowers  // Do not modify\\n}\\n\\n\\n\\n/*\\n    This function should return an HTML representation of each flower.\\n\\n    Expected string format:\\n        <article>\\n            <h1>Bird of Paradise</h1>\\n\\n            <h2>Colors</h2>\\n            <section>White</section>\\n            <section>Orange</section>\\n\\n            <h2>USDA Zones</h2>\\n            <div>9</div>\\n            <div>10</div>\\n            <div>11</div>\\n        </article>\\n*/\\nconst flowersAsHTML = () => {\\n    let flowersHTMLString = \"\"  // Do not modify\\n\\n    for (const flower of flowers) {\\n        flowersHTMLString += `<article>`\\n        flowersHTMLString += `<h1>${flower.type}</h1>`\\n        flowersHTMLString += `<h2>Colors</h2>`\\n        \\n        // Add colors section here (you\\'ll need another loop)\\n        for (const color of flower.colors) {\\n          flowersHTMLString += `<section>${color}</section>`\\n        }\\n\\n        flowersHTMLString += `<h2>USDA Zones</h2>`\\n\\n        // Add zones section here (you\\'ll need another loop)\\n        for (const zone of flower.usdaZones) {\\n          flowersHTMLString += `<div>${zone}</div>`\\n        }\\n\\n        flowersHTMLString += `</article>`\\n    }\\n\\n    /*\\n        Algorithmic thinking is most important on this one.\\n        We would rather see the correct algorithm than the\\n        correct code. If you have code that works, but no\\n        algorithm, then you failed the exercise.\\n    */\\n    return flowersHTMLString  // Do not modify\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1612,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 287,
    "complete": true,
    "completed_on": "2025-07-05T23:52:52.063Z",
    "first_attempt": "2025-07-05T23:38:31.074Z",
    "last_attempt": "2025-07-05T23:52:52.063Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n    <div class=\"flex-container\">\\n  <div class=\"item\">1</div>\\n  <div class=\"item\">2</div>\\n  <div class=\"item\">3</div>\\n</div>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links {\\n  list-style: none;\\n  display: flex;\\n  flex-direction: row, column;\\n  justify-content: space-evenly;\\n  background-color: green;\\n  padding: 15px;\\n\\n}\\n\\n.flex-container {\\n  display: flex;\\n  /* Try changing to: row-reverse, column, or column-reverse */\\n  flex-direction: row;\\n  background-color: #f0f0f0;\\n  padding: 10px;\\n}\\n\\n.item {\\n  background-color: #3498db;\\n  color: white;\\n  padding: 20px;\\n  margin: 10px;\\n  text-align: center;\\n}\\n\\n/* Make the navbar a flex container and style it */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1613,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-container",
    "attempts": 181,
    "complete": true,
    "completed_on": "2025-07-06T00:28:11.543Z",
    "first_attempt": "2025-07-05T23:52:53.832Z",
    "last_attempt": "2025-07-06T00:28:11.543Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  font-size: 0.8rem;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n}\\n\\n/* Add your flexbox container properties below */\\n\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  gap: 30px;\\n}'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1614,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-07-06T16:26:11.003Z",
    "first_attempt": "2025-07-06T16:19:51.758Z",
    "last_attempt": "2025-07-06T16:26:11.003Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\nconst makeGreeting = (name) => `Hello, ${name}!`\\n\\n\\n// Invoke the function and assign the return value to a variable\\nconst greeting = makeGreeting(\"Hello, John!\")\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(greeting)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1615,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-07-06T16:38:43.034Z",
    "first_attempt": null,
    "last_attempt": "2025-07-06T16:38:43.034Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1616,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-07-06T16:38:44.108Z",
    "first_attempt": null,
    "last_attempt": "2025-07-06T16:38:44.108Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1617,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-07-06T16:38:45.029Z",
    "first_attempt": null,
    "last_attempt": "2025-07-06T16:38:45.029Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1618,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-07-06T16:38:45.759Z",
    "first_attempt": null,
    "last_attempt": "2025-07-06T16:38:45.759Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1619,
  "fields": {
    "learner_github_id": "213532389",
    "learner_name": "McKenney Leavell",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 1558,
    "complete": true,
    "completed_on": "2025-07-06T17:53:24.952Z",
    "first_attempt": "2025-07-06T00:28:13.696Z",
    "last_attempt": "2025-07-06T17:53:24.952Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n/* Add your flexbox properties below */\\n.navbar {\\n  display: flex;\\n  background-color: lightblue;\\n  padding: 15px;\\n  flex-direction: row, column;\\n  \\n}\\n\\n.nav-links {\\n  list-style: none;\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.container {\\n  display: flex;\\n  flex-direction: row;\\n  padding: 15px;\\n  align-items: \\n}\\n\\n.card {\\n  display: flex;\\n  flex-direction: row, column;\\n  background-color: lightgreen;\\n  padding: 10px;\\n  margin: 20px;\\n  text-align: center;\\n  flex: 1 1 auto\\n}\\n\\n.sidebar {\\n  flex: 2 2 auto\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1620,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-06T18:37:41.555Z",
    "first_attempt": "2025-07-06T18:36:25.937Z",
    "last_attempt": "2025-07-06T18:37:41.555Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\n\\ntotalPhotos = malePhotos + femalePhotos\\n\\n// Determine storage type based on total\\n\\nif(totalPhotos > 110)\\n{\\n    photoStorage = \"Photo Album\"\\n}\\nelse if(totalPhotos >= 50)\\n{\\n    photoStorage = \"Shoe box\"\\n}\\nelse\\n{\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\n\\nif(femalePhotos > malePhotos)\\n{\\n    albumColor = \"plum\"\\n}\\nelse\\n{\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1621,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-06T18:57:50.483Z",
    "first_attempt": "2025-07-06T18:57:50.482Z",
    "last_attempt": "2025-07-06T18:57:50.483Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\",\"Orange\",\"Apple\",\"Watermelon\",\"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1622,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-06T19:01:53.459Z",
    "first_attempt": "2025-07-06T19:01:53.459Z",
    "last_attempt": "2025-07-06T19:01:53.459Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1623,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-06T19:09:26.025Z",
    "first_attempt": "2025-07-06T19:08:32.420Z",
    "last_attempt": "2025-07-06T19:09:26.025Z",
    "completed_code": "{'code': 'const topics = [\"Variables\",\"Loops\",\"Arrays\",\"Functions\",\"Objects\",\"Modules\",\"Events\"  ]\\n\\nfor (const subject of topics) \\n{\\n    console.log(subject)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1624,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-06T19:18:04.862Z",
    "first_attempt": "2025-07-06T19:17:51.552Z",
    "last_attempt": "2025-07-06T19:18:04.862Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const mug of clay) \\n{\\n   const mug = `coffee mug`\\n   toFireInKiln.push(mug)\\n\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1625,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Undefined",
    "slug": "arrays-conditions",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-08-14T16:02:33.196Z",
    "first_attempt": "2025-07-06T19:26:57.871Z",
    "last_attempt": "2025-08-14T16:02:33.196Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  if (ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\")\\n  }\\n  else if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n  }\\n  else if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\")\\n  }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1626,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Undefined",
    "slug": "functions-scope-basics",
    "attempts": 5,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-07-07T02:53:32.604Z",
    "last_attempt": "2025-07-29T03:54:53.818Z",
    "completed_code": "False",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1627,
  "fields": {
    "learner_github_id": "186857286",
    "learner_name": "Darren Raines",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-08T00:02:43.864Z",
    "first_attempt": "2025-07-08T00:02:43.862Z",
    "last_attempt": "2025-07-08T00:02:43.864Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 155\\nlet marchBill = 165\\nlet aprilBill = 175\\nlet mayBill = 185\\nlet juneBill = 195\\nlet julyBill = 205\\nlet augustBill = 215\\nlet septemberBill = 225\\nlet octoberBill = 235\\nlet novemberBill = 245\\nlet decemberBill = 255\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1628,
  "fields": {
    "learner_github_id": "186857286",
    "learner_name": "Darren Raines",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-08T00:30:22.171Z",
    "first_attempt": "2025-07-08T00:30:22.169Z",
    "last_attempt": "2025-07-08T00:30:22.171Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"MacBook Pro M3\"\\nconst phone = \"Iphone 15 Pro\"\\nconst television = \"Samsung 65-inch QLED\"\\nconst refrigerator = \"GE Profile Series\"\\n\\n/*\\nExample String Interpolation\\nDefine Variables for strings\\nconst gameConsole = \"Sony Playstation\"\\nconst computer = \"2017 Macbook Pro\"\\n\\nInterpolation example\\nconst gameSystems = `I play games on my ${gameConsole} and my ${computer}`\\nconsole.log(gameSystems)\\n*/\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television} television, my ${computer} computer, my ${refrigerator} refrigerator, my ${phone} phone`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1629,
  "fields": {
    "learner_github_id": "186857286",
    "learner_name": "Darren Raines",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-08T02:18:24.339Z",
    "first_attempt": "2025-07-08T02:13:52.866Z",
    "last_attempt": "2025-07-08T02:18:24.339Z",
    "completed_code": "{'code': \"// Define a variable for your monthly income\\nconst myIncome = 4388\\n\\n// Define a variable for your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Define a variables for your monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Define a variable to calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - internetBill\\n\\n// Now use the -= operator to subtract the other expenses from combinedIncome\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1630,
  "fields": {
    "learner_github_id": "186857286",
    "learner_name": "Darren Raines",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-07-08T03:58:10.616Z",
    "first_attempt": "2025-07-08T03:30:34.235Z",
    "last_attempt": "2025-07-08T03:58:10.616Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses;\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\nconsole.log(statement)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1631,
  "fields": {
    "learner_github_id": "186857286",
    "learner_name": "Darren Raines",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-08T04:59:02.396Z",
    "first_attempt": "2025-07-08T04:57:35.952Z",
    "last_attempt": "2025-07-08T04:59:02.396Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\nconsole.log(email.trim())\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\nconsole.log(phone.replace(\" \", \"-\"))\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\nconsole.log(customerName.toUpperCase())\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\nconsole.log(password.includes(\"x\"))\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\nconsole.log(filename.slice(0, 4))\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1632,
  "fields": {
    "learner_github_id": "186857286",
    "learner_name": "Darren Raines",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-08T05:26:02.625Z",
    "first_attempt": "2025-07-08T05:25:01.273Z",
    "last_attempt": "2025-07-08T05:26:02.625Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n} false\\n\\nconsole.log(iWokeUpEarly)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1633,
  "fields": {
    "learner_github_id": "186857286",
    "learner_name": "Darren Raines",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-07-08T06:11:43.731Z",
    "first_attempt": "2025-07-08T05:57:29.242Z",
    "last_attempt": "2025-07-08T06:11:43.731Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\n\\nif (temperature >= 95) {\\n    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sandals\"\\n}\\n\\n// Add your code here\\n\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"Sweater\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Boots\"\\n}\\n\\nconsole.log(`This is what I\\'m wearing today:\\n${torsoClothing} on my torso\\n${legClothing} on my legs\\n${footWear} on my feet\\n`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1634,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 364,
    "complete": true,
    "completed_on": "2025-07-09T12:40:03.398Z",
    "first_attempt": "2025-07-09T12:29:28.598Z",
    "last_attempt": "2025-07-09T12:40:03.398Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n  <h1>How I Became A Software Developer</h1>\\n\\n  <article>\\n    <h2>Nashville Software School</h2>\\n\\n    <section>\\n      <p>My journey into software development began when I enrolled at Nashville Software School. The instructors were amazing and the curriculum was challenging but rewarding.</p>\\n    </section>\\n\\n    <section>\\n      <p>I learned the following skills</p>\\n      <ol>\\n        <li>Variables</li>\\n        <li>Arrays</li>\\n        <li>Objects</li>\\n        <li>Functions</li>\\n        <li>HTML</li>\\n        <li>CSS</li>\\n      </ol>\\n    </section>\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1635,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "HTML Elements",
    "slug": "html-elements",
    "attempts": 553,
    "complete": true,
    "completed_on": "2025-07-09T12:50:17.394Z",
    "first_attempt": "2025-07-09T12:40:38.354Z",
    "last_attempt": "2025-07-09T12:50:17.394Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n  \\n  <main>\\n    <article>\\n      <h1>John Gardner</h1>\\n      <section>\\n        <p>John Gardner is an award winning multi-instrumentalist who now wants to make a career in Software Development.</p>\\n      </section>\\n      <section>\\n        <p>He wants to add another skill to his name. He\\'s always had an interest in Software and now he is fulfilling that interest.</p>\\n      </section>\\n    </article>\\n  </main>\\n\\n  <footer>\\n    <p>John Gardner, 2025 jtgardner99@gmail.com</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1636,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 129,
    "complete": true,
    "completed_on": "2025-07-09T22:23:21.142Z",
    "first_attempt": "2025-07-09T12:50:27.963Z",
    "last_attempt": "2025-07-09T22:23:23.039Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: lightblue;\\n}\\n\\n/* Add your CSS styles here */\\n\\narticle {\\n  border: 1px solid black;\\n  padding: 1rem;\\n}\\n\\np {\\n  color: purple;\\n}\\n\\nimg {\\n  height: 10rem;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1637,
  "fields": {
    "learner_github_id": "186857286",
    "learner_name": "Darren Raines",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-07-09T18:24:11.944Z",
    "first_attempt": "2025-07-09T18:10:39.283Z",
    "last_attempt": "2025-07-09T18:24:11.944Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1638,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "CSS Selectors",
    "slug": "css-selectors",
    "attempts": 561,
    "complete": true,
    "completed_on": "2025-07-09T22:43:21.287Z",
    "first_attempt": "2025-07-09T22:23:32.754Z",
    "last_attempt": "2025-07-09T22:43:21.287Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\n#main-header {\\n  font-family: sans-serif;\\n  background-color: #d2691e;\\n  padding: .5rem 1rem;\\n  color: #fff;\\n  \\n}\\n\\nnav {\\n  background-color: #f5f5dc;\\n  padding: 5px 0;\\n  text-align: left;\\n}\\n\\nmain {\\n  background-color: #d2691e;\\n  text-align: left;\\n  color: #fff;\\n  padding-top: 1rem;\\n  padding-left: 1rem;\\n}\\n\\n.features {\\n  text-align: left;\\n\\n}\\n\\n#practice {\\n  text-align: left;\\n  padding-bottom: 1rem;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1639,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Introduction to Flexbox",
    "slug": "flexbox-intro",
    "attempts": 215,
    "complete": true,
    "completed_on": "2025-07-09T22:49:24.775Z",
    "first_attempt": "2025-07-09T22:43:24.062Z",
    "last_attempt": "2025-07-09T22:49:24.775Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links {\\n  list-style: none;\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-evenly;\\n  background-color: #5f9ea0;\\n  padding: 1rem;\\n  \\n}\\n\\n/* Make the navbar a flex container and style it */\\n\\nnav {\\n  \\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1640,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-container",
    "attempts": 122,
    "complete": true,
    "completed_on": "2025-07-09T23:01:22.524Z",
    "first_attempt": "2025-07-09T22:49:30.494Z",
    "last_attempt": "2025-07-09T23:01:22.524Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Base styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n/* Card styles */\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.card h3 {\\n  margin-top: 0;\\n  color: #2c3e50;\\n}\\n\\n/* Flexbox container properties */\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  align-items: flex-start;\\n  gap: 20px;\\n  padding: 10px;\\n}\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1641,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Flexbox Item Properties",
    "slug": "flexbox-items",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-07-09T23:01:02.228Z",
    "last_attempt": "2025-07-09T23:01:02.279Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1642,
  "fields": {
    "learner_github_id": "217277685",
    "learner_name": "Jack Gardner",
    "title": "Flexbox Item Properties",
    "slug": "flexbox-items",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-07-09T23:01:02.228Z",
    "last_attempt": "2025-07-09T23:01:02.228Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1643,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-10T21:52:09.823Z",
    "first_attempt": "2025-07-10T21:50:37.128Z",
    "last_attempt": "2025-07-10T21:52:09.823Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nlet februaryBill = 130\\nlet marchBill = 135\\nlet aprilBill = 140\\nlet mayBill = 90\\nlet juneBill = 100\\nlet julyBill = 125\\nlet augustBill = 122\\nlet septemberBill = 144\\nlet octoberBill = 130\\nlet novemberBill = 122\\nlet decemberBill = 140\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1644,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-10T21:59:50.835Z",
    "first_attempt": "2025-07-10T21:59:40.219Z",
    "last_attempt": "2025-07-10T21:59:50.835Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Macbook Pro\"\\nconst phone = \"Google pixel\"\\nconst television = \"Samsung\"\\nconst refrigerator = \"GE\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1645,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-07-10T22:49:02.476Z",
    "first_attempt": "2025-07-10T22:08:03.864Z",
    "last_attempt": "2025-07-10T22:49:02.476Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome\\ncombinedIncome += spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome += combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1646,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-07-10T22:52:30.675Z",
    "first_attempt": "2025-07-10T22:26:25.587Z",
    "last_attempt": "2025-07-10T22:52:30.675Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${myIncome + spouseIncome - phoneBill - mortgage - carInsurance - healthInsurance}.`\\n\\nconsole.log(statement);  // Use backticks and calculations here'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1647,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-10T22:45:48.554Z",
    "first_attempt": "2025-07-10T22:42:59.196Z",
    "last_attempt": "2025-07-10T22:45:48.554Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1648,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-10T22:55:07.290Z",
    "first_attempt": "2025-07-10T22:55:07.289Z",
    "last_attempt": "2025-07-10T22:55:07.290Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse {\\n    console.log(\"Netflix was fun today.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1649,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-10T23:08:01.751Z",
    "first_attempt": "2025-07-10T23:06:05.589Z",
    "last_attempt": "2025-07-10T23:08:01.751Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    // Add your code here\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\nelse {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\"\\n}\\n\\nconsole.log(`I need to wear ${torsoClothing}, ${legClothing}, ${footWear}`)\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1650,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-10T23:17:57.268Z",
    "first_attempt": "2025-07-10T23:17:57.266Z",
    "last_attempt": "2025-07-10T23:17:57.268Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\n\\ntotalPhotos = femalePhotos + malePhotos\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n}\\nelse if (totalPhotos < 110 && totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n}\\nelse {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\n\\nif (malePhotos > femalePhotos) {\\n    albumColor = \"gray\"\\n}\\nelse {\\n    albumColor = \"plum\"\\n}\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1651,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-10T23:20:00.797Z",
    "first_attempt": "2025-07-10T23:20:00.793Z",
    "last_attempt": "2025-07-10T23:20:00.797Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1652,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-10T23:35:40.149Z",
    "first_attempt": "2025-07-10T23:34:28.981Z",
    "last_attempt": "2025-07-10T23:35:40.149Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1653,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-10T23:39:32.080Z",
    "first_attempt": "2025-07-10T23:39:32.076Z",
    "last_attempt": "2025-07-10T23:39:32.080Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const topic of topics) {\\n  console.log(topic)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1654,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-10T23:45:30.484Z",
    "first_attempt": "2025-07-10T23:45:30.482Z",
    "last_attempt": "2025-07-10T23:45:30.484Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const pottery of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1655,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-10T23:52:07.784Z",
    "first_attempt": "2025-07-10T23:52:07.783Z",
    "last_attempt": "2025-07-10T23:52:07.784Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n    if (ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\")\\n    }\\n\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n\\n    else if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n    }\\n    else if (ingredient === \"potato\") {\\n        finishedFood.push(\"fries\")\\n    }\\n\\n}\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1656,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-07-10T23:52:31.490Z",
    "first_attempt": null,
    "last_attempt": "2025-07-10T23:52:31.490Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1657,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-07-10T23:52:32.841Z",
    "first_attempt": null,
    "last_attempt": "2025-07-10T23:52:32.841Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1658,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-07-10T23:52:33.961Z",
    "first_attempt": null,
    "last_attempt": "2025-07-10T23:52:33.961Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1659,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-07-10T23:52:34.831Z",
    "first_attempt": null,
    "last_attempt": "2025-07-10T23:52:34.831Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1660,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-10T23:55:56.502Z",
    "first_attempt": "2025-07-10T23:55:56.500Z",
    "last_attempt": "2025-07-10T23:55:56.502Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const month of monthlyExpenses) {\\n  totalExpense += month\\n  // Add the current monthly cost to the value of totalExpense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1661,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-11T00:01:28.913Z",
    "first_attempt": "2025-07-11T00:00:38.315Z",
    "last_attempt": "2025-07-11T00:01:28.913Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [10, 20, 15, 35, 40]\\n\\n// Declare a variable to store the total. Initial value is 0.c\\nlet totalMiles = 0 \\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (week of weeklyMiles) {\\n  totalMiles += week\\n\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles} miles each week. \\nI have driven a total of ${totalMiles}.`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1662,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-11T00:05:42.217Z",
    "first_attempt": "2025-07-11T00:05:42.215Z",
    "last_attempt": "2025-07-11T00:05:42.217Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours) {\\n  if (hour < 7) {\\n    grumpyHours.push(hour)\\n  }\\n  else {\\n    happyHours.push(hour)\\n  }\\n}\\n\\nconsole.log(`\\nI was grumpy on ${grumpyHours}\\nI was happy on ${happyHours}`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1663,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-11T00:21:33.703Z",
    "first_attempt": "2025-07-11T00:19:06.788Z",
    "last_attempt": "2025-07-11T00:21:33.703Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")) {\\n    light++\\n  }\\n  else if (coffee.includes(\"medium\")) {\\n    medium++\\n  }\\n  else if (coffee.includes(\"dark\") || coffee.includes(\"toasty\")) {\\n    toastyDark++\\n  }\\n  // Add your logic here\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `\\nI need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1664,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-07-11T00:41:16.717Z",
    "first_attempt": "2025-07-11T00:32:19.782Z",
    "last_attempt": "2025-07-11T00:41:16.717Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/ \\nconst disorderArray = disorders.split(\"|$|\")\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1665,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-11T01:21:48.502Z",
    "first_attempt": "2025-07-11T01:21:48.500Z",
    "last_attempt": "2025-07-11T01:21:48.502Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n        name: \"Jeremy Landy\",\\n        location: \"Phoenix, AR\",\\n        gender: \"male\",\\n        age: 31\\n\\n}\\n\\nconsole.log(student)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1666,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-11T20:19:29.688Z",
    "first_attempt": "2025-07-11T20:19:29.686Z",
    "last_attempt": "2025-07-11T20:19:29.688Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n        color: \"pink\",\\n        stemLength: 12,\\n        growingSeason: \"Spring\",\\n        thorny: false\\n\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n        color: \"red\",\\n        stemLength: 10,\\n        growingSeason: \"Summer\",\\n        thorny: true\\n\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1667,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-11T20:27:49.817Z",
    "first_attempt": "2025-07-11T20:26:04.095Z",
    "last_attempt": "2025-07-11T20:27:49.817Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\nfor (const appointmentObject of appointments){\\n        schedule += `Patient ${appointmentObject.firstName} ${appointmentObject.lastName} has an appointment at ${appointmentObject.appointmentTime}\\\\n`\\n}\\n\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1668,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-11T20:30:22.456Z",
    "first_attempt": "2025-07-11T20:30:22.455Z",
    "last_attempt": "2025-07-11T20:30:22.456Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1669,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-11T20:36:11.545Z",
    "first_attempt": "2025-07-11T20:36:11.544Z",
    "last_attempt": "2025-07-11T20:36:11.545Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor =book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy =book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1670,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-11T20:37:32.057Z",
    "first_attempt": "2025-07-11T20:37:32.057Z",
    "last_attempt": "2025-07-11T20:37:32.057Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\ngoldfish.location = \"Large Tank\"\\n\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1671,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-11T20:44:25.500Z",
    "first_attempt": "2025-07-11T20:42:48.078Z",
    "last_attempt": "2025-07-11T20:44:25.500Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\n\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1672,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-11T20:46:34.062Z",
    "first_attempt": "2025-07-11T20:46:34.061Z",
    "last_attempt": "2025-07-11T20:46:34.062Z",
    "completed_code": "{'code': '// Write your function here\\n\\nfunction greetPet () {\\n        console.log(`Good dog!`)\\n}\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1673,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-11T20:49:41.608Z",
    "first_attempt": "2025-07-11T20:47:59.391Z",
    "last_attempt": "2025-07-11T20:49:41.608Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n        console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\n\\ncelebrateScore()\\n\\ncelebrateScore()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1674,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-11T20:52:24.083Z",
    "first_attempt": "2025-07-11T20:52:24.083Z",
    "last_attempt": "2025-07-11T20:52:24.083Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreaterThan(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction showWelcome(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscount(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1675,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-11T20:54:38.059Z",
    "first_attempt": "2025-07-11T20:54:38.058Z",
    "last_attempt": "2025-07-11T20:54:38.059Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1676,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-11T20:57:11.855Z",
    "first_attempt": "2025-07-11T20:57:04.863Z",
    "last_attempt": "2025-07-11T20:57:11.855Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1677,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-11T20:59:51.131Z",
    "first_attempt": "2025-07-11T20:59:51.130Z",
    "last_attempt": "2025-07-11T20:59:51.131Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(playername, points) {\\n        console.log(`${playername} scored ${points} points!`)\\n}\\n\\n// Then invoke the function with different player names and scores\\n\\ndisplayGameScore(\"Mario\", 100)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1678,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-07-11T21:14:41.156Z",
    "first_attempt": "2025-07-11T21:10:22.203Z",
    "last_attempt": "2025-07-11T21:14:41.156Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\n\\n\\nconst add = (x, y) => x + y\\n\\n\\nconst greet = (name) => `Hello, ${name}!`\\n\\nconst getRandomNumber = () => Math.random()\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber()\\nconst greeting = greet(\"Nicole\")\\nconst sum = add(5, 6)\\n\\nconsole.log(random, greeting, sum)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1679,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-07-11T21:20:16.818Z",
    "first_attempt": "2025-07-11T21:18:45.590Z",
    "last_attempt": "2025-07-11T21:20:16.818Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\n\\nconst makeGreeting = (name) => {\\n        return `Hello, ${name}`\\n}\\n\\n// Invoke the function and assign the return value to a variable\\n\\nconst greeting = makeGreeting(\"Nicole\")\\n// Console log the variable you used above to see the greeting\\n\\nconsole.log(greeting)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1680,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-11T21:25:49.058Z",
    "first_attempt": "2025-07-11T21:25:49.057Z",
    "last_attempt": "2025-07-11T21:25:49.058Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\n\\nconst calculateSubtotal = (quanity, price) => {\\n        return quanity * price\\n}\\n// Create calculateTotal here\\n\\nconst calculateTotal = (subtotal) => {\\n        return (subtotal * 0.08) + subtotal\\n}\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\n\\nconst subtotal = calculateSubtotal(3, 4.99)\\n\\n// 2. Calculate the final total with tax\\n\\nconst total = calculateTotal(subtotal)\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $ ${subtotal}`)\\nconsole.log(`Total with tax: $${total}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1681,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-07-11T21:31:20.220Z",
    "first_attempt": "2025-07-11T21:31:03.671Z",
    "last_attempt": "2025-07-11T21:31:20.220Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\n\\nconst calculateGameScore = (base, multiplier) => {\\n        if ((base * multiplier) >= 1000) {\\n                return \"High Score!\"\\n        }\\n        else {\\n                return \"Keep trying!\"\\n        }\\n}\\n\\n  // Call your function with different values and store a result in a variable\\n\\nconst gamescore1 = calculateGameScore(20,10)\\nconst gamescore2 = calculateGameScore(100, 100)\\n  // Log the result to see the output\\nconsole.log(gamescore1)\\nconsole.log(gamescore2)\\n  '}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1682,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-07-11T22:21:52.340Z",
    "first_attempt": "2025-07-11T22:21:14.741Z",
    "last_attempt": "2025-07-11T22:21:52.340Z",
    "completed_code": "{'code': '// This code has scope problems!\\nlet score = 0\\n\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1683,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-07-11T22:30:39.171Z",
    "first_attempt": "2025-07-11T22:26:12.555Z",
    "last_attempt": "2025-07-11T22:30:39.171Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\n\\nconst checkHighScore = (playerName, score) => {\\n        if (score > highScore) {\\n                highScore = score\\n        return `${playerName} set the highscore to ${highScore}`\\n        }\\n        else {\\n        return `Highscore remained the same ${highScore}`\\n        }             \\n}\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\n\\nconsole.log(checkHighScore(\"Nicole\", 50))'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1684,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-07-11T22:41:22.907Z",
    "first_attempt": "2025-07-11T22:36:28.494Z",
    "last_attempt": "2025-07-11T22:41:22.907Z",
    "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\n        let ticketPrice = 10\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n        if (isWeekend) {\\n                ticketPrice += 2\\n        }\\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n        if (age < 12 || age >= 65){\\n                ticketPrice /= 2\\n        }\\n\\n      // 4. Return the final ticket price\\n      return ticketPrice\\n}\\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n\\n  // Example:\\n  // const adultWeekdayPrice = calculateTicketPrice(25, false);\\nconst adultWeekdayPrice = calculateTicketPrice(25, false)\\nconst adultWeekendPrice = calculateTicketPrice(25, true)\\nconsole.log(adultWeekdayPrice)\\nconsole.log(adultWeekendPrice)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1685,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-11T22:50:48.377Z",
    "first_attempt": "2025-07-11T22:47:49.149Z",
    "last_attempt": "2025-07-11T22:50:48.377Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\n        let total = 0\\n      // 2. Loop through all prices in the array and add each to total\\n        for (const price of prices) {\\n                total = total + price\\n        }\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\n        if (total > 100){\\n        discount = total * .1\\n        total = total - discount\\n        }       \\n      // 4. Return the final total\\n      return total\\n  }\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\nconst prices = [20, 30, 40]\\nconst testResult = calculateCartTotal(prices)\\nconsole.log(testResult)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1686,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Functions Calling Functions",
    "slug": "functions-calling-functions",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-07-11T23:10:19.396Z",
    "first_attempt": "2025-07-11T23:04:13.495Z",
    "last_attempt": "2025-07-11T23:25:15.629Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n       return time * 100 + targets * 50\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n       if (targets > 10) {\\n        return 1000\\n       }\\n       else {\\n        return 0\\n       }\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n        const basePoints = calculateBasePoints(time, targets)\\n        const bonusPoints = calculateBonus(targets)\\n    // Add the results together and return the sum\\n    return basePoints + bonusPoints\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\nconst test = calculateFinalScore(2, 5)\\nconsole.log(test)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1687,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Review and Practice",
    "slug": "functions-review",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-07-11T23:38:22.678Z",
    "first_attempt": "2025-07-11T23:18:17.827Z",
    "last_attempt": "2025-07-11T23:38:22.678Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  // Otherwise, return \"Hello, [name]!\"\\n        if (time === \"morning\" || name.startsWith(\"A\")){\\n                return `Good morning, ${name}!`\\n        }\\n        else if (time === \"afternoon\") {\\n                return `Good afternoon, ${name}!`\\n        }\\n        else {\\n                return `Hello, ${name}!`\\n        }\\n}\\n\\n\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  // If topic is \"weather\", return the weather joke\\n  // If topic is \"animals\", return the animals joke\\n  // Otherwise, return the default joke\\n        if (topic === \"weather\") {\\n                return \"What do you call a stormy robot? A thunder-bot!\"\\n        }     \\n        else if (topic === \"animals\") {\\n                return \"Why did the robot go to the zoo? To study creature features!\"\\n        } \\n        else {\\n                return \"Why was the robot tired? Because it had too many bytes!\"\\n        }\\n}\\n\\n\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n        // Create an empty array to store all the greetings\\n        const greetings = []\\n        // Loop through each person in the people array\\n        for (const person of people) {\\n         // Create a greeting for each person\\n                const greeting = createGreeting(person, time)\\n        // Add the greeting to the array\\n                greetings.push(greeting)\\n        }\\n        // Return the array of greetings\\n        return greetings;\\n\\n}\\n\\n\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n        const greeting = createGreeting(name, time)\\n  // Get the joke\\n        const joke = tellJoke(topic)\\n  // Return both together\\n        return `${greeting} ${joke}`\\n}\\n\\n\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1688,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Undefined",
    "slug": "html-intro",
    "attempts": 228,
    "complete": true,
    "completed_on": "2025-07-12T01:36:18.315Z",
    "first_attempt": "2025-07-11T23:38:27.509Z",
    "last_attempt": "2025-07-12T01:36:18.315Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n  <h1>How I Became A Software Developer</h1>\\n\\n  <article>\\n    <h2>Nashville Software School</h2>\\n\\n    <section>\\n      <p>My journey into software development began when I enrolled at Nashville Software School. The instructors were amazing and the curriculum was challenging but rewarding.</p>\\n    </section>\\n\\n    <section>\\n      <p>I learned the following skills</p>\\n      <ol>\\n        <li>Variables</li>\\n        <li>Arrays</li>\\n        <li>Objects</li>\\n        <li>Functions</li>\\n        <li>HTML</li>\\n        <li>CSS</li>\\n      </ol>\\n    </section>\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1689,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "HTML Elements",
    "slug": "html-elements",
    "attempts": 294,
    "complete": true,
    "completed_on": "2025-07-12T13:53:49.167Z",
    "first_attempt": "2025-07-12T13:49:55.681Z",
    "last_attempt": "2025-07-12T13:53:49.167Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <!-- Create your profile page here using semantic HTML elements -->\\n  <!-- Remember to include header with nav, main with article and sections, and a footer -->\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n\\n  <main>\\n    <article>\\n      <h1> My name is Nicole </h1>\\n\\n      <section> \\n        <p>I am a product manager at Novi Connect</p>\\n      </section>\\n\\n      <section>\\n        <p>I want to be a software developer to solve problems</p>\\n      </section>\\n    </article>\\n  </main>\\n\\n  <footer>\\n    <p>Nicole DAnton, 2025, nicoledanton7@gmail.com</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1690,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 135,
    "complete": true,
    "completed_on": "2025-07-12T14:03:18.366Z",
    "first_attempt": "2025-07-12T13:53:51.889Z",
    "last_attempt": "2025-07-12T14:03:18.366Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n \\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  background-color: lightblue;\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\narticle {\\nborder: 1px solid black;\\npadding: 1rem;\\n}\\np {\\ncolor: purple;\\n}\\nimg {\\nheight: 10rem;\\n}\\n\\n/* Add your CSS styles here */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1691,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "CSS Selectors",
    "slug": "css-selectors",
    "attempts": 120,
    "complete": true,
    "completed_on": "2025-07-13T17:35:30.734Z",
    "first_attempt": "2025-07-13T17:24:56.924Z",
    "last_attempt": "2025-07-13T17:35:30.734Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p class=\"highlight\">Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n#header {\\n  background-color: blue;\\n    color: white;\\n}\\n\\nh2 {\\n  color: #7FFFD4\\n}\\n.hightlight {\\n  background-color: yellow;\\n}\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1692,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "CSS Selectors",
    "slug": "flexbox-intro",
    "attempts": 39,
    "complete": true,
    "completed_on": "2025-07-13T17:40:29.205Z",
    "first_attempt": "2025-07-13T17:26:46.444Z",
    "last_attempt": "2025-07-13T17:40:29.205Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  display: flex;\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links {\\n  display: flex;\\n  flex-direction: column-reverse;\\n  list-style: none;\\n  justify-content: space-evenly;\\n}\\n\\n/* Make the navbar a flex container and style it */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1693,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-container",
    "attempts": 76,
    "complete": true,
    "completed_on": "2025-07-13T17:43:29.693Z",
    "first_attempt": "2025-07-13T17:40:37.848Z",
    "last_attempt": "2025-07-13T17:43:29.693Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Base styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n/* Card styles */\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.card h3 {\\n  margin-top: 0;\\n  color: #2c3e50;\\n}\\n\\n/* Flexbox container properties */\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  align-items: flex-start;\\n  gap: 20px;\\n  padding: 10px;\\n}\\n'}}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1694,
  "fields": {
    "learner_github_id": "125311832",
    "learner_name": "Nicole D'Anton",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 18,
    "complete": true,
    "completed_on": "2025-07-13T17:45:37.256Z",
    "first_attempt": "2025-07-13T17:43:42.015Z",
    "last_attempt": "2025-07-13T17:45:37.256Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nnav {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n}\\n\\n\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n/* Add your flexbox properties below */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1695,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 13,
    "complete": true,
    "completed_on": "2025-07-14T01:13:31.135Z",
    "first_attempt": "2025-07-13T18:17:42.811Z",
    "last_attempt": "2025-07-14T01:13:31.135Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) =>{\\n    return quantity * price\\n}\\n\\n// Create calculateTotal here\\nconst calculateTotal = (subtotal) => {\\n    return subtotal * 1.08\\n}\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(3, 4.99)\\nconsole.log(\"Subtotal: $\" + subtotal.toFixed(2))\\n\\n// 2. Calculate the final total with tax\\nconst finalTotal = calculateTotal(subtotal)\\nconsole.log(\"Total with tax: $\" + finalTotal.toFixed(2))\\n\\n\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1696,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Undefined",
    "slug": "functions-return-practice",
    "attempts": 15,
    "complete": true,
    "completed_on": "2025-07-24T15:24:17.965Z",
    "first_attempt": "2025-07-14T02:54:25.303Z",
    "last_attempt": "2025-07-24T15:24:17.965Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\nconst calculateGameScore = (points, multiplier) => {\\n    const total = points * multiplier\\n    if (total >= 1000) {\\n        return \"High Score!\"\\n    } else {\\n       return \"Keep trying!\"\\n    }\\n}\\n // Call your function with different values and store a result in a variable\\nconst result1 = calculateGameScore(500, 2.5)\\nconst result2 = calculateGameScore(50, 2)\\n  // Log the result to see the output\\nconsole.log(`Result 1: ${result1}`)\\nconsole.log(`Result 2: ${result2}`)\\n  '}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1697,
  "fields": {
    "learner_github_id": "204808164",
    "learner_name": "Erika Hughes",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 3,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-07-14T11:44:12.150Z",
    "last_attempt": "2025-07-14T11:55:08.466Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1698,
  "fields": {
    "learner_github_id": "186857286",
    "learner_name": "Darren Raines",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-07-14T23:18:21.957Z",
    "first_attempt": "2025-07-14T23:18:18.118Z",
    "last_attempt": "2025-07-14T23:18:21.957Z",
    "completed_code": "{'code': '// Define variables for each color of fruit\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Now define an array to hold these fruits instead of individual variables\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1699,
  "fields": {
    "learner_github_id": "186857286",
    "learner_name": "Darren Raines",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-14T23:24:20.284Z",
    "first_attempt": "2025-07-14T23:23:03.136Z",
    "last_attempt": "2025-07-14T23:24:20.284Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3] \\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1700,
  "fields": {
    "learner_github_id": "186857286",
    "learner_name": "Darren Raines",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-07-14T23:32:42.371Z",
    "first_attempt": "2025-07-14T23:31:31.255Z",
    "last_attempt": "2025-07-14T23:32:42.371Z",
    "completed_code": "{'code': 'const topics = [\"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\"]\\n\\nfor (const topic of topics) {\\nconsole.log(topic)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1701,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-01T15:56:32.131Z",
    "first_attempt": "2025-08-01T15:56:32.129Z",
    "last_attempt": "2025-08-01T15:56:32.132Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145;\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nlet februaryBill = 20;\\nlet marchBill = 33;\\nlet aprilBill = 44;\\nlet mayBill = 55;\\nlet juneBill = 66;\\nlet julyBill = 77;\\nlet augustBill = 88;\\nlet septemberBill = 99;\\nlet octoberBill = 100;\\nlet novemberBill = 110;\\nlet decemberBill = 120;\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = januaryBill + februaryBill  + marchBill  +  aprilBill  + mayBill  + juneBill  + julyBill  + augustBill + septemberBill + octoberBill + novemberBill + decemberBill;\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1702,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-01T16:00:01.846Z",
    "first_attempt": "2025-08-01T16:00:01.844Z",
    "last_attempt": "2025-08-01T16:00:01.846Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"macbook\";\\nconst phone = \"iphone\";\\nconst television = \"lg\";\\nconst refrigerator = \"frigidaire\";\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television} television, my ${computer} computer, my ${refrigerator} refrigerator, and my ${phone} phone`;\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1703,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-01T16:02:23.800Z",
    "first_attempt": "2025-08-01T16:02:23.798Z",
    "last_attempt": "2025-08-01T16:02:23.800Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome;\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - internetBill - waterBill - electricBill - fuelExpenses - foodExpenses;\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`;\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1704,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-01T16:08:17.054Z",
    "first_attempt": "2025-08-01T16:07:47.383Z",
    "last_attempt": "2025-08-01T16:08:17.054Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${myIncome + spouseIncome - phoneBill - mortgage - carInsurance - healthInsurance}.`;  \\n// Use backticks and calculations here\\nconsole.log(statement);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1705,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-01T19:28:18.427Z",
    "first_attempt": "2025-08-01T19:28:08.594Z",
    "last_attempt": "2025-08-01T19:28:18.427Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim();\\nconst formattedPhone = phone.replace(\" \",\"-\");\\nconst formattedName = customerName.toUpperCase();\\nconst containsX = password.includes(\"x\");\\nconst fileStart = filename.substring(0,4);\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1706,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-01T19:31:30.077Z",
    "first_attempt": "2025-08-01T19:31:10.643Z",
    "last_attempt": "2025-08-01T19:31:30.077Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false;\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n} else {\\n   console.log(\"No yoga today.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1707,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Undefined",
    "slug": "evaluations",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-08-02T20:40:44.778Z",
    "first_attempt": "2025-08-02T01:37:00.437Z",
    "last_attempt": "2025-08-02T20:40:44.778Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"t-shirt\";\\n    legClothing = \"shorts\";\\n    footWear = \"sandals\";    \\n} else if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"t-shirts\";\\n    legClothing = \"shorts\";\\n    footWear = \"sneakers\"; \\n} else if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"sweater\";\\n    legClothing = \"pants\";\\n    footWear = \"sneakers\"; \\n} else if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"jacket\";\\n    legClothing = \"pants\";\\n    footWear = \"sneakers\"; \\n} else {\\n    torsoClothing = \"jacket\";\\n    legClothing = \"pants\";\\n    footWear = \"boots\"; \\n}\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1708,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Undefined",
    "slug": "variables-review",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-08-02T20:40:49.764Z",
    "first_attempt": "2025-08-02T20:29:22.849Z",
    "last_attempt": "2025-08-02T20:40:49.764Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos;\\n\\n// Determine storage type based on total\\nif (totalPhotos >= 110) {\\n    photoStorage = \"Photo Album\";\\n} else if (totalPhotos < 110 && totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\";\\n} else {\\n    photoStorage = \"Envelopes\";\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\";\\n} else {\\n    albumColor = \"gray\";\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output);'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1709,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-08-02T20:41:00.572Z",
    "first_attempt": null,
    "last_attempt": "2025-08-02T20:41:00.572Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1710,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-08-02T20:41:01.253Z",
    "first_attempt": null,
    "last_attempt": "2025-08-02T20:41:01.253Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1711,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-08-02T20:41:01.874Z",
    "first_attempt": null,
    "last_attempt": "2025-08-02T20:41:01.874Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1712,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-08-02T20:41:02.881Z",
    "first_attempt": null,
    "last_attempt": "2025-08-02T20:41:02.881Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1713,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-02T20:50:41.684Z",
    "first_attempt": "2025-08-02T20:50:41.684Z",
    "last_attempt": "2025-08-02T20:50:41.684Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [yellowFruit, orangeFruit, redFruit, greenFruit, blueFruit]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1714,
  "fields": {
    "learner_github_id": "214573285",
    "learner_name": "Marcus Upton",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 4,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-08-03T05:45:59.816Z",
    "last_attempt": "2025-08-03T05:50:47.777Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1715,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-04T14:17:43.762Z",
    "first_attempt": "2025-08-04T14:17:43.760Z",
    "last_attempt": "2025-08-04T14:17:43.762Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1];\\nconst secondGlass =dirtyDishes[3];\\nconst thirdGlass = dirtyDishes[5];\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1716,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-04T14:21:43.287Z",
    "first_attempt": "2025-08-04T14:21:43.285Z",
    "last_attempt": "2025-08-04T14:21:43.287Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\",\"Loops\",\"Arrays\",\"Functions\",\"Objects\",\"Modules\",\"Events\" ];\\n\\nfor (const topic of topics) {\\n    console.log(topic);\\n\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1717,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-05T17:18:20.232Z",
    "first_attempt": "2025-08-05T17:18:20.228Z",
    "last_attempt": "2025-08-05T17:18:20.232Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const item of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug);\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1718,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-05T17:22:42.997Z",
    "first_attempt": "2025-08-05T17:22:42.995Z",
    "last_attempt": "2025-08-05T17:22:42.997Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n  if (ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\")\\n  } else if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n  } else if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\")\\n  }\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1719,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-05T17:25:11.189Z",
    "first_attempt": "2025-08-05T17:25:11.188Z",
    "last_attempt": "2025-08-05T17:25:11.189Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const month of monthlyExpenses) {\\n  // Add the current monthly cost to the value of totalExpense\\n  totalExpense += month\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1720,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-05T17:30:32.518Z",
    "first_attempt": "2025-08-05T17:30:32.517Z",
    "last_attempt": "2025-08-05T17:30:32.518Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 10, 20, 30, 40, 50, 60 ]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const week of weeklyMiles) {\\n    totalMiles += week\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1721,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-05T17:34:10.751Z",
    "first_attempt": "2025-08-05T17:34:10.749Z",
    "last_attempt": "2025-08-05T17:34:10.751Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const night of hours) {\\n    if (night < 7) {\\n        grumpyHours.push(night)\\n    } else {\\n        happyHours.push(night)\\n    }\\n}\\n\\nconsole.log(`I was grumpy on ${grumpyHours.length} days.\\nI was happy on ${happyHours.length} days.`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1722,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-05T17:42:16.218Z",
    "first_attempt": "2025-08-05T17:42:16.217Z",
    "last_attempt": "2025-08-05T17:42:16.218Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  // Add your logic here\\n  if(coffee.includes(\"light\")) {\\n    light++\\n  } else if (coffee.includes(\"medium\")) {\\n    medium++\\n  } else if (coffee.includes(\"dark\") || coffee.includes(\"toasty\")) {\\n    toastyDark++\\n  }\\n\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1723,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-08-06T01:43:27.080Z",
    "first_attempt": null,
    "last_attempt": "2025-08-06T01:43:27.080Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1724,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-08-06T01:43:28.242Z",
    "first_attempt": null,
    "last_attempt": "2025-08-06T01:43:28.242Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1725,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-08-06T01:43:29.402Z",
    "first_attempt": null,
    "last_attempt": "2025-08-06T01:43:29.402Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1726,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-08-06T01:43:31.220Z",
    "first_attempt": null,
    "last_attempt": "2025-08-06T01:43:31.220Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1727,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-08-06T03:21:53.444Z",
    "first_attempt": "2025-08-06T02:43:32.637Z",
    "last_attempt": "2025-08-06T03:21:53.444Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 122\\nlet marchBill = 121\\nlet aprilBill = 198\\nlet mayBill = 156\\nlet juneBill = 123\\nlet julyBill = 147\\nlet augustBill = 177\\nlet septemberBill = 187\\nlet octoberBill = 143\\nlet novemberBill = 150\\nlet decemberBill = 147\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill \\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1728,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-06T22:45:40.216Z",
    "first_attempt": "2025-08-06T22:45:23.218Z",
    "last_attempt": "2025-08-06T22:45:40.216Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1729,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-07T00:10:49.476Z",
    "first_attempt": "2025-08-07T00:10:49.473Z",
    "last_attempt": "2025-08-07T00:10:49.476Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []        // \"Clothing\"\\nconst entertainment = []   // \"Movie\"\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nconst utilities = []       // \"Utility\"\\nconst largePurchases = []  // Expenses over 100.00\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nlet averageExpense = 0\\n\\n\\n/*\\n Use your algorithmic thinking for the steps to\\n categorize, total, and average the expenses.\\n\\n Be patient and take your time. This is challenging.\\n*/\\n\\n\\nfor (const expense of monthlyExpenses) {\\n        let [vendor , amount] = expense.split(\":\");\\n         totalExpenses += parseFloat(amount);\\n        \\n        if (amount > 100) {\\n                largePurchases.push(expense);\\n        }\\n\\n        if (vendor.toLocaleLowerCase().includes(\"clothing\")) {\\n                clothing.push(expense);\\n        } else if (vendor.toLocaleLowerCase().includes(\"movie\")) {\\n                entertainment.push(expense);\\n        } else if (vendor.toLocaleLowerCase().includes(\"groceries\") || vendor.toLocaleLowerCase().includes(\"restaurant\")) {\\n                food.push(expense);\\n        } else if (vendor.toLocaleLowerCase().includes(\"fuel\") || vendor.toLocaleLowerCase().includes(\"gas\")) {\\n                fuel.push(expense);\\n        } else if (vendor.toLocaleLowerCase().includes(\"lyft\") || vendor.toLocaleLowerCase().includes(\"uber\")) {\\n                travel.push(expense);\\n        } else if (vendor.toLocaleLowerCase().includes(\"utility\")) {\\n                utilities.push(expense);\\n        }\\n\\n}\\n\\naverageExpense = parseFloat(totalExpenses/monthlyExpenses.length);\\n\\nconsole.log(`Total monthly expenses: ${totalExpenses}`);\\nconsole.log(`Average monthly expenses: ${averageExpense}`);'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1730,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-07T02:26:40.673Z",
    "first_attempt": "2025-08-07T02:25:58.363Z",
    "last_attempt": "2025-08-07T02:26:40.673Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n        name: \"Jeremy Landy\",\\n        location: \"Phoenix, AR\",\\n        gender: \"male\",\\n        age: 31\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1731,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-07T02:30:57.033Z",
    "first_attempt": "2025-08-07T02:30:57.032Z",
    "last_attempt": "2025-08-07T02:30:57.033Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n        color: \"yellow\",\\n        stemLength: 6,\\n        growingSeason: \"Spring\",\\n        thorny: false\\n\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n        color: \"red\",\\n        stemLength: 12,\\n        growingSeason: \"Summer\",\\n        thorny: true\\n\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1732,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-07T03:23:11.244Z",
    "first_attempt": "2025-08-07T03:23:11.242Z",
    "last_attempt": "2025-08-07T03:23:11.244Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\nfor (const appt of appointments) {\\n        schedule += `Patient ${appt.firstName} ${appt.lastName} has an appointment at ${appt.appointmentTime}\\\\n`\\n}\\n\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1733,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-07T03:24:02.028Z",
    "first_attempt": "2025-08-07T03:24:02.027Z",
    "last_attempt": "2025-08-07T03:24:02.028Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1734,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-07T03:31:54.965Z",
    "first_attempt": "2025-08-07T03:31:54.963Z",
    "last_attempt": "2025-08-07T03:31:54.965Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1735,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-07T03:33:02.832Z",
    "first_attempt": "2025-08-07T03:33:02.831Z",
    "last_attempt": "2025-08-07T03:33:02.832Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \"Large Tank\";\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1736,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-07T03:43:58.071Z",
    "first_attempt": "2025-08-07T03:43:45.869Z",
    "last_attempt": "2025-08-07T03:43:58.071Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1737,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-07T03:52:14.324Z",
    "first_attempt": "2025-08-07T03:52:14.323Z",
    "last_attempt": "2025-08-07T03:52:14.324Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet(){\\n        console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1738,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-07T03:54:01.387Z",
    "first_attempt": "2025-08-07T03:54:01.385Z",
    "last_attempt": "2025-08-07T03:54:01.387Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n        console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\n\\ncelebrateScore()\\ncelebrateScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1739,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-07T03:56:17.235Z",
    "first_attempt": "2025-08-07T03:55:10.585Z",
    "last_attempt": "2025-08-07T03:56:17.235Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isNumberGreaterThan100(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayWelcomeBeforeName(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculatePriceAfterDiscount(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1740,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-07T03:59:52.483Z",
    "first_attempt": "2025-08-07T03:59:52.481Z",
    "last_attempt": "2025-08-07T03:59:52.483Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1741,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-07T04:09:41.179Z",
    "first_attempt": "2025-08-07T04:09:33.438Z",
    "last_attempt": "2025-08-07T04:09:41.179Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1742,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-07T04:11:30.187Z",
    "first_attempt": "2025-08-07T04:11:30.184Z",
    "last_attempt": "2025-08-07T04:11:30.187Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\n\\nfunction displayGameScore(playerName, pointsScored) {\\n        console.log(`${playerName} scored ${pointsScored} points!`)\\n}\\n// Then invoke the function with different player names and scores\\n\\ndisplayGameScore(\"Mario\", 100)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1743,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-07T04:17:58.671Z",
    "first_attempt": "2025-08-07T04:17:41.041Z",
    "last_attempt": "2025-08-07T04:17:58.671Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\n\\nconst add = (x, y) => x + y\\n\\nconst greet = name => \"Hello, \" + name + \"!\"\\n\\nconst getRandomNumber = () => Math.random()\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber()\\nconst greeting = greet(\"Larissa\")\\nconst sum = add(3, 4)\\n\\nconsole.log(random, greeting, sum)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1744,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-07T04:19:37.683Z",
    "first_attempt": "2025-08-07T04:19:37.681Z",
    "last_attempt": "2025-08-07T04:19:37.683Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\n\\nconst makeGreeting = name => \"Hello, \" + name\\n\\n\\n// Invoke the function and assign the return value to a variable\\n\\nconst greeting = makeGreeting(\"Larissa\")\\n\\n// Console log the variable you used above to see the greeting\\n\\nconsole.log(greeting)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1745,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Undefined",
    "slug": "string-interpolation",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-09-03T00:38:44.026Z",
    "first_attempt": "2025-08-07T16:26:54.845Z",
    "last_attempt": "2025-09-03T00:38:44.026Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"lenovo\"\\nconst phone = \"iphone15\"\\nconst television = \"samsung\"\\nconst refrigerator = \"whirlpool\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${computer} computer, my ${phone} phone, my ${refrigerator} refrigerator, and my ${television} television`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1746,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Undefined",
    "slug": "math-operations",
    "attempts": 14,
    "complete": true,
    "completed_on": "2025-09-03T01:01:10.460Z",
    "first_attempt": "2025-08-07T18:25:44.404Z",
    "last_attempt": "2025-09-03T01:01:10.460Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1747,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-07T22:31:47.565Z",
    "first_attempt": "2025-08-07T22:31:47.559Z",
    "last_attempt": "2025-08-07T22:31:47.565Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\n\\nconst calculateSubtotal = (quantity, price) => {\\n        return quantity * price\\n}\\n\\n// Create calculateTotal here\\n\\nconst calculateTotal = (calculateSubtotal) => {\\n        return calculateSubtotal * 1.08\\n}\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\n\\nlet subtotal = calculateSubtotal(3, 4.99)\\n\\n// 2. Calculate the final total with tax\\n\\nlet finalTotal = calculateTotal(subtotal)\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $ ${subtotal}`)\\nconsole.log(`Total with tax: $${finalTotal}`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1748,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-08-07T23:00:26.385Z",
    "first_attempt": "2025-08-07T22:59:28.089Z",
    "last_attempt": "2025-08-07T23:00:26.385Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\n\\nconst calculateGameScore = (basePoints, bonusMultiplier) => {\\n        if ((basePoints * bonusMultiplier) >= 1000) {\\n                return \"High Score!\"\\n        } else {\\n                return \"Keep trying!\"\\n        }\\n}\\n\\n  // Call your function with different values and store a result in a variable\\n\\nconst testOne = calculateGameScore(200, 5)\\nconst testTwo = calculateGameScore(453, 3.2)\\nconst testThree = calculateGameScore(5, 17.8)\\n\\n  // Log the result to see the output\\n\\nconsole.log(testOne)\\nconsole.log(testTwo)\\nconsole.log(testThree)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1749,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-07T23:42:57.073Z",
    "first_attempt": "2025-08-07T23:42:57.071Z",
    "last_attempt": "2025-08-07T23:42:57.073Z",
    "completed_code": "{'code': '// This code has scope problems!\\nlet score = 0\\n\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1750,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-08T17:02:55.482Z",
    "first_attempt": "2025-08-08T17:01:09.621Z",
    "last_attempt": "2025-08-08T17:02:55.482Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\n\\nconst checkHighScore = (playerName, score) => {\\n        if (score > highScore) {\\n                highScore = score\\n                return `${playerName} has achieved a high score of ${highScore}`\\n        }\\n        return `${playerName} has not achieved a high score with ${score}`\\n\\n        \\n}\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\n\\nconsole.log(checkHighScore(\"Barney\", 5))\\nconsole.log(checkHighScore(\"Pooh\", 4))\\nconsole.log(checkHighScore(\"Dora\", 34))\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1751,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-09T04:32:00.707Z",
    "first_attempt": "2025-08-09T04:32:00.704Z",
    "last_attempt": "2025-08-09T04:32:00.707Z",
    "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\n        let ticketPrice = 10\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n        if (isWeekend) {\\n                ticketPrice += 2\\n        }\\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n        if (age < 12 || age >= 65) {\\n                ticketPrice = ticketPrice/2\\n        }\\n      // 4. Return the final ticket price\\n        return ticketPrice\\n\\n  }\\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n\\n  // Example:\\n  // const adultWeekdayPrice = calculateTicketPrice(25, false);\\nconst adultWeekdayPrice = calculateTicketPrice(25, false)\\nconst childWeekdayPrice = calculateTicketPrice(6, false)\\nconst seniorWeekdayPrice = calculateTicketPrice(70, false)\\nconst adultWeekendPrice = calculateTicketPrice(30, true)\\nconst childWeekendPrice = calculateTicketPrice(11, true)\\nconst seniorWeekendPrice = calculateTicketPrice(65, true)\\n\\nconsole.log(adultWeekdayPrice)\\nconsole.log(childWeekdayPrice)\\nconsole.log(seniorWeekdayPrice)\\nconsole.log(adultWeekendPrice)\\nconsole.log(childWeekendPrice)\\nconsole.log(seniorWeekendPrice)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1752,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Functions with Loops",
    "slug": "functions-loops",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-09T04:39:47.891Z",
    "first_attempt": "2025-08-09T04:39:47.889Z",
    "last_attempt": "2025-08-09T04:39:47.891Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\n        let cartTotal = 0\\n      // 2. Loop through all prices in the array and add each to total\\n        for (const price of prices) {\\n                cartTotal += price\\n        }\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\n        if (cartTotal > 100) {\\n                cartTotal *= 0.9\\n        }\\n      // 4. Return the final total\\n      return cartTotal\\n  }\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\n\\nconst shoppingCart = calculateCartTotal([34,23,7,3,142])\\nconsole.log(shoppingCart)\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1753,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-08-16T22:11:09.837Z",
    "first_attempt": "2025-08-16T22:10:34.285Z",
    "last_attempt": "2025-08-16T22:11:09.837Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\nlet februaryBill = 148\\nlet marchBill = 145\\nlet aprilBill = 150\\nlet mayBill = 160\\nlet juneBill = 175\\nlet julyBill = 188\\nlet augustBill = 200\\nlet septemberBill = 215\\nlet octoberBill = 205\\nlet novemberBill = 190\\nlet decemberBill = 180 \\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1754,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Undefined",
    "slug": "functions-calling-functions",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-12T22:50:43.635Z",
    "first_attempt": "2025-08-11T02:29:21.085Z",
    "last_attempt": "2025-08-12T22:50:43.635Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    let basePoints = (time * 100) + (targets * 50)\\n\\n    return basePoints\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    let bonus = 0\\n\\n    if (targets > 10) {\\n        bonus = 1000\\n    }\\n\\n    return bonus\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n    let basePoints = calculateBasePoints(time, targets)\\n    let bonusPoints = calculateBonus(targets)\\n    // Add the results together and return the sum\\n    let finalScore = basePoints + bonusPoints\\n\\n    return finalScore\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\n\\nlet result = calculateFinalScore(2, 5)\\nconsole.log(result)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1755,
  "fields": {
    "learner_github_id": "226168490",
    "learner_name": "Brook Hoffman",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-08-12T19:51:22.915Z",
    "first_attempt": null,
    "last_attempt": "2025-08-12T19:51:22.915Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1756,
  "fields": {
    "learner_github_id": "226168490",
    "learner_name": "Brook Hoffman",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-12T21:24:11.169Z",
    "first_attempt": "2025-08-12T21:23:37.627Z",
    "last_attempt": "2025-08-12T21:24:11.169Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\nlet februaryBill = 100\\nlet marchBill = 100\\nlet aprilBill = 105\\nlet mayBill = 90\\nlet juneBill = 95\\nlet julyBill = 98\\nlet augustBill = 150\\nlet septemberBill = 132\\nlet octoberBill = 112\\nlet novemberBill = 110\\nlet decemberBill = 90\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\nconsole.log(yearlyTotal)\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1757,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Undefined",
    "slug": "functions-review",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-08-20T00:57:33.825Z",
    "first_attempt": "2025-08-12T23:18:38.662Z",
    "last_attempt": "2025-08-20T00:57:33.825Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n  // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n  // Otherwise, return \"Hello, [name]!\"\\n  let greeting = \"\"\\n  if (time == \"morning\" || name.startsWith(\"A\")) {\\n    greeting = `Good morning, ${name}!`\\n  } else if (time == \"afternoon\") {\\n    greeting = `Good afternoon, ${name}!`\\n  } else {\\n    greeting = `Hello, ${name}!`\\n  }\\n\\n  return greeting\\n\\n}\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  // If topic is \"weather\", return the weather joke\\n  // If topic is \"animals\", return the animals joke\\n  // Otherwise, return the default joke\\n\\n  let joke = \"\"\\n\\n  if (topic == \"weather\") {\\n    joke = \"What do you call a stormy robot? A thunder-bot!\"\\n  } else if (topic == \"animals\") {\\n    joke = \"Why did the robot go to the zoo? To study creature features!\"\\n  } else {\\n    joke = \"Why was the robot tired? Because it had too many bytes!\"\\n  }\\n\\n  return joke\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n\\n  // Loop through each person in the people array\\n\\n  // Create a greeting for each person\\n\\n  // Add the greeting to the array\\n\\n  // Return the array of greetings\\n\\n  let greetings = []\\n\\n  for (let person of people) {\\n    greetings.push(createGreeting(person, time))\\n  }\\n\\n  return greetings\\n\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n\\n  // Get the joke\\n\\n  // Return both together\\n\\n  let greeting = createGreeting(name, time)\\n  let joke = tellJoke(topic)\\n\\n  return greeting + \" \" + joke\\n\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1758,
  "fields": {
    "learner_github_id": "226168490",
    "learner_name": "Brook Hoffman",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-13T00:49:54.756Z",
    "first_attempt": "2025-08-13T00:49:25.383Z",
    "last_attempt": "2025-08-13T00:49:54.756Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"macbook\"\\nconst phone = \"iphone\"\\nconst television = \"vizio\"\\nconst refrigerator = \"samsung\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `My computer is a ${computer}, my phone is a ${phone}, my tv is a ${television}, and my refrigerator is a ${refrigerator}.`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1759,
  "fields": {
    "learner_github_id": "226168490",
    "learner_name": "Brook Hoffman",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-13T13:06:35.794Z",
    "first_attempt": "2025-08-13T13:04:38.966Z",
    "last_attempt": "2025-08-13T13:06:35.794Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\n\\nnetIncome = combinedIncome - internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1760,
  "fields": {
    "learner_github_id": "226168490",
    "learner_name": "Brook Hoffman",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 11,
    "complete": true,
    "completed_on": "2025-08-13T13:47:52.937Z",
    "first_attempt": "2025-08-13T13:11:52.340Z",
    "last_attempt": "2025-08-13T13:47:52.937Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome)-(phoneBill + mortgage + carInsurance + healthInsurance)}.`'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1761,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Undefined",
    "slug": "arrays-length",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-14T16:28:40.647Z",
    "first_attempt": "2025-08-14T16:15:32.162Z",
    "last_attempt": "2025-08-14T16:28:40.647Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expenses of monthlyExpenses) {\\n  totalExpense += expenses\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1762,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-08-14T16:41:55.080Z",
    "first_attempt": "2025-08-14T16:26:55.058Z",
    "last_attempt": "2025-08-14T16:41:55.080Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 21, 25, 12, 10, 19 ]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\n  totalMiles += miles\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nlet mileage = (`I average ${totalMiles} each week. \\nI have driven a total of ${averageMiles} miles.`)\\n\\nconsole.log(mileage)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1763,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-14T17:12:06.170Z",
    "first_attempt": "2025-08-14T17:12:06.170Z",
    "last_attempt": "2025-08-14T17:12:06.170Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours) {\\n  if (hour < 7) {\\n    grumpyHours.push(hour)\\n  }\\n  else {\\n    happyHours.push(hour)\\n  }\\n}\\n\\nconsole.log(`\\nI was grumpy on ${grumpyHours} days.\\nI was happy on ${happyHours} days.\\n`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1764,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-08-14T18:37:23.430Z",
    "first_attempt": "2025-08-14T18:12:11.761Z",
    "last_attempt": "2025-08-14T18:37:23.430Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if(coffee.includes(\"light\")) {\\n    light++\\n  }\\n  else if (coffee.includes(\"medium\")) {\\n    medium++\\n  }\\n  else if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")) {\\n    toastyDark++\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1765,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-08-14T19:26:27.151Z",
    "first_attempt": "2025-08-14T19:17:39.851Z",
    "last_attempt": "2025-08-14T19:26:27.151Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1766,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-14T20:26:11.100Z",
    "first_attempt": "2025-08-14T20:26:00.856Z",
    "last_attempt": "2025-08-14T20:26:11.100Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n  name: \"Jeremy Landy\",\\n  location: \"Phoenix, AR\",\\n  gender: \"male\",\\n  age: 31\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1767,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-08-14T20:46:51.643Z",
    "first_attempt": "2025-08-14T20:42:46.569Z",
    "last_attempt": "2025-08-14T20:46:51.643Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n  color: \"Pink\",\\n  stemLength: 8,\\n  growingSeason: \"Spring\",\\n  thorny: false\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n  color: \"Red\",\\n  stemLength: 9,\\n  growingSeason: \"Summer\",\\n  thorny: true\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1768,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-08-14T21:04:59.886Z",
    "first_attempt": "2025-08-14T20:58:29.867Z",
    "last_attempt": "2025-08-14T21:04:59.886Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\nfor (const appointment of appointments) {\\n    schedule += `Patient ${appointment.firstName} ${appointment.lastName} has an appointment at ${appointment.appointmentTime}\\\\n`\\n}\\n\\nconsole.log(schedule)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1769,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-15T01:22:03.801Z",
    "first_attempt": "2025-08-15T01:22:03.800Z",
    "last_attempt": "2025-08-15T01:22:03.801Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1770,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-08-15T01:44:35.043Z",
    "first_attempt": "2025-08-15T01:30:56.678Z",
    "last_attempt": "2025-08-15T01:44:35.043Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1771,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Undefined",
    "slug": "objects-properties",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-08-15T01:51:53.740Z",
    "first_attempt": "2025-08-15T01:48:31.500Z",
    "last_attempt": "2025-08-15T01:51:53.740Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \"Large Tank\"\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1772,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-15T02:06:23.700Z",
    "first_attempt": "2025-08-15T02:03:16.399Z",
    "last_attempt": "2025-08-15T02:06:23.700Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager =  \"Abigail Brown\"\\nconsole.log(votingLocation)\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1773,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-15T02:16:14.989Z",
    "first_attempt": "2025-08-15T02:16:14.988Z",
    "last_attempt": "2025-08-15T02:16:14.989Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet (dog) {\\n    console.log(`Good ${dog}!`)\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet(\"Boi\")\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1774,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-15T02:28:46.912Z",
    "first_attempt": "2025-08-15T02:28:46.912Z",
    "last_attempt": "2025-08-15T02:28:46.912Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore() {\\n    console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore()\\ncelebrateScore()\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1775,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 14,
    "complete": true,
    "completed_on": "2025-08-15T02:39:21.569Z",
    "first_attempt": "2025-08-15T02:34:21.211Z",
    "last_attempt": "2025-08-15T02:39:21.569Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreaterThanNum(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayMessage(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculatePrice(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1776,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-15T02:55:58.289Z",
    "first_attempt": "2025-08-15T02:55:58.288Z",
    "last_attempt": "2025-08-15T02:55:58.289Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\nconsole.log(\"running\")\\nconsole.log(\"lifting\")'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1777,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-15T03:11:39.043Z",
    "first_attempt": "2025-08-15T03:11:17.774Z",
    "last_attempt": "2025-08-15T03:11:39.044Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1778,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-08-15T03:32:35.540Z",
    "first_attempt": "2025-08-15T03:30:33.522Z",
    "last_attempt": "2025-08-15T03:32:35.540Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(playerName, points){\\n    console.log(`${playerName}, ${points} ${points} points`)\\n}\\n\\n// Then invoke the function with different player names and scores\\ndisplayGameScore(\"Mario\", 100)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1779,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-08-15T03:54:52.995Z",
    "first_attempt": "2025-08-15T03:49:16.822Z",
    "last_attempt": "2025-08-15T03:54:52.995Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\nconst add = (x, y) => x + y\\nconst greet = name => `Hello, ${name}!`\\nconst getRandomNumber = () => Math.random()\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber()\\nconst greeting = greet (\"Jake\")\\nconst sum = add(5, 4)\\n\\nconsole.log(random, greeting, sum)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1780,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-08-15T04:24:34.651Z",
    "first_attempt": "2025-08-15T04:19:23.306Z",
    "last_attempt": "2025-08-15T04:24:34.651Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\nconst makeGreeting = (name) => {\\n    return `Hello, ${name}`\\n}\\n\\n\\n// Invoke the function and assign the return value to a variable\\nconst greeting = makeGreeting()\\n\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(makeGreeting(\"John\"))\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1781,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-08-15T14:33:04.762Z",
    "first_attempt": "2025-08-15T14:04:29.392Z",
    "last_attempt": "2025-08-15T14:33:04.762Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => {\\n    return quantity * price\\n}\\n\\n// Create calculateTotal here\\nconst calculateTotal = (subtotal) => {\\n    return subtotal * 1.08 // adds 8% tax \\n}\\n\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(3, 4.99)\\nconsole.log(\"Subtotal: $\" + subtotal.toFixed(2))\\n\\n// 2. Calculate the final total wi())\\nconst finalTotal = calculateTotal(subtotal)\\nconsole.log(\"Total with tax: $\" + finalTotal.toFixed(2))\\n\\n// 3. Use console.log to display both results\\n// console.log(`Subtotal: $ ${calculateSubtotal}`)\\n// console.log(`Total with tax: $${calculateTotal}`)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1782,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Return Value Practice",
    "slug": "functions-return-practice",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-08-15T15:43:05.903Z",
    "first_attempt": "2025-08-15T15:21:28.682Z",
    "last_attempt": "2025-08-15T15:43:05.903Z",
    "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\nconst calculateGameScore = (points, multiplier) => {\\n    const total = points * multiplier\\n    if (total >= 1000) {\\n        return \"High Score!\"\\n    }\\n    else {\\n        return \"Keep trying!\"\\n    }\\n}\\n\\n  // Call your function with different values and store a result in a variable\\nconst playerOnePoints = calculateGameScore(500, 2.5)\\nconst playerTwoPoints = calculateGameScore(400, 2)\\n\\n  // Log the result to see the output\\nconsole.log(`Player One\\'s total points is: ${playerOnePoints}`)\\nconsole.log(`Player Two\\'s total points is: ${playerTwoPoints}`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1783,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Understanding Scope Basics",
    "slug": "functions-scope-basics",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-15T16:10:17.447Z",
    "first_attempt": "2025-08-15T16:09:53.367Z",
    "last_attempt": "2025-08-15T16:10:17.447Z",
    "completed_code": "{'code': '// This code has scope problems!\\nlet score = 0\\n\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\n//const score = 0\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1784,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Parameters and Scope",
    "slug": "functions-scope-parameters",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-08-15T16:55:23.122Z",
    "first_attempt": "2025-08-15T16:48:49.715Z",
    "last_attempt": "2025-08-15T16:55:23.122Z",
    "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\nconst checkHighScore = (playerName, score) => {\\n    if (score > highScore) {\\n        highScore = score\\n        return `Player ${playerName}\\'s score is ${score}` \\n    }\\n    else {\\n        return highScore\\n    }\\n}\\n\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\nconsole.log(checkHighScore(\"Alice\", 50))\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1785,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Functions with Conditions",
    "slug": "functions-conditions",
    "attempts": 12,
    "complete": true,
    "completed_on": "2025-08-15T19:55:21.413Z",
    "first_attempt": "2025-08-15T18:59:19.292Z",
    "last_attempt": "2025-08-15T19:55:21.413Z",
    "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\n    let price = 10\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n    if (isWeekend) {\\n        price += 2\\n    }\\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n    if (age <12 || age>= 65) {\\n        price = price * 0.5\\n    }\\n      // 4. Return the final ticket price\\n      return price\\n  }\\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n\\n  // Example:\\n  //const adultWeekdayPrice = calculateTicketPrice(25);\\nconst adultWeekdayPrice = calculateTicketPrice(25, true)\\nconst childWeekdayPrice = calculateTicketPrice(10, false)\\nconsole.log(adultWeekdayPrice)\\nconsole.log(childWeekdayPrice)\"}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1786,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Undefined",
    "slug": "functions-loops",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-08-18T15:49:36.875Z",
    "first_attempt": "2025-08-15T23:23:56.839Z",
    "last_attempt": "2025-08-18T15:49:36.875Z",
    "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\n    let total = 0\\n      // 2. Loop through all prices in the array and add each to total\\n    for (const price of prices) {\\n        total += price\\n    }\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\n    if (total > 100) {\\n        total = total * 0.9\\n    }\\n      // 4. Return the final total\\n\\n      return total\\n  }\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\n\\nconst saleCartTotal = calculateCartTotal([20, 30, 40])\\nconsole.log(saleCartTotal)\\n\\nconst largeSaleCartTotal = calculateCartTotal([50, 60, 70])\\nconsole.log(largeSaleCartTotal)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1787,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Undefined",
    "slug": "string-interpolation",
    "attempts": 14,
    "complete": true,
    "completed_on": "2025-08-16T22:41:23.212Z",
    "first_attempt": "2025-08-16T22:18:12.134Z",
    "last_attempt": "2025-08-17T18:53:50.081Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"2025 Macbook Air\"\\nconst phone = \"iPhone 15\"\\nconst television = \"Vizio\"\\nconst refrigerator = \"Whirlpool\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television} television, my ${computer} computer, my ${refrigerator} refrigerator, and my ${phone} phone.`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1788,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Undefined",
    "slug": "math-operations",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-09-12T19:07:21.264Z",
    "first_attempt": "2025-08-16T22:51:18.898Z",
    "last_attempt": "2025-09-12T19:07:21.264Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome \\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1789,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-08-17T22:37:58.788Z",
    "first_attempt": "2025-08-17T17:24:34.174Z",
    "last_attempt": "2025-08-17T22:48:03.994Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n // Use backticks and calculations here\\n\\nconsole.log(statement)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1790,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-17T23:09:13.915Z",
    "first_attempt": "2025-08-17T23:08:48.750Z",
    "last_attempt": "2025-08-17T23:09:13.915Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0,4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1791,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Undefined",
    "slug": "functions-calling-functions",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-08-18T19:50:18.793Z",
    "first_attempt": "2025-08-18T19:01:24.478Z",
    "last_attempt": "2025-08-18T19:50:18.793Z",
    "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    return (time * 100) + (targets * 50)\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    if(targets >10) {\\n        return 1000\\n    }\\n    return 0\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n    const basePoints = calculateBasePoints(time, targets)\\n    const bonus = calculateBonus(targets)\\n    return basePoints + bonus\\n    // Add the results together and return the sum\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\nconst NoBonusFinalScore = calculateFinalScore(2, 12)\\nconsole.log(NoBonusFinalScore)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1792,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Undefined",
    "slug": "functions-review",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-08-19T15:19:54.294Z",
    "first_attempt": "2025-08-18T20:39:37.062Z",
    "last_attempt": "2025-08-19T15:19:54.294Z",
    "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  if (time === \"morning\" || name.startsWith(\"A\")) {\\n    return `Good morning, ${name}!`\\n  }\\n  else if (time === \"afternoon\") {\\n    return `Good afternoon, ${name}!`\\n  }\\n  else {\\n    return `Hello, ${name}!`\\n  }\\n}\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  if (topic === \"weather\") {\\n    return \"What do you call a stormy robot? A thunder-bot!\"\\n  }\\n  else if (topic === \"animal\") {\\n    return \"Why did the robot go to the zoo? To study creature features!\"\\n  }\\n  else {\\n    return \"Why was the robot tired? Because it had too many bytes!\"\\n  }\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  const allGreetings = []\\n  for (const person of people) {\\n    const personGreetings = createGreeting(person, time)\\n\\n    allGreetings.push(personGreetings)\\n  }\\n\\n  return allGreetings\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  const greeting = createGreeting(name, time)\\n  const joke = tellJoke(topic)\\n  return `${greeting} ${joke}`\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1793,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 13,
    "complete": true,
    "completed_on": "2025-08-18T22:56:37.328Z",
    "first_attempt": "2025-08-18T21:10:47.149Z",
    "last_attempt": "2025-08-19T23:57:16.009Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${myIncome + spouseIncome - phoneBill - mortgage - carInsurance - healthInsurance}.`;  // Use backticks and calculations here'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1794,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Undefined",
    "slug": "html-intro",
    "attempts": 441,
    "complete": true,
    "completed_on": "2025-08-19T18:40:16.319Z",
    "first_attempt": "2025-08-19T15:20:07.252Z",
    "last_attempt": "2025-08-19T18:40:16.319Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n  <h1>How I Became A Software Developer</h1>\\n  \\n  <article>\\n    <h2>Nashville Software School</h2>\\n    \\n    <section>\\n      <p>My Journey has been okay lol</p>\\n    </section>\\n    \\n    <section>\\n      <p>I learned the following skills</p>\\n      <ol>\\n        <li>Variables</li>\\n        <li>Arrays</li>\\n        <li>Objects</li>\\n        <li>Functions</li>\\n        <li>HTML</li>\\n        <li>CSS</li>\\n      </ol>\\n    </section>\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1795,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 4,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-08-20T00:28:54.255Z",
    "last_attempt": "2025-09-03T01:34:55.301Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1796,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-08-20T01:03:06.902Z",
    "first_attempt": "2025-08-20T00:57:59.447Z",
    "last_attempt": "2025-08-20T01:03:06.902Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly =false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly=== true) {\\n    console.log(\"Yoga was fun today.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1797,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "HTML Elements",
    "slug": "html-elements",
    "attempts": 534,
    "complete": true,
    "completed_on": "2025-08-20T19:17:21.937Z",
    "first_attempt": "2025-08-19T18:40:17.754Z",
    "last_attempt": "2025-08-20T19:17:21.937Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n\\n  <main>\\n    <article>\\n      <h1>Ethan Omessi</h1>\\n\\n      <section>\\n        <h2>Career History</h2>\\n        <p>I worked at two whole pizza places and some under the table work</p>\\n      </section>\\n\\n      <section>\\n        <h2>Why Software Developer</h2>\\n        <p>Because it fun</p>\\n      </section>\\n    </article>\\n  </main>\\n\\n  <footer>\\n    <p>Ethan Omessi, 2025, ethanomessi@mail</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1798,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "CSS Basics",
    "slug": "css-basics",
    "attempts": 402,
    "complete": true,
    "completed_on": "2025-08-22T15:17:04.246Z",
    "first_attempt": "2025-08-21T19:57:21.988Z",
    "last_attempt": "2025-08-22T15:17:04.246Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: black;\\n  background-color: lightblue;\\n}\\n\\narticle {\\n  border: 1px solid black;\\n  padding: 1rem;\\n}\\n\\np {\\n  color:purple;\\n}\\n\\nimg {\\n  font-height: 10rem;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1799,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-09-03T02:04:59.015Z",
    "first_attempt": "2025-08-22T01:39:23.915Z",
    "last_attempt": "2025-09-03T02:04:59.015Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sandals\"\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"Sweater\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Boots\"\\n}\\nconsole.log(`This is what im wearing today:\\n${torsoClothing} on my torso\\n${legClothing} on my legs\\n${footWear} on my feet.`)\\n\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1800,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "CSS Selectors",
    "slug": "css-selectors",
    "attempts": 131,
    "complete": true,
    "completed_on": "2025-08-22T17:39:25.810Z",
    "first_attempt": "2025-08-22T15:17:06.767Z",
    "last_attempt": "2025-08-22T17:39:25.810Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\np {\\n  color: purple;\\n}\\n\\n.header {\\n  background-color: yellow;\\n}\\n\\n#header {\\n  background-color: red;\\n  color: blue;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1801,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "CSS Selectors",
    "slug": "flexbox-intro",
    "attempts": 120,
    "complete": true,
    "completed_on": "2025-08-22T18:33:31.988Z",
    "first_attempt": "2025-08-22T17:47:45.756Z",
    "last_attempt": "2025-08-22T18:33:31.988Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Navigation</title>\\n</head>\\n<body>\\n  <nav class=\"navbar\">\\n    <div class=\"logo\">My Website</div>\\n    <ul class=\"nav-links\">\\n      <li><a href=\"#\">Home</a></li>\\n      <li><a href=\"#\">About</a></li>\\n      <li><a href=\"#\">Services</a></li>\\n      <li><a href=\"#\">Contact</a></li>\\n    </ul>\\n  </nav>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links {\\n  list-style: disc;\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-evenly\\n}\\n\\n/* Make the navbar a flex container and style it */\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1802,
  "fields": {
    "learner_github_id": "228060618",
    "learner_name": "Raine Torres",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-08-22T18:33:06.059Z",
    "first_attempt": null,
    "last_attempt": "2025-08-22T18:33:06.059Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1803,
  "fields": {
    "learner_github_id": "228060618",
    "learner_name": "Raine Torres",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-08-22T18:33:07.134Z",
    "first_attempt": null,
    "last_attempt": "2025-08-22T18:33:07.134Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1804,
  "fields": {
    "learner_github_id": "228060618",
    "learner_name": "Raine Torres",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-08-22T18:33:08.124Z",
    "first_attempt": null,
    "last_attempt": "2025-08-22T18:33:08.124Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1805,
  "fields": {
    "learner_github_id": "228060618",
    "learner_name": "Raine Torres",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-08-22T18:33:08.926Z",
    "first_attempt": null,
    "last_attempt": "2025-08-22T18:33:08.926Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1806,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-08-22T19:04:31.062Z",
    "first_attempt": "2025-08-22T19:01:14.533Z",
    "last_attempt": "2025-08-22T19:04:31.062Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse if (iWokeUpEarly === false) {\\n    console.log(\"I watched my favorite Netflix shows all day.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1807,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-22T20:10:53.381Z",
    "first_attempt": "2025-08-22T19:56:12.745Z",
    "last_attempt": "2025-08-22T20:10:53.381Z",
    "completed_code": "{'code': 'let torsoClothing = \\'jacket\\'\\nlet legClothing = \\'pants\\'\\nlet footWear = \\'sneakers\\'\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n   torsoClothing = \\'t-shirt\\';\\n   legClothing = \\'shorts\\';\\n   footWear = \\'sandals\\';\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \\'t-shirt\\';\\n    legClothing = \\'shorts\\';\\n    footWear = \\'sneakers\\';\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \\'sweater\\';\\n    legClothing = \\'pants\\';\\n    footWear = \\'sneakers\\';\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \\'jacket\\';\\n    legClothing = \\'pants\\';\\n    footWear = \"sneakers\";\\n}\\nelse {\\ntorsoClothing = \\'jacket\\';\\nlegClothing = \\'pants\\';\\nfootWear = \\'boots\\';\\n} \\n\\nconsole.log(`Today I will wear a ${torsoClothing}, ${legClothing}, and ${footWear}.`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1808,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-09-03T02:12:22.872Z",
    "first_attempt": "2025-08-23T21:54:34.047Z",
    "last_attempt": "2025-09-03T02:12:22.872Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\n\\ntotalPhotos = femalePhotos + malePhotos\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log()\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1809,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-container",
    "attempts": 457,
    "complete": true,
    "completed_on": "2025-08-25T15:32:52.539Z",
    "first_attempt": "2025-08-22T18:33:39.682Z",
    "last_attempt": "2025-08-25T15:32:52.539Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  font-size: 0.8rem;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n}\\n\\n/* Add your flexbox container properties below */\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center; \\n  gap: 5pxrem\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1810,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Flexbox Container Properties",
    "slug": "flexbox-items",
    "attempts": 112,
    "complete": true,
    "completed_on": "2025-08-25T16:19:32.235Z",
    "first_attempt": "2025-08-25T15:33:09.782Z",
    "last_attempt": "2025-08-25T16:19:32.235Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n/* Add your flexbox properties below */\\n.navbar {\\n  display: flex;\\n  flex-grow: 1 1 auto;\\n  gap: 5rem\\n  justify-content: center;\\n}'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1811,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Introduction to HTML",
    "slug": "leonids-data-types",
    "attempts": 15,
    "complete": true,
    "completed_on": "2025-08-25T19:37:46.974Z",
    "first_attempt": "2025-08-25T18:46:34.557Z",
    "last_attempt": "2025-08-25T19:37:46.974Z",
    "completed_code": "{'code': 'function createToy(name, category, ageRecommendation, isBatteryOperated, features, dimensions) {\\n    return {\\n        name,\\n        category,\\n        ageRecommendation,\\n        isBatteryOperated,\\n        features,\\n        dimensions\\n    };\\n}\\n\\n// TODO: Call createToy with the correct data types\\nconst myToy = createToy(\"Apple Jack\", \"Board Game\", 12, false, [], {height: 12.5, width: 12.5});'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1812,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Data Structures",
    "slug": "leonids-data-structures",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-26T15:21:49.769Z",
    "first_attempt": "2025-08-26T15:21:49.769Z",
    "last_attempt": "2025-08-26T15:21:49.769Z",
    "completed_code": "{'code': '\\n    const inventory = [\\n  { id: 101, name: \"Hand-Carved Wooden Train\", maker: \"Leonid\" },\\n  { id: 102, name: \"Painted Rocking Horse\", maker: \"Leonid\" },\\n  { id: 103, name: \"Stuffed Bear with Bow Tie\", maker: \"Leonid\" },\\n  { id: 104, name: \"Miniature Sailboat\", maker: \"Leonid\" },\\n  { id: 105, name: \"Patchwork Doll\", maker: \"Leonid\" },\\n  { id: 106, name: \"Wooden Puzzle Box\", maker: \"Leonid\" },\\n  { id: 107, name: \"Knitted Sock Monkey\", maker: \"Leonid\" },\\n  { id: 108, name: \"Spinning Top\", maker: \"Leonid\" },\\n  { id: 109, name: \"Tiny Puppet Theater\", maker: \"Leonid\" },\\n  { id: 110, name: \"Hand-Painted Marbles\", maker: \"Leonid\" },\\n  { id: 111, name: \"Fabric Kite with Tail\", maker: \"Leonid\" },\\n  { id: 112, name: \"Wool-Stuffed Bunny\", maker: \"Leonid\" },\\n  { id: 113, name: \"Wooden Xylophone\", maker: \"Leonid\" },\\n  { id: 114, name: \"Tin Wind-Up Robot\", maker: \"Leonid\" },\\n  { id: 115, name: \"Miniature Toy Chest\", maker: \"Leonid\" }\\n];\\n\\nfunction findToyById(toys, id) {\\n  for(const toy of toys) {\\n    if(toy.id === id) {\\n        return toy\\n    }\\n  }\\n  return null\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1813,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Representing Toys as Objects",
    "slug": "leonids-objects",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-08-26T16:43:53.176Z",
    "first_attempt": "2025-08-26T16:07:46.216Z",
    "last_attempt": "2025-08-26T16:43:53.177Z",
    "completed_code": "{'code': 'const woodenTrain = {\\n  name: \"Wooden Train\",\\n  manufacturer: \"Board \\'n\\' Games\",\\n  priceInDollars: 5.00,\\n  inStock: true,\\n  recommendedAgeRange: \"3 - 12\",\\n  weightInGrams: null\\n}\\n\\nconst stuffedRabbit = {\\n  name: \"Stuffed Rabbit\",\\n  manufacturer: null,\\n  priceInDollars: 12.25,\\n  inStock: true,\\n  recommendedAgeRange: \"3 - 17\",\\n  weightInGrams: 3.5\\n}\\n\\nconst kite = {\\n  name: \"Kite\",\\n  manufacturer: \"Ben\\'s Lighting Fast Kites\",\\n  priceInDollars: 9.75,\\n  inStock: true,\\n  recommendedAgeRange: null,\\n  weightInGrams: 1.0\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1814,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Toy Collection",
    "slug": "leonids-arrays",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-26T16:58:52.133Z",
    "first_attempt": "2025-08-26T16:55:03.261Z",
    "last_attempt": "2025-08-26T16:58:52.133Z",
    "completed_code": "{'code': 'const toyInventory = [\\n  {\\n    name: \"Wooden Train\",\\n    manufacturer: \"Trains \\'n\\' Grains\",\\n    priceInDollars: 5.00\\n  },\\n  {\\n    name: \"Stuffed Rabbit\",\\n    manufacturer: null,\\n    priceInDollars: 12.75\\n  },\\n  {\\n    name: \"Kite\",\\n    manufacturer: \"Ben\\'s Lighting Fast Kites\",\\n    priceInDollars: 9.75\\n  }\\n]'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1815,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Displaying Toy Properties",
    "slug": "leonids-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-26T17:43:14.788Z",
    "first_attempt": "2025-08-26T17:43:14.788Z",
    "last_attempt": "2025-08-26T17:43:14.788Z",
    "completed_code": "{'code': 'const toyInventory = [\\n  {\\n    name: \"Wooden Train\",\\n    priceInDollars: 5.25\\n  },\\n  {\\n    name: \"Stuffed Rabbit\",\\n    priceInDollars: 7.50\\n  },\\n  {\\n    name: \"Painted Kite\",\\n    priceInDollars: 10.50\\n  }\\n]\\n\\nfor(const toy of toyInventory) {\\n  console.log(toy.name)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1816,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "New Toys",
    "slug": "leonids-arrays-push",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-26T18:51:10.580Z",
    "first_attempt": "2025-08-26T18:49:02.849Z",
    "last_attempt": "2025-08-26T18:51:10.580Z",
    "completed_code": "{'code': 'const toyInventory = [] \\ntoyInventory.push(\"Wooden Train\")\\ntoyInventory.push(\"Stuffed Rabbit\")\\ntoyInventory.push(\"Painted Kite\")\\n\\nconst toyInventoryCollection = []\\ntoyInventoryCollection.push({name: \"Wooden Train\", priceInDollars: 30})\\ntoyInventoryCollection.push({name: \"Stuffed Rabbit\", priceInDollars: 25})\\ntoyInventoryCollection.push({name: \"Painted Kite\", priceInDollars: 20})'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1817,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Helping Customers Find the Right Toy",
    "slug": "leonids-conditionals",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-27T22:25:48.612Z",
    "first_attempt": "2025-08-27T22:25:18.844Z",
    "last_attempt": "2025-08-27T22:25:48.612Z",
    "completed_code": "{'code': '// Define the phones array\\nconst phones = [\\n  {\\n    id: 1,\\n    name: \"iPhone\",\\n    maker: \"Apple, Inc.\",\\n    operatingSystem: \"iOS\",\\n    price: 900,\\n    weight: 1.2\\n  },\\n  {\\n    id: 2,\\n    name: \"Galaxy\",\\n    maker: \"Samsung\",\\n    operatingSystem: \"Android\",\\n    price: 600,\\n    weight: 1.4\\n  },\\n  {\\n    id: 3,\\n    name: \"Pixel\",\\n    maker: \"Google\",\\n    operatingSystem: \"Android\",\\n    price: 750,\\n    weight: 1.3\\n  }\\n]\\n\\nconst phoneToFind = 2\\n\\nfor(const phone of phones) {\\n  if(phone.id === phoneToFind) {\\n    phone.weight = phone.weight + 0.4\\n    console.log(\"The \"+ phone.maker + \" \" + phone.name + \" coses \" + phone.price + \"dollars. It weighs \" + phone.weight.toFixed(1) + \" grams.\")\\n  }\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1818,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-27T00:04:22.556Z",
    "first_attempt": "2025-08-27T00:02:02.745Z",
    "last_attempt": "2025-08-27T00:04:22.556Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [ \"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\" ]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1819,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-27T00:11:19.989Z",
    "first_attempt": "2025-08-27T00:11:19.985Z",
    "last_attempt": "2025-08-27T00:11:19.989Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconsole.log(firstGlass)\\nconst secondGlass = dirtyDishes[3]\\nconsole.log(secondGlass)\\nconst thirdGlass = dirtyDishes[5]\\nconsole.log(thirdGlass)\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1820,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-27T00:27:21.654Z",
    "first_attempt": "2025-08-27T00:26:56.790Z",
    "last_attempt": "2025-08-27T00:27:21.655Z",
    "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const study of topics) {\\nconsole.log(study)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1821,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-08-27T00:52:56.029Z",
    "first_attempt": "2025-08-27T00:50:46.631Z",
    "last_attempt": "2025-08-27T00:52:56.029Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunk of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1822,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-08-27T01:25:40.538Z",
    "first_attempt": "2025-08-27T01:21:32.959Z",
    "last_attempt": "2025-08-27T01:25:40.538Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  if (ingredient === \"egg\") {\\n  finishedFood.push(\"biscuit\")\\n}\\nelse if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n}\\nelse if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\")\\n}\\n}\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1823,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-08-27T02:01:22.200Z",
    "first_attempt": "2025-08-27T01:54:16.314Z",
    "last_attempt": "2025-08-27T02:01:22.200Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expense of monthlyExpenses) {\\n    totalExpense += expense\\n}\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1824,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-27T02:12:53.360Z",
    "first_attempt": "2025-08-27T02:12:53.352Z",
    "last_attempt": "2025-08-27T02:12:53.360Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [45, 70, 138, 28, 15, 10]\\nlet totalMiles = 0\\n\\n// Declare a variable to store the total. Initial value is 0.\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\ntotalMiles += miles\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles} each week\\nI have driven a total of ${totalMiles} miles`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1825,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-08-27T02:52:42.022Z",
    "first_attempt": "2025-08-27T02:34:54.237Z",
    "last_attempt": "2025-08-27T02:52:42.022Z",
    "completed_code": "{'code': '// Don\\'t add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const sleep of hours) {\\n    if (sleep < \"7\") {\\n    grumpyHours.push(sleep)\\n}\\nelse {\\n    happyHours.push(sleep) \\n }\\n}\\n\\nconsole.log(`I was grumpy on ${grumpyHours.length} days\\nI was happy on ${happyHours.length} days`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1826,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-08-29T00:17:11.389Z",
    "first_attempt": "2025-08-28T23:19:28.030Z",
    "last_attempt": "2025-08-29T00:17:11.389Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")) {\\n    light++\\n  }\\n else if (coffee.includes(\"medium\")) {\\n    medium++\\n}\\nelse if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")) {\\n    toastyDark++\\n }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1827,
  "fields": {
    "learner_github_id": "224880873",
    "learner_name": "dickson luwaju",
    "title": "Strings and Arrays Conversion",
    "slug": "arrays-split-join",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-08-29T00:41:35.354Z",
    "last_attempt": "2025-09-03T00:33:14.715Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1828,
  "fields": {
    "learner_github_id": "224658834",
    "learner_name": "Rosie Bewer",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 3,
    "complete": true,
    "completed_on": "2025-08-29T02:24:51.725Z",
    "first_attempt": "2025-08-29T02:20:08.440Z",
    "last_attempt": "2025-08-29T02:24:51.725Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 150\\nlet marchBill = 140\\nlet aprilBill = 145\\nlet mayBill = 150\\nlet juneBill = 165\\nlet julyBill = 170\\nlet augustBill = 170\\nlet septemberBill = 150\\nlet octoberBill = 150\\nlet novemberBill = 145\\nlet decemberBill = 145\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\nconsole.log(yearlyTotal)\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1829,
  "fields": {
    "learner_github_id": "224658834",
    "learner_name": "Rosie Bewer",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-08-29T02:39:28.857Z",
    "first_attempt": "2025-08-29T02:35:42.449Z",
    "last_attempt": "2025-08-29T02:39:28.857Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Windows 11\"\\nconst phone = \"iPhone 10 Pro Max\"\\nconst television = \"Roku Stick\"\\nconst refrigerator = \"Samsung Smart Fridge\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I can watch YouTube on my ${computer}, my ${phone}, my ${television}, and my ${refrigerator}`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1830,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-30T18:31:00.330Z",
    "first_attempt": "2025-08-30T18:31:00.328Z",
    "last_attempt": "2025-08-30T18:31:00.330Z",
    "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\nlet totalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\";\\n}\\n\\nelse if (totalPhotos < 110 && totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\";\\n}\\n\\nelse if (totalPhotos < 50) {\\n    photoStorage = \"Envelopes\";\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\";\\n}\\n\\nelse {\\n    albumColor = \"gray\";\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1831,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-30T19:04:49.325Z",
    "first_attempt": "2025-08-30T19:04:49.324Z",
    "last_attempt": "2025-08-30T19:04:49.325Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1832,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-30T19:42:23.853Z",
    "first_attempt": "2025-08-30T19:42:23.852Z",
    "last_attempt": "2025-08-30T19:42:23.853Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass =dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1833,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-30T20:29:59.200Z",
    "first_attempt": "2025-08-30T20:29:59.198Z",
    "last_attempt": "2025-08-30T20:29:59.200Z",
    "completed_code": "{'code': 'const topics = [\"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\"]\\n\\nfor (const name of topics) {\\nconsole.log(name)\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1834,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-30T21:05:24.474Z",
    "first_attempt": "2025-08-30T21:05:24.473Z",
    "last_attempt": "2025-08-30T21:05:24.474Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (chunk of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1835,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-30T21:22:04.521Z",
    "first_attempt": "2025-08-30T21:22:04.519Z",
    "last_attempt": "2025-08-30T21:22:04.521Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n    if (ingredient === \"egg\") {\\n      finishedFood.push(\"biscuit\")\\n}\\n    else if (ingredient === \"beef patty\") {\\n      finishedFood.push(\"burger\")\\n}\\n    else if (ingredient === \"potato\") {\\n      finishedFood.push(\"fries\")\\n}\\n}\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1836,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-08-30T21:49:12.293Z",
    "first_attempt": "2025-08-30T21:49:12.291Z",
    "last_attempt": "2025-08-30T21:49:12.293Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const cost of monthlyExpenses) {\\n  totalExpense += cost \\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1837,
  "fields": {
    "learner_github_id": "224658834",
    "learner_name": "Rosie Bewer",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-09-04T02:01:01.253Z",
    "first_attempt": "2025-09-04T01:48:14.365Z",
    "last_attempt": "2025-09-04T02:01:01.253Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - internetBill\\nnetIncome -= electricBill\\nnetIncome -= waterBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1838,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-09-04T21:43:45.820Z",
    "first_attempt": "2025-09-04T21:43:45.819Z",
    "last_attempt": "2025-09-04T21:43:45.820Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [10, 25, 17, 35, 40]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const mileage of weeklyMiles) {\\n   totalMiles += mileage;\\n}\\nconsole.log(totalMiles)\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.`)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1839,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-09-05T13:38:35.368Z",
    "first_attempt": null,
    "last_attempt": "2025-09-05T13:38:35.368Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1840,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-09-05T13:38:36.136Z",
    "first_attempt": null,
    "last_attempt": "2025-09-05T13:38:36.136Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1841,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-09-05T13:38:36.655Z",
    "first_attempt": null,
    "last_attempt": "2025-09-05T13:38:36.655Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1842,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-09-05T13:38:37.095Z",
    "first_attempt": null,
    "last_attempt": "2025-09-05T13:38:37.095Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1843,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 32,
    "complete": true,
    "completed_on": "2025-09-08T13:09:21.928Z",
    "first_attempt": "2025-09-05T13:57:46.259Z",
    "last_attempt": "2025-09-08T13:09:21.928Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nlet februaryBill = 50\\nlet marchBill = 60\\nlet aprilBill = 30\\nlet mayBill = 40\\nlet juneBill = 70\\nlet julyBill= 100\\nlet augustBill = 65\\nlet septemberBill = 100\\nlet octoberBill = 140\\nlet novemberBill = 60\\nlet decemberBill = 100\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill +\\n                    aprilBill + mayBill + juneBill +\\n                    julyBill + augustBill + septemberBill +\\n                    octoberBill + novemberBill + decemberBill\\n\\n\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1844,
  "fields": {
    "learner_github_id": "39672857",
    "learner_name": "Larissa",
    "title": "Introduction to HTML",
    "slug": "html-intro",
    "attempts": 416,
    "complete": true,
    "completed_on": "2025-09-05T18:57:53.469Z",
    "first_attempt": "2025-09-05T16:30:17.864Z",
    "last_attempt": "2025-09-05T18:57:53.469Z",
    "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n  <h1>How I Became A Software Developer</h1>\\n  <article>\\n    <h2>Nashville Software School</h2>\\n    <section>\\n      <p>Attending NSS</p>\\n    </section>\\n    <section>\\n      <p>I learned the following skills</p>\\n      <ol>\\n        <li>Variables</li>\\n        <li>Arrays</li>\\n        <li>Objects</li>\\n        <li>Functions</li>\\n        <li>HTML</li>\\n        <li>CSS</li>\\n      </ol>\\n    </section>\\n  </article>\\n\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n'}}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1845,
  "fields": {
    "learner_github_id": "176324848",
    "learner_name": "Joshua Taylor Albright",
    "title": "Data Structures",
    "slug": "leonids-data-structures",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-09-05T22:40:05.594Z",
    "first_attempt": "2025-09-05T22:39:32.565Z",
    "last_attempt": "2025-09-05T22:40:05.594Z",
    "completed_code": "{'code': '\\n    const inventory = [\\n  { id: 101, name: \"Hand-Carved Wooden Train\", maker: \"Leonid\" },\\n  { id: 102, name: \"Painted Rocking Horse\", maker: \"Leonid\" },\\n  { id: 103, name: \"Stuffed Bear with Bow Tie\", maker: \"Leonid\" },\\n  { id: 104, name: \"Miniature Sailboat\", maker: \"Leonid\" },\\n  { id: 105, name: \"Patchwork Doll\", maker: \"Leonid\" },\\n  { id: 106, name: \"Wooden Puzzle Box\", maker: \"Leonid\" },\\n  { id: 107, name: \"Knitted Sock Monkey\", maker: \"Leonid\" },\\n  { id: 108, name: \"Spinning Top\", maker: \"Leonid\" },\\n  { id: 109, name: \"Tiny Puppet Theater\", maker: \"Leonid\" },\\n  { id: 110, name: \"Hand-Painted Marbles\", maker: \"Leonid\" },\\n  { id: 111, name: \"Fabric Kite with Tail\", maker: \"Leonid\" },\\n  { id: 112, name: \"Wool-Stuffed Bunny\", maker: \"Leonid\" },\\n  { id: 113, name: \"Wooden Xylophone\", maker: \"Leonid\" },\\n  { id: 114, name: \"Tin Wind-Up Robot\", maker: \"Leonid\" },\\n  { id: 115, name: \"Miniature Toy Chest\", maker: \"Leonid\" }\\n];\\n\\nfunction findToyById(toys, id) {\\n  const toy = toys.find(toy => toy.id === id) || null\\n  return toy\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1846,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Undefined",
    "slug": "slack-installation",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-09-06T18:41:46.227Z",
    "first_attempt": null,
    "last_attempt": "2025-09-06T18:41:46.227Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1847,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Undefined",
    "slug": "visual-studio-code",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-09-06T18:41:47.710Z",
    "first_attempt": null,
    "last_attempt": "2025-09-06T18:41:47.710Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1848,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Undefined",
    "slug": "anthropic-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-09-06T18:41:49.694Z",
    "first_attempt": null,
    "last_attempt": "2025-09-06T18:41:49.694Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1849,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Undefined",
    "slug": "github-account",
    "attempts": 0,
    "complete": true,
    "completed_on": "2025-09-06T18:41:50.543Z",
    "first_attempt": null,
    "last_attempt": "2025-09-06T18:41:50.543Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1850,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-09-06T19:46:01.559Z",
    "first_attempt": "2025-09-06T19:45:35.776Z",
    "last_attempt": "2025-09-06T19:46:01.559Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours) {\\n    if (hour >= 7) {\\n        happyHours.push(hour)\\n    }\\n    else {\\n        grumpyHours.push(hour)\\n    }\\n}\\n\\nconsole.log(`I was grumpy on ${grumpyHours.length} days.\\nI was happy on ${happyHours.length} days.`)\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1851,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Strings Within Strings",
    "slug": "arrays-strings",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-09-06T21:06:59.756Z",
    "first_attempt": "2025-09-06T20:51:36.060Z",
    "last_attempt": "2025-09-06T21:06:59.756Z",
    "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\nfor (const coffee of coffees) {\\n    if (coffee.includes(\"light\")) {\\n        light++\\n    }\\n    else if (coffee.includes(\"medium\")) {\\n        medium++\\n    }\\n    else if (coffee.includes(\"dark\") || coffee.includes(\"toasty\")) {\\n        toastyDark++\\n    }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1852,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Undefined",
    "slug": "arrays-split-join",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-09-07T20:33:26.340Z",
    "first_attempt": "2025-09-06T22:09:25.208Z",
    "last_attempt": "2025-09-07T20:33:26.340Z",
    "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n// Display the output\\nconsole.log(output)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1853,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-09-08T13:24:14.758Z",
    "first_attempt": "2025-09-08T13:22:41.114Z",
    "last_attempt": "2025-09-08T13:24:14.758Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"hp laptop\"\\nconst phone = \"galaxy s24\"\\nconst television = \"vizio\"\\nconst refrigerator = \"minifridge\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `\"I have the following elctronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}\"`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1854,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Undefined",
    "slug": "math-operations",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-09-08T13:52:21.820Z",
    "first_attempt": "2025-09-08T13:34:09.031Z",
    "last_attempt": "2025-09-23T04:03:03.056Z",
    "completed_code": "False",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1855,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-09-08T14:18:06.799Z",
    "first_attempt": "2025-09-08T14:11:46.217Z",
    "last_attempt": "2025-09-08T14:18:06.799Z",
    "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n;  // Use backticks and calculations here'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1856,
  "fields": {
    "learner_github_id": "226411496",
    "learner_name": "Dakota Seagraves",
    "title": "Variables Introduction",
    "slug": "variables-intro",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-09-09T16:47:44.991Z",
    "first_attempt": "2025-09-09T16:02:51.598Z",
    "last_attempt": "2025-09-09T16:47:44.991Z",
    "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\nlet februaryBill = 165\\nlet marchBill = 135\\nlet aprilBill = 125\\nlet mayBill = 100\\nlet juneBill = 110\\nlet julyBill = 150\\nlet augustBill = 140\\nlet septemberBill = 115\\nlet octoberBill = 120\\nlet novemberBill = 155\\nlet decemberBill = 170\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\n\\n\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/const yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill \\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1857,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "String Methods",
    "slug": "string-methods",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-09-10T15:02:43.065Z",
    "first_attempt": "2025-09-10T14:32:25.536Z",
    "last_attempt": "2025-09-10T15:02:43.065Z",
    "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone =  phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1858,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Conditional Logic",
    "slug": "boolean-logic",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-09-10T15:17:45.614Z",
    "first_attempt": "2025-09-10T15:16:47.918Z",
    "last_attempt": "2025-09-10T15:17:45.614Z",
    "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}else {\\n   console.log(\"I binged Netflix all day.\")\\n}'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1859,
  "fields": {
    "learner_github_id": "226411496",
    "learner_name": "Dakota Seagraves",
    "title": "String Values",
    "slug": "string-interpolation",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-09-10T18:01:16.342Z",
    "first_attempt": "2025-09-10T18:01:16.341Z",
    "last_attempt": "2025-09-10T18:01:16.342Z",
    "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"2017 macbook pro\"\\nconst phone = \"iphone 15 max pro\"\\nconst television = \"samsung\"\\nconst refrigerator = \"whirlpool\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronics devices. my ${television} televison my ${computer} computer my ${refrigerator} refridgerator and my ${phone} phone`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1860,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Section Project",
    "slug": "arrays-review",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-09-10T22:45:39.277Z",
    "first_attempt": "2025-09-10T22:45:07.126Z",
    "last_attempt": "2025-09-10T22:45:39.277Z",
    "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []   // \"Clothing\"\\nconst entertainment = []   // \"Movie\"\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nconst utilities = []       // \"Utility\"\\nconst largePurchases = []  // Expenses over 100.00\\n\\nlet totalExpenses = 0\\nlet averageExpense = 0\\n\\nfor (expense of monthlyExpenses) {\\n  const [leftValue, rightValue] = expense.split(\":\")\\n\\n  const amount = Number(rightValue)\\n\\n  const description = leftValue.toLowerCase()\\n\\n    if (description.includes(\"clothing\")) {\\n      clothing.push(expense)\\n}\\n    else if (description.includes(\"movie\")) {\\n      entertainment.push(expense)\\n}\\n    else if (description.includes(\"groceries\") || (description.includes(\"restaurant\"))) {\\n      food.push(expense)\\n}\\n    else if (description.includes(\"fuel\") || (description.includes(\"gas\"))) {\\n      fuel.push(expense)\\n}\\n    else if (description.includes(\"lyft\") || (description.includes(\"uber\"))) {\\n        travel.push(expense)\\n}\\n    else if (description.includes(\"utility\")) {\\n      utilities.push(expense)\\n}\\n    if (amount >= 100) {\\n      largePurchases.push(expense)\\n}\\ntotalExpenses = totalExpenses + amount\\n}\\nconsole.log(totalExpenses)\\n\\naverageExpense = totalExpenses / monthlyExpenses.length\\nconsole.log(averageExpense)\\n// Totals and averages\\n\\n\\n\\n\\n/*\\n Use your algorithmic thinking for the steps to\\n categorize, total, and average the expenses.\\n\\n Be patient and take your time. This is challenging.\\n*/\\n\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1861,
  "fields": {
    "learner_github_id": "226411496",
    "learner_name": "Dakota Seagraves",
    "title": "\"Scary\" Math Operations",
    "slug": "math-operations",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-09-20T20:36:37.059Z",
    "first_attempt": "2025-09-12T17:08:08.077Z",
    "last_attempt": "2025-09-20T20:36:37.059Z",
    "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n \\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses \\nnetIncome -= foodExpenses\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1862,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Introduction to Objects",
    "slug": "objects-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-09-13T19:35:48.577Z",
    "first_attempt": "2025-09-13T19:35:48.576Z",
    "last_attempt": "2025-09-13T19:35:48.577Z",
    "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n  name: \"Jeremy Landy\",\\n  location: \"Phoenix, AR\",\\n  gender: \"male\",\\n  age: 31\\n}\\nconsole.log(student)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1863,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Multiple Objects",
    "slug": "objects-multiple",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-09-13T19:41:51.488Z",
    "first_attempt": "2025-09-13T19:41:51.487Z",
    "last_attempt": "2025-09-13T19:41:51.488Z",
    "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n  color: \"yellow\",\\n  stemLength: 6, \\n  growingSeason: \"Spring\",\\n  thorny: false\\n}\\n\\n// Complete the rose object\\nconst rose = {\\ncolor: \"red\",\\nstemLength: 8,\\ngrowingSeason: \"Spring\",\\nthorny: true\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1864,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Object Collections",
    "slug": "objects-collections",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-09-13T20:03:43.494Z",
    "first_attempt": "2025-09-13T20:02:58.559Z",
    "last_attempt": "2025-09-13T20:03:43.494Z",
    "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\nfor (const appointmentsObject of appointments) {\\nschedule += `Patient ${appointmentsObject.firstName} ${appointmentsObject.lastName} has an appointment at ${appointmentsObject.appointmentTime}\\\\n`\\n}\\n\\n\\n\\n\\nconsole.log(schedule)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1865,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Complex Objects",
    "slug": "objects-complex",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-09-13T20:35:28.512Z",
    "first_attempt": "2025-09-13T20:35:28.511Z",
    "last_attempt": "2025-09-13T20:35:28.512Z",
    "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1866,
  "fields": {
    "learner_github_id": "217111574",
    "learner_name": "Ethan Omessi",
    "title": "Toy Catalog",
    "slug": "leonids-string-interpolation",
    "attempts": 2,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-09-13T21:32:46.373Z",
    "last_attempt": "2025-09-13T21:39:41.652Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1867,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Libraries and Books",
    "slug": "objects-libraries",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-09-20T21:25:53.310Z",
    "first_attempt": "2025-09-20T21:25:53.309Z",
    "last_attempt": "2025-09-20T21:25:53.310Z",
    "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = (book.author.lastName)\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = (book.checkedIn.librarian.lastName)\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1868,
  "fields": {
    "learner_github_id": "226411496",
    "learner_name": "Dakota Seagraves",
    "title": "Multi-line Strings",
    "slug": "multiline-strings",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-09-20T21:50:24.180Z",
    "last_attempt": "2025-09-20T21:50:24.180Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1869,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Adding Properties",
    "slug": "objects-properties",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-09-20T21:54:08.644Z",
    "first_attempt": "2025-09-20T21:54:08.643Z",
    "last_attempt": "2025-09-20T21:54:08.644Z",
    "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\ngoldfish.location = \"Large Tank\"\\nconsole.log(goldfish)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1870,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Section Project",
    "slug": "objects-voting",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-09-20T21:59:42.634Z",
    "first_attempt": "2025-09-20T21:59:42.633Z",
    "last_attempt": "2025-09-20T21:59:42.634Z",
    "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1871,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Introduction to Functions",
    "slug": "functions-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-09-20T22:20:56.087Z",
    "first_attempt": "2025-09-20T22:20:56.086Z",
    "last_attempt": "2025-09-20T22:20:56.087Z",
    "completed_code": "{'code': '// Write your function here\\nfunction greetPet() {\\n  console.log(\"Good dog!\")\\n}\\n\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1872,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Defining vs Invoking Functions",
    "slug": "functions-defining-invoking",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-09-20T22:28:02.622Z",
    "first_attempt": "2025-09-20T22:28:02.621Z",
    "last_attempt": "2025-09-20T22:28:02.622Z",
    "completed_code": "{'code': '// 1. Define your function here\\nfunction celebrateScore () {\\n  console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\ncelebrateScore ()\\n\\ncelebrateScore ()\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1873,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Function Names and Purpose",
    "slug": "functions-naming",
    "attempts": 9,
    "complete": true,
    "completed_on": "2025-09-21T22:48:46.743Z",
    "first_attempt": "2025-09-21T22:37:31.833Z",
    "last_attempt": "2025-09-21T22:48:46.743Z",
    "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreaterThanHundred(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayWelcomeMessage(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscountedPrice(price) {\\n    return price * 0.8\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1874,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Introducing Parameters",
    "slug": "functions-parameters",
    "attempts": 4,
    "complete": true,
    "completed_on": "2025-09-21T23:06:35.615Z",
    "first_attempt": "2025-09-21T23:04:58.181Z",
    "last_attempt": "2025-09-21T23:06:35.615Z",
    "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\ndescribeActivity(\"swimming\")'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1875,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Less Than, More Than",
    "slug": "evaluations",
    "attempts": 20,
    "complete": true,
    "completed_on": "2025-09-23T00:12:35.531Z",
    "first_attempt": "2025-09-22T23:21:03.826Z",
    "last_attempt": "2025-09-23T00:12:35.532Z",
    "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    // Add your code here    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sandals\"\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"Sweater\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Boots\"\\n}\\n\\nconsole.log(`This is what I\\'m wearing today:\\n${torsoClothing} on my torso\\n${legClothing} on my legs\\n${footWear} on my feet\\n`)\\n\\n\\n\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1876,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Section Project",
    "slug": "variables-review",
    "attempts": 1,
    "complete": false,
    "completed_on": null,
    "first_attempt": "2025-09-23T04:09:26.456Z",
    "last_attempt": "2025-09-23T04:09:26.456Z",
    "completed_code": null,
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1877,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Introduction to Arrays",
    "slug": "arrays-intro",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-09-23T04:14:52.509Z",
    "first_attempt": "2025-09-23T04:12:29.908Z",
    "last_attempt": "2025-09-23T04:14:52.509Z",
    "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1878,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Array Positions",
    "slug": "arrays-indices",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-09-23T04:22:30.045Z",
    "first_attempt": "2025-09-23T04:16:25.462Z",
    "last_attempt": "2025-09-23T04:22:30.045Z",
    "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1879,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Array Iteration",
    "slug": "arrays-iteration",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-09-23T04:31:22.605Z",
    "first_attempt": "2025-09-23T04:26:43.783Z",
    "last_attempt": "2025-09-23T04:31:22.605Z",
    "completed_code": "{'code': 'const topics = [\"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const topic of topics) {\\n    console.log(topic)\\n}'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1880,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Adding Items to Arrays",
    "slug": "arrays-push",
    "attempts": 5,
    "complete": true,
    "completed_on": "2025-09-24T23:03:47.203Z",
    "first_attempt": "2025-09-24T22:56:11.539Z",
    "last_attempt": "2025-09-24T23:03:47.203Z",
    "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const mug of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1881,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Arrays with Conditions",
    "slug": "arrays-conditions",
    "attempts": 10,
    "complete": true,
    "completed_on": "2025-09-25T00:10:40.143Z",
    "first_attempt": "2025-09-24T23:08:01.326Z",
    "last_attempt": "2025-09-25T00:10:40.143Z",
    "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  if (ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\")\\n  }\\n  else if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n  }\\n  else if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\")\\n  }\\n}\\n\\n\\nconsole.log(finishedFood)\\n'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1882,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Array Length",
    "slug": "arrays-length",
    "attempts": 8,
    "complete": true,
    "completed_on": "2025-09-24T23:40:34.536Z",
    "first_attempt": "2025-09-24T23:32:27.088Z",
    "last_attempt": "2025-09-24T23:40:34.536Z",
    "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expense of monthlyExpenses) {\\n  // Add the current monthly cost to the value of totalExpense\\n totalExpense += expense\\n}\\n\\n\\n// Calculate your average monthly food costs\\nconst averageExpense =  totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1883,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Array Practice",
    "slug": "arrays-practice",
    "attempts": 7,
    "complete": true,
    "completed_on": "2025-09-25T00:02:28.451Z",
    "first_attempt": "2025-09-24T23:49:39.400Z",
    "last_attempt": "2025-09-25T00:02:28.451Z",
    "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [20, 90, 10 ]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\n  totalMiles += miles\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles.toFixed} miles each week.\\nI have driven a total of ${totalMiles} miles.`)'}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1884,
  "fields": {
    "learner_github_id": "222835176",
    "learner_name": "Caleb Lund",
    "title": "Conditions in Loops",
    "slug": "arrays-conditions-practice",
    "attempts": 6,
    "complete": true,
    "completed_on": "2025-09-25T00:20:45.927Z",
    "first_attempt": "2025-09-25T00:07:27.981Z",
    "last_attempt": "2025-09-25T00:20:45.927Z",
    "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const sleep of hours) {\\n  if (sleep < 7) {\\n    grumpyHours.push(sleep)\\n  }\\n  else {\\n    happyHours.push(sleep)\\n  }\\n}\\n\\nconsole.log(`I was grumpy on ${grumpyHours.length} days.\\nI was happy on ${happyHours.length} days.`)\"}",
    "used_solution": true
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1885,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Using Arguments",
    "slug": "functions-arguments",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-09-26T17:23:41.986Z",
    "first_attempt": "2025-09-26T17:23:41.985Z",
    "last_attempt": "2025-09-26T17:23:41.986Z",
    "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\ncalculateTotal(50)\\n// 2. Calculate total for $99.99\\ncalculateTotal(99.99)\\n// 3. Calculate total for $25.50\\ncalculateTotal(25.50)\\n\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1886,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Multiple Parameters",
    "slug": "functions-multiple-parameters",
    "attempts": 2,
    "complete": true,
    "completed_on": "2025-09-28T18:31:52.432Z",
    "first_attempt": "2025-09-28T18:31:06.881Z",
    "last_attempt": "2025-09-28T18:31:52.432Z",
    "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(playerName, points) {\\n    console.log(`${playerName} scored ${points} points!`)\\n}\\n\\n// Then invoke the function with different player names and scores\\n\\ndisplayGameScore(\"Mario\", 100)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1887,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Arrow Function Syntax",
    "slug": "functions-arrow-syntax",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-09-28T20:10:55.870Z",
    "first_attempt": "2025-09-28T20:10:55.868Z",
    "last_attempt": "2025-09-28T20:10:55.870Z",
    "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\n\\nconst add = (x,y) => x+y\\n\\nconst greet = name => \"Hello, \" + name + \"!\"\\n\\nconst getRandomNumber = () => Math.random()\\n\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber()\\nconst greeting = greet(\"Maggie\")\\nconst sum = add(5,2)\\n\\nconsole.log(random, greeting, sum)\\n'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1888,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Introduction to Return Values",
    "slug": "functions-return-intro",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-09-28T21:48:19.513Z",
    "first_attempt": "2025-09-28T21:48:19.511Z",
    "last_attempt": "2025-09-28T21:48:19.513Z",
    "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\nconst makeGreeting = (name) => \"Hello, \" + name + \"!\"\\n\\n\\n// Invoke the function and assign the return value to a variable\\nconst sayHello = makeGreeting(\"Maggie\")\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(sayHello)'}",
    "used_solution": false
  }
},
{
  "model": "LearningAPI.foundationsexercise",
  "pk": 1889,
  "fields": {
    "learner_github_id": "50896303",
    "learner_name": "Maggie Flatt",
    "title": "Working with Return Values",
    "slug": "functions-return-working",
    "attempts": 1,
    "complete": true,
    "completed_on": "2025-09-29T00:14:25.033Z",
    "first_attempt": "2025-09-29T00:14:25.031Z",
    "last_attempt": "2025-09-29T00:14:25.033Z",
    "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => quantity * price\\n\\n// Create calculateTotal here\\nconst calculateTotal = (subtotal) => subtotal + (subtotal * 0.08)\\n\\n\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(3, 4.99)\\n\\n// 2. Calculate the final total with tax\\nconst finalTotal = calculateTotal(subtotal)\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $ ${subtotal}`)\\nconsole.log(`Total with tax: $${finalTotal}`)\\n'}",
    "used_solution": false
  }
}
]
