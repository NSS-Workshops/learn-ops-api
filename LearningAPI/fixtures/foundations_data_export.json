[{"model": "LearningAPI.foundationsexercise", "pk": 1, "fields": {"learner_github_id": "218592", "learner_name": "Steve Brownlee", "title": "Undefined", "slug": "variables-intro", "attempts": 4, "complete": true, "completed_on": "2025-04-10T00:00:00Z", "first_attempt": "2025-03-31T00:00:00Z", "last_attempt": "2025-04-10T00:00:00Z", "completed_code": "{'code': '// Monthly electric bills\\nlet januaryBill = 145\\nlet februaryBill = 155\\nlet marchBill = 132\\nlet aprilBill = 98\\nlet mayBill = 87\\nlet juneBill = 203\\nlet julyBill = 187\\nlet augustBill = 198\\nlet septemberBill = 143\\nlet octoberBill = 112\\nlet novemberBill = 128\\nlet decemberBill = 159\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill +\\n                    aprilBill + mayBill + juneBill +\\n                    julyBill + augustBill + septemberBill +\\n                    octoberBill + novemberBill + decemberBill\\n\\nconsole.log(yearlyTotal)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 2, "fields": {"learner_github_id": "218592", "learner_name": "Steve Brownlee", "title": "String Values", "slug": "string-interpolation", "attempts": 1, "complete": false, "completed_on": null, "first_attempt": "2025-04-04T00:00:00Z", "last_attempt": "2025-04-04T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 3, "fields": {"learner_github_id": "218592", "learner_name": "Steve Brownlee", "title": "Conditional Logic", "slug": "boolean-logic", "attempts": 1, "complete": false, "completed_on": null, "first_attempt": "2025-04-04T00:00:00Z", "last_attempt": "2025-04-04T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 4, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Conditional Logic", "slug": "boolean-logic", "attempts": 13, "complete": true, "completed_on": "2025-04-04T00:00:00Z", "first_attempt": "2025-04-04T00:00:00Z", "last_attempt": "2025-04-04T00:00:00Z", "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse {\\n\\n    console.log(\"I am binging netflix!\")\\n}'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 5, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Less Than, More Than", "slug": "evaluations", "attempts": 6, "complete": true, "completed_on": "2025-04-05T00:00:00Z", "first_attempt": "2025-04-04T00:00:00Z", "last_attempt": "2025-04-05T00:00:00Z", "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    // Add your code here\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n}\\nif (temperature < 95 && temperature >= 75){\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n}\\nif (temperature < 75 && temperature >= 50){\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\nif (temperature < 50 && temperature >= 35){\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature > 35){\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\"\\n}\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 6, "fields": {"learner_github_id": "166757460", "learner_name": "Jana Ismail", "title": "Undefined", "slug": "slack-installation", "attempts": 0, "complete": true, "completed_on": "2025-04-04T00:00:00Z", "first_attempt": null, "last_attempt": "2025-04-04T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 7, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Undefined", "slug": "github-account", "attempts": 0, "complete": true, "completed_on": "2025-04-05T00:00:00Z", "first_attempt": null, "last_attempt": "2025-04-05T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 8, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Undefined", "slug": "visual-studio-code", "attempts": 0, "complete": true, "completed_on": "2025-04-05T00:00:00Z", "first_attempt": null, "last_attempt": "2025-04-05T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 9, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Undefined", "slug": "slack-installation", "attempts": 0, "complete": true, "completed_on": "2025-04-05T00:00:00Z", "first_attempt": null, "last_attempt": "2025-04-05T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 10, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Undefined", "slug": "anthropic-account", "attempts": 0, "complete": true, "completed_on": "2025-04-05T00:00:00Z", "first_attempt": null, "last_attempt": "2025-04-05T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 11, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Variables Introduction", "slug": "variables-intro", "attempts": 1, "complete": true, "completed_on": "2025-04-05T00:00:00Z", "first_attempt": "2025-04-05T00:00:00Z", "last_attempt": "2025-04-05T00:00:00Z", "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 146\\nlet marchBill = 147\\nlet aprilBill = 148\\nlet mayBill = 149\\nlet juneBill = 150\\nlet julyBill = 151\\nlet augustBill = 152\\nlet septemberBill = 153\\nlet octoberBill = 154\\nlet novemberBill = 155\\nlet decemberBill = 156\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 12, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Section Project", "slug": "variables-review", "attempts": 66, "complete": true, "completed_on": "2025-04-09T00:00:00Z", "first_attempt": "2025-04-05T00:00:00Z", "last_attempt": "2025-04-09T00:00:00Z", "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\n\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110){\\n    photoStorage = \"Photo Album\"\\n}\\nelse if (totalPhotos < 110 && totalPhotos >= 50){\\n    photoStorage = \"Shoe Box\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos){\\n    albumColor = \"plum\"\\n}\\n\\nelse{\\n    albumColor = \"gray\"\\n}\\n\\n\\n// Create the expected output string using string interpolation\\nconst output = (`\\nThere are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n)\\n\\n// Log your output\\nconsole.log(output)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 13, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "String Values", "slug": "string-interpolation", "attempts": 9, "complete": true, "completed_on": "2025-04-06T00:00:00Z", "first_attempt": "2025-04-06T00:00:00Z", "last_attempt": "2025-04-06T00:00:00Z", "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Lenovo laptop\"\\nconst phone = \"Android device\"\\nconst television = \"Vizio LED\"\\nconst refrigerator = \"Samsung\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following devices: My ${computer}, my ${phone}, my ${television}, and my ${refrigerator}.`\\nconsole.log(allElectronics)\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 14, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "\"Scary\" Math Operations", "slug": "math-operations", "attempts": 5, "complete": true, "completed_on": "2025-04-09T00:00:00Z", "first_attempt": "2025-04-09T00:00:00Z", "last_attempt": "2025-04-09T00:00:00Z", "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nconst combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 15, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Multi-line Strings", "slug": "multiline-strings", "attempts": 2, "complete": false, "completed_on": null, "first_attempt": "2025-04-06T00:00:00Z", "last_attempt": "2025-04-06T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 19, "fields": {"learner_github_id": "176324848", "learner_name": "Joshua Taylor Albright", "title": "Undefined", "slug": "slack-installation", "attempts": 0, "complete": true, "completed_on": "2025-04-07T00:00:00Z", "first_attempt": null, "last_attempt": "2025-04-07T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 20, "fields": {"learner_github_id": "176324848", "learner_name": "Joshua Taylor Albright", "title": "Variables Introduction", "slug": "variables-intro", "attempts": 6, "complete": true, "completed_on": "2025-04-07T00:00:00Z", "first_attempt": "2025-04-07T00:00:00Z", "last_attempt": "2025-04-07T00:00:00Z", "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 130\\nlet marchBill = 130\\nlet aprilBill = 130\\nlet mayBill = 130\\nlet juneBill = 130\\nlet julyBill = 130\\nlet augustBill = 130\\nlet septemberBill = 130\\nlet octoberBill = 130\\nlet novemberBill = 130\\nlet decemberBill = 130\\nlet yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill\\n+ septemberBill + octoberBill + novemberBill + decemberBill\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 21, "fields": {"learner_github_id": "176324848", "learner_name": "Joshua Taylor Albright", "title": "Data Types", "slug": "leonids-data-types", "attempts": 3, "complete": true, "completed_on": "2025-04-07T00:00:00Z", "first_attempt": "2025-04-07T00:00:00Z", "last_attempt": "2025-04-07T00:00:00Z", "completed_code": "{'code': 'function createToy(name, category, ageRecommendation, isBatteryOperated, features, dimensions) {\\n    return {\\n        name,\\n        category,\\n        ageRecommendation,\\n        isBatteryOperated,\\n        features,\\n        dimensions\\n    };\\n}\\n\\n// TODO: Call createToy with the correct data types\\nconst myToy = createToy(\"Todd\", \"Children\", 5, true, [\"karate chop action\", \"speech dialogue\"], {width: 1024, height: 880});'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 22, "fields": {"learner_github_id": "176324848", "learner_name": "Joshua Taylor Albright", "title": "Representing Toys as Objects", "slug": "leonids-objects", "attempts": 1, "complete": false, "completed_on": null, "first_attempt": "2025-04-07T00:00:00Z", "last_attempt": "2025-04-07T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 23, "fields": {"learner_github_id": "176324848", "learner_name": "Joshua Taylor Albright", "title": "\"Scary\" Math Operations", "slug": "math-operations", "attempts": 1, "complete": false, "completed_on": null, "first_attempt": "2025-04-07T00:00:00Z", "last_attempt": "2025-04-07T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 24, "fields": {"learner_github_id": "176324848", "learner_name": "Joshua Taylor Albright", "title": "String Methods", "slug": "string-methods", "attempts": 2, "complete": false, "completed_on": null, "first_attempt": "2025-04-07T00:00:00Z", "last_attempt": "2025-04-07T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 25, "fields": {"learner_github_id": "218592", "learner_name": "Steve Brownlee", "title": "Section Project", "slug": "variables-review", "attempts": 11, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-04-08T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\nconsole.log(output)\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 26, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "String Methods", "slug": "string-methods", "attempts": 5, "complete": false, "completed_on": null, "first_attempt": "2025-04-09T00:00:00Z", "last_attempt": "2025-04-09T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 27, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Conditional Logic", "slug": "boolean-logic", "attempts": 4, "complete": true, "completed_on": "2025-04-09T00:00:00Z", "first_attempt": "2025-04-09T00:00:00Z", "last_attempt": "2025-04-09T00:00:00Z", "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true ) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse {\\n    console.log(\"better watch N\")\\n}'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 28, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Less Than, More Than", "slug": "evaluations", "attempts": 4, "complete": true, "completed_on": "2025-04-09T00:00:00Z", "first_attempt": "2025-04-09T00:00:00Z", "last_attempt": "2025-04-09T00:00:00Z", "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\"\\n}\\n\\nconsole.log(`I need to wear ${torsoClothing}, ${legClothing}, ${footWear}`)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 29, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Section Project", "slug": "variables-review", "attempts": 9, "complete": false, "completed_on": null, "first_attempt": "2025-04-09T00:00:00Z", "last_attempt": "2025-04-09T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 30, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Introduction to Arrays", "slug": "arrays-intro", "attempts": 2, "complete": true, "completed_on": "2025-04-09T00:00:00Z", "first_attempt": "2025-04-09T00:00:00Z", "last_attempt": "2025-04-09T00:00:00Z", "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 31, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Array Positions", "slug": "arrays-indices", "attempts": 1, "complete": true, "completed_on": "2025-04-09T00:00:00Z", "first_attempt": "2025-04-09T00:00:00Z", "last_attempt": "2025-04-09T00:00:00Z", "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 32, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Array Iteration", "slug": "arrays-iteration", "attempts": 1, "complete": true, "completed_on": "2025-04-10T00:00:00Z", "first_attempt": "2025-04-10T00:00:00Z", "last_attempt": "2025-04-10T00:00:00Z", "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const topic of topics) {\\n    console.log(topic)\\n}'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 33, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Adding Items to Arrays", "slug": "arrays-push", "attempts": 1, "complete": true, "completed_on": "2025-04-10T00:00:00Z", "first_attempt": "2025-04-10T00:00:00Z", "last_attempt": "2025-04-10T00:00:00Z", "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunk of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 34, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Arrays with Conditions", "slug": "arrays-conditions", "attempts": 1, "complete": true, "completed_on": "2025-04-10T00:00:00Z", "first_attempt": "2025-04-10T00:00:00Z", "last_attempt": "2025-04-10T00:00:00Z", "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  /*\\n    Write your if/else code here. In each block use .push() to insert\\n    the correct item into the finishedFood array.\\n  */\\n  if (ingredient === \"beef patty\"){\\n    finishedFood.push (\"burger\")\\n  }\\n  else if (ingredient === \"egg\"){\\n    finishedFood.push (\"biscuit\")\\n  }\\n  else if (ingredient === \"potato\"){\\n    finishedFood.push (\"fries\")\\n  }\\n}\\n\\nconsole.log(finishedFood)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 35, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Array Length", "slug": "arrays-length", "attempts": 1, "complete": true, "completed_on": "2025-04-12T00:00:00Z", "first_attempt": "2025-04-12T00:00:00Z", "last_attempt": "2025-04-12T00:00:00Z", "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expense of monthlyExpenses) {\\n    totalExpense += expense\\n  // Add the current monthly cost to the value of totalExpense\\n\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 36, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Array Practice", "slug": "arrays-practice", "attempts": 7, "complete": true, "completed_on": "2025-04-12T00:00:00Z", "first_attempt": "2025-04-12T00:00:00Z", "last_attempt": "2025-04-12T00:00:00Z", "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 100, 256, 246, 212, 112 ]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\n    totalMiles += miles\\n\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log (`I average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.`)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 37, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Conditions in Loops", "slug": "arrays-conditions-practice", "attempts": 1, "complete": true, "completed_on": "2025-04-12T00:00:00Z", "first_attempt": "2025-04-12T00:00:00Z", "last_attempt": "2025-04-12T00:00:00Z", "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours){\\n    if (hour < 7) {\\n        grumpyHours.push (hour)\\n    }\\n    else{\\n        happyHours.push (hour)\\n    }\\n}\\n\\nconsole.log (`I was grumpy ${grumpyHours.length} days.\\nI was happy ${happyHours.length} days.`)\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 38, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Strings Within Strings", "slug": "arrays-strings", "attempts": 3, "complete": true, "completed_on": "2025-04-15T00:00:00Z", "first_attempt": "2025-04-13T00:00:00Z", "last_attempt": "2025-04-15T00:00:00Z", "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")){\\n    light++\\n  }\\n  // Add your logic here\\n\\n  if (coffee.includes(\"medium\")){\\n  medium ++\\n  }\\n  if (coffee.includes(\"toasty\")|| coffee.includes(\"dark\")){\\n    toastyDark ++\\n  }\\n}\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 39, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Introduction to Arrays", "slug": "arrays-intro", "attempts": 1, "complete": true, "completed_on": "2025-04-14T00:00:00Z", "first_attempt": "2025-04-14T00:00:00Z", "last_attempt": "2025-04-14T00:00:00Z", "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\",\"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\" ]\\n\\nconsole.log(fruits)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 40, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Array Positions", "slug": "arrays-indices", "attempts": 6, "complete": true, "completed_on": "2025-04-14T00:00:00Z", "first_attempt": "2025-04-14T00:00:00Z", "last_attempt": "2025-04-14T00:00:00Z", "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 41, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Array Iteration", "slug": "arrays-iteration", "attempts": 1, "complete": false, "completed_on": null, "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 42, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Arrays with Conditions", "slug": "arrays-conditions", "attempts": 1, "complete": false, "completed_on": null, "first_attempt": "2025-04-14T00:00:00Z", "last_attempt": "2025-04-14T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 43, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Array Length", "slug": "arrays-length", "attempts": 1, "complete": false, "completed_on": null, "first_attempt": "2025-04-14T00:00:00Z", "last_attempt": "2025-04-14T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 44, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Array Practice", "slug": "arrays-practice", "attempts": 3, "complete": false, "completed_on": null, "first_attempt": "2025-04-14T00:00:00Z", "last_attempt": "2025-04-14T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 45, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Conditions in Loops", "slug": "arrays-conditions-practice", "attempts": 1, "complete": false, "completed_on": null, "first_attempt": "2025-04-14T00:00:00Z", "last_attempt": "2025-04-14T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 46, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Strings Within Strings", "slug": "arrays-strings", "attempts": 1, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")) {\\n  light++\\n  }\\n  if (coffee.includes(\"medium\")) {\\n    medium++\\n  }\\n  if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")) {\\n    toastyDark++\\n  }\\n\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 47, "fields": {"learner_github_id": "125929943", "learner_name": "Mike Sheets", "title": "Adding Items to Arrays", "slug": "arrays-push", "attempts": 4, "complete": true, "completed_on": "2025-04-14T00:00:00Z", "first_attempt": "2025-04-14T00:00:00Z", "last_attempt": "2025-04-14T00:00:00Z", "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (chunk of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 48, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Strings and Arrays Conversion", "slug": "arrays-split-join", "attempts": 7, "complete": true, "completed_on": "2025-04-15T00:00:00Z", "first_attempt": "2025-04-15T00:00:00Z", "last_attempt": "2025-04-15T00:00:00Z", "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n//console.log (disorderArray)\\n//console.log (htmlString)\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 49, "fields": {"learner_github_id": "207940958", "learner_name": "Nick Segui", "title": "Undefined", "slug": "slack-installation", "attempts": 0, "complete": true, "completed_on": "2025-04-16T00:00:00Z", "first_attempt": null, "last_attempt": "2025-04-16T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 50, "fields": {"learner_github_id": "207940958", "learner_name": "Nick Segui", "title": "Variables Introduction", "slug": "variables-intro", "attempts": 5, "complete": true, "completed_on": "2025-04-16T00:00:00Z", "first_attempt": "2025-04-16T00:00:00Z", "last_attempt": "2025-04-16T00:00:00Z", "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\nlet februaryBill = 150\\nlet marchBill = 117\\nlet aprilBill = 118\\nlet mayBill = 160\\nlet juneBill = 118\\nlet julyBill = 156\\nlet augustBill = 178\\nlet septemberBill = 156\\nlet octoberBill = 187\\nlet novemberBill = 115\\nlet decemberBill = 145\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 51, "fields": {"learner_github_id": "207940958", "learner_name": "Nick Segui", "title": "String Values", "slug": "string-interpolation", "attempts": 4, "complete": true, "completed_on": "2025-04-16T00:00:00Z", "first_attempt": "2025-04-16T00:00:00Z", "last_attempt": "2025-04-16T00:00:00Z", "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Custom Built Windows PC\"\\nconst phone = \"Apple Iphone\"\\nconst television = \"65 Inch Plasma TV\"\\nconst refrigerator = \"GE Refridgerator\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 52, "fields": {"learner_github_id": "218592", "learner_name": "Steve Brownlee", "title": "Introduction to HTML", "slug": "html-intro", "attempts": 1, "complete": false, "completed_on": null, "first_attempt": "2025-04-17T00:00:00Z", "last_attempt": "2025-04-17T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 53, "fields": {"learner_github_id": "218592", "learner_name": "Steve Brownlee", "title": "Introduction to HTML", "slug": "html-elements", "attempts": 2, "complete": false, "completed_on": null, "first_attempt": "2025-04-17T00:00:00Z", "last_attempt": "2025-04-17T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 54, "fields": {"learner_github_id": "207940958", "learner_name": "Nick Segui", "title": "\"Scary\" Math Operations", "slug": "math-operations", "attempts": 7, "complete": true, "completed_on": "2025-04-18T00:00:00Z", "first_attempt": "2025-04-18T00:00:00Z", "last_attempt": "2025-04-18T00:00:00Z", "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\n\\nconsole.log(output)\\n\"}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 55, "fields": {"learner_github_id": "207940958", "learner_name": "Nick Segui", "title": "Multi-line Strings", "slug": "multiline-strings", "attempts": 6, "complete": false, "completed_on": null, "first_attempt": "2025-04-18T00:00:00Z", "last_attempt": "2025-04-18T00:00:00Z", "completed_code": null, "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 56, "fields": {"learner_github_id": "207940958", "learner_name": "Nick Segui", "title": "Introduction to HTML", "slug": "html-intro", "attempts": 1, "complete": false, "completed_on": null, "first_attempt": "2025-04-18T00:00:00Z", "last_attempt": "2025-04-18T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 57, "fields": {"learner_github_id": "207940958", "learner_name": "Nick Segui", "title": "Introduction to HTML", "slug": "string-methods", "attempts": 1, "complete": false, "completed_on": null, "first_attempt": "2025-04-18T00:00:00Z", "last_attempt": "2025-04-18T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 58, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Section Project", "slug": "arrays-review", "attempts": 3, "complete": true, "completed_on": "2025-04-20T00:00:00Z", "first_attempt": "2025-04-20T00:00:00Z", "last_attempt": "2025-04-20T00:00:00Z", "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []        // \"Clothing\"\\nfor (const clothes of monthlyExpenses) {\\n  if (clothes.includes ((\"Clothing\"))) {\\n    clothing.push(clothes)\\n  }\\n}\\nconst entertainment = []   // \"Movie\"\\nfor (const movie of monthlyExpenses) {\\n  if (movie.includes((\"Movie\"))){\\n        entertainment.push(movie)\\n  }\\n}\\n\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nfor (const foods of monthlyExpenses){\\n        if (foods.includes(\"Groceries\") || foods.includes(\"Restaurant\")){\\n                food.push(foods)\\n        }\\n}\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nfor (const gas of monthlyExpenses){\\n        if (gas.includes(\"Fuel\") || gas.includes(\"Gas\")){\\n                fuel.push(gas)\\n        }\\n}\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nfor (const rides of monthlyExpenses){\\n        if (rides.includes(\"Lyft\") || rides.includes(\"Uber\")){\\n                travel.push(rides)\\n        }\\n}\\nconst utilities = []       // \"Utility\"\\nfor (const utility of monthlyExpenses){\\n        if (utility.includes(\"Utility\")){\\n                utilities.push(utility)\\n        }\\n}\\nconst largePurchases = []  // Expenses over 100.00\\nfor (const big of monthlyExpenses){\\n        const [, rightValue] = big.split (\":\")\\n        parseFloat(rightValue)\\n        if (rightValue > 100) {\\n                largePurchases.push(rightValue)\\n        }\\n        }\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nfor (const total of monthlyExpenses){\\n        const [, right] = total.split (\":\")\\n        const rightValue = parseFloat(right)\\n        \\n        totalExpenses += rightValue\\n}\\n\\nlet averageExpense = 0\\naverageExpense = totalExpenses/monthlyExpenses.length\\n\\n/*\\n Use your algorithmic thinking for the steps to\\n categorize, total, and average the expenses.\\n \\n\\n Be patient and take your time. This is challenging.\\n*/\\n\\nconsole.log (clothing)\\nconsole.log (entertainment)\\nconsole.log (food)\\nconsole.log (fuel)\\nconsole.log (travel)\\nconsole.log (utilities)\\nconsole.log (largePurchases)\\nconsole.log (totalExpenses)\\nconsole.log (averageExpense)\\n\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 59, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Introduction to Objects", "slug": "objects-intro", "attempts": 1, "complete": true, "completed_on": "2025-04-20T00:00:00Z", "first_attempt": "2025-04-20T00:00:00Z", "last_attempt": "2025-04-20T00:00:00Z", "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n        name : \"Jeremy Landy\", \\n        location: \"Phoenix, AR\",\\n        gender: \"male\", \\n        age: 31\\n}'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 60, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Multiple Objects", "slug": "objects-multiple", "attempts": 1, "complete": true, "completed_on": "2025-04-20T00:00:00Z", "first_attempt": "2025-04-20T00:00:00Z", "last_attempt": "2025-04-20T00:00:00Z", "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n        color: \"yellow\", \\n        stemLength: 9, \\n        growingSeason: \"Spring\", \\n        thorny: false\\n\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n        color: \"red\", \\n        stemLength: 12, \\n        growingSeason: \"Spring\", \\n        thorny: true\\n\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 61, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Object Collections", "slug": "objects-collections", "attempts": 2, "complete": true, "completed_on": "2025-04-22T00:00:00Z", "first_attempt": "2025-04-20T00:00:00Z", "last_attempt": "2025-04-22T00:00:00Z", "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\n\\nfor (const scheduleBuilder of appointments){\\n        schedule += `Patient ${scheduleBuilder.firstName} ${scheduleBuilder.lastName} has an appointment at ${scheduleBuilder.appointmentTime}\\\\n`\\n}\\n\\n\\n\\nconsole.log(schedule)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 62, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Complex Objects", "slug": "objects-complex", "attempts": 1, "complete": true, "completed_on": "2025-04-22T00:00:00Z", "first_attempt": "2025-04-22T00:00:00Z", "last_attempt": "2025-04-22T00:00:00Z", "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 63, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Libraries and Books", "slug": "objects-libraries", "attempts": 4, "complete": false, "completed_on": null, "first_attempt": "2025-04-22T00:00:00Z", "last_attempt": "2025-04-22T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 71, "fields": {"learner_github_id": "190438557", "learner_name": "Jaiden Rothrock", "title": "Section Project", "slug": "variables-review", "attempts": 11, "complete": true, "completed_on": "2025-04-30T00:00:00Z", "first_attempt": "2025-04-30T00:00:00Z", "last_attempt": "2025-04-30T00:00:00Z", "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\nconsole.log(output)'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 72, "fields": {"learner_github_id": "218592", "learner_name": "Steve Brownlee", "title": "Undefined", "slug": "math-operations", "attempts": 4, "complete": false, "completed_on": null, "first_attempt": "2025-03-12T00:00:00Z", "last_attempt": "2025-04-30T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 73, "fields": {"learner_github_id": "190438557", "learner_name": "Jaiden Rothrock", "title": "Introduction to Arrays", "slug": "arrays-intro", "attempts": 1, "complete": true, "completed_on": "2025-04-30T00:00:00Z", "first_attempt": "2025-04-30T00:00:00Z", "last_attempt": "2025-04-30T00:00:00Z", "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Watermelon\", \"Blueberry\"]\\n\\nconsole.log(fruits)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 74, "fields": {"learner_github_id": "190438557", "learner_name": "Jaiden Rothrock", "title": "Array Positions", "slug": "arrays-indices", "attempts": 1, "complete": true, "completed_on": "2025-04-30T00:00:00Z", "first_attempt": "2025-04-30T00:00:00Z", "last_attempt": "2025-04-30T00:00:00Z", "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 75, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Introduction to HTML", "slug": "html-intro", "attempts": 147, "complete": true, "completed_on": "2025-05-05T02:47:13.549Z", "first_attempt": "2025-05-05T02:30:52.613Z", "last_attempt": "2025-05-05T02:47:13.549Z", "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n     <h1>How I Became A Software Developer</h1>\\n     <article>\\n      <h2>Nashville Software School</h2>\\n      <section>any text you want about attending NSS</section>\\n      <section>\\n        <p>I learned the following skills</p>\\n        <ol>\\n          <li>Variables</li>\\n          <li>Arrays</li>\\n          <li>Objects</li>\\n          <li>Functions</li>\\n          <li>HTML</li>\\n          <li>CSS</li>\\n        </ol>\\n      </section>\\n     </article>\\n\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n/* Add your styles here */\\n'}}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 76, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Introduction to HTML", "slug": "variables-intro", "attempts": 8, "complete": true, "completed_on": "2025-04-30T00:00:00Z", "first_attempt": "2025-04-30T00:00:00Z", "last_attempt": "2025-04-30T00:00:00Z", "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nlet februaryBill = 100;\\nlet marchBill = 100;\\nlet aprilBill = 100;\\nlet mayBill = 100;\\nlet juneBill = 100;\\nlet julyBill = 100;\\nlet augustBill = 100;\\nlet septemberBill = 100;\\nlet octoberBill = 100;\\nlet novemberBill = 100;\\nlet decemberBill = 100;\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 77, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "String Values", "slug": "string-interpolation", "attempts": 1, "complete": true, "completed_on": "2025-04-30T00:00:00Z", "first_attempt": "2025-04-30T00:00:00Z", "last_attempt": "2025-04-30T00:00:00Z", "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Omen\"\\nconst phone = \"iPhone 14\"\\nconst television = \"Samsung\"\\nconst refrigerator = \"Fridgedaire\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television} television, my ${computer} computer, my ${refrigerator} refrigerator, and my ${phone} phone`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 78, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "\"Scary\" Math Operations", "slug": "math-operations", "attempts": 2, "complete": true, "completed_on": "2025-04-30T00:00:00Z", "first_attempt": "2025-04-30T00:00:00Z", "last_attempt": "2025-04-30T00:00:00Z", "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -=fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 79, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Multi-line Strings", "slug": "multiline-strings", "attempts": 12, "complete": true, "completed_on": "2025-04-29T00:00:00Z", "first_attempt": "2025-04-29T00:00:00Z", "last_attempt": "2025-04-29T00:00:00Z", "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\nconsole.log(statement);\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 80, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Undefined", "slug": "github-account", "attempts": 0, "complete": true, "completed_on": "2025-04-30T00:00:00Z", "first_attempt": null, "last_attempt": "2025-04-30T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 81, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Undefined", "slug": "anthropic-account", "attempts": 0, "complete": true, "completed_on": "2025-04-30T00:00:00Z", "first_attempt": null, "last_attempt": "2025-04-30T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 82, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Undefined", "slug": "visual-studio-code", "attempts": 0, "complete": true, "completed_on": "2025-04-30T00:00:00Z", "first_attempt": null, "last_attempt": "2025-04-30T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 83, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Undefined", "slug": "slack-installation", "attempts": 0, "complete": true, "completed_on": "2025-04-30T00:00:00Z", "first_attempt": null, "last_attempt": "2025-04-30T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 84, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Variables Introduction", "slug": "variables-intro", "attempts": 8, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-04-24T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\n// Monthly electric bills\\nlet januaryBill = 145\\nlet februaryBill = 155\\nlet marchBill = 132\\nlet aprilBill = 98\\nlet mayBill = 87\\nlet juneBill = 203\\nlet julyBill = 187\\nlet augustBill = 198\\nlet septemberBill = 143\\nlet octoberBill = 112\\nlet novemberBill = 128\\nlet decemberBill = 159\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill +\\n                    aprilBill + mayBill + juneBill +\\n                    julyBill + augustBill + septemberBill +\\n                    octoberBill + novemberBill + decemberBill\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 85, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "String Methods", "slug": "string-methods", "attempts": 1, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.substring(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 86, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Conditional Logic", "slug": "boolean-logic", "attempts": 2, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n} else {\\n    console.log(\"Skip yoga and watch Netflix instead!\")\\n}'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 87, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Less Than, More Than", "slug": "evaluations", "attempts": 1, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n   torsoClothing = \"t-shirt\"\\n   legClothing = \"shorts\"\\n   footWear = \"sandals\"\\n\\n} else if ( temperature < 95 && temperature >= 75) {\\n   torsoClothing = \"t-shirt\"\\n   legClothing = \"shorts\"\\n   footWear =  \"sneakers\"\\n\\n} else if ( temperature < 75 && temperature >= 50 ) {\\n   torsoClothing = \"sweater\"\\n   legClothing = \"pants\"\\n   footWear =  \"sneakers\"\\n\\n} else if (temperature < 50 && temperature >= 35) {\\n   torsoClothing = \"jacket\"\\n   legClothing = \"pants\"\\n   footWear =  \"sneakers\"\\n   \\n} else {\\n   torsoClothing = \"jacket\"\\n   legClothing = \"pants\"\\n   footWear =  \"boots\"\\n}\\n\\nconsole.log(`I\\'m going to wear a ${torsoClothing} with ${legClothing} and a pair of ${footWear}.`)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 88, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Section Project", "slug": "variables-review", "attempts": 9, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\n\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos >= 50 ) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n// Determine album color based on gender comparison\\n\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else if (malePhotos > femalePhotos) {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 89, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Introduction to Arrays", "slug": "arrays-intro", "attempts": 1, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [yellowFruit, orangeFruit, redFruit, greenFruit, blueFruit]\\n\\nconsole.log(fruits)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 90, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Array Positions", "slug": "arrays-indices", "attempts": 1, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 91, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "String Methods", "slug": "string-methods", "attempts": 15, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-04-30T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'const email = \"   hello@email.com   \"\\nconst phone = \"555 0123\"\\nconst customerName = \"john\"\\nconst password = \"SecurePass\"\\nconst filename = \"vacation.jpg\"\\n\\n// Remove spaces from beginning and end\\nconst cleanEmail = email.trim()\\n\\n// Replace space with hyphen\\nconst formattedPhone = phone.replace(\" \", \"-\")\\n\\n// Convert to uppercase\\nconst formattedName = customerName.toUpperCase()\\n\\n// Check if contains \"x\"\\nconst containsX = password.includes(\"x\")\\n\\n// Get first 4 characters\\nconst fileStart = filename.slice(0, 4)'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 92, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "String Values", "slug": "string-interpolation", "attempts": 12, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-04-28T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Apple Macbook Pro\"\\nconst phone = \"\"\\nconst television = \"\"\\nconst refrigerator = \"\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television} my ${computer} my ${refrigerator} and my ${phone}`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 93, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "\"Scary\" Math Operations", "slug": "math-operations", "attempts": 15, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-04-28T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 94, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Multi-line Strings", "slug": "multiline-strings", "attempts": 12, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-04-28T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses;\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 95, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Conditional Logic", "slug": "boolean-logic", "attempts": 9, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse {\\n    // New Message\\n    console.log()\\n}'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 96, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Less Than, More Than", "slug": "evaluations", "attempts": 6, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\nif (temperature >= 95) {\\n    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sandals\"\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"Sweater\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Boots\"\\n}\\n\\nconsole.log(`This is what I\\'m wearing today:\\n${torsoClothing} on my torso\\n${legClothing} on my legs\\n${footWear} on my feet\\n`)'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 97, "fields": {"learner_github_id": "190438557", "learner_name": "Jaiden Rothrock", "title": "Array Iteration", "slug": "arrays-iteration", "attempts": 1, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const title of topics) {\\n    console.log(title)\\n}'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 98, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Array Iteration", "slug": "arrays-iteration", "attempts": 3, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const elems of topics) {\\n    console.log(elems)\\n}'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 99, "fields": {"learner_github_id": "190438557", "learner_name": "Jaiden Rothrock", "title": "Adding Items to Arrays", "slug": "arrays-push", "attempts": 1, "complete": true, "completed_on": "2025-05-01T17:36:43.851Z", "first_attempt": "2025-05-01T17:36:43.851Z", "last_attempt": "2025-05-01T17:36:43.851Z", "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const mug of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 100, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Adding Items to Arrays", "slug": "arrays-push", "attempts": 2, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunks of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(\"coffee mug\")\\n}\\n\\nconsole.log(toFireInKiln)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 101, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Arrays with Conditions", "slug": "arrays-conditions", "attempts": 3, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n if ( ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\")\\n } else if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n } else if ( ingredient === \"potato\") {\\n    finishedFood.push(\"fries\")\\n }\\n}\\n\\nconsole.log(finishedFood)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 102, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Array Length", "slug": "arrays-length", "attempts": 3, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const elem of monthlyExpenses) {\\n  totalExpense += elem\\n  \\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\n\\nconsole.log(totalExpense)\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 103, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Array Practice", "slug": "arrays-practice", "attempts": 3, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [ 20, 15, 13, 16, 14, 19, 21 ]\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (let dailyMiles of weeklyMiles) {\\ntotalMiles += dailyMiles\\n}\\n\\n\\n// Declare a new variable to store the average miles over time\\nlet averageMiles = totalMiles / weeklyMiles.length\\n\\nconsole.log(`I average ${averageMiles} miles each week.\\nI have driven a total of ${totalMiles} miles.`)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 104, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Conditions in Loops", "slug": "arrays-conditions-practice", "attempts": 1, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (let time of hours) {\\n    if (time >= 7) {\\n        happyHours.push(time)\\n    } else {\\n        grumpyHours.push(time)\\n    }\\n}\\n \\nconsole.log(`I was grumpy on ${grumpyHours.length} days.\\nI was happy on ${happyHours.length} days.`)\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 105, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Section Project", "slug": "variables-review", "attempts": 35, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) {\\n    photoStorage = \"Photo Album\"\\n} else if (totalPhotos >= 50) {\\n    photoStorage = \"Shoe Box\"\\n} else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\n    albumColor = \"plum\"\\n} else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\nconsole.log(output)\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 106, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Introduction to Arrays", "slug": "arrays-intro", "attempts": 2, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// Current setup\\nconst yellowFruit = \"Banana\"\\nconst orangeFruit = \"Orange\"\\nconst redFruit = \"Apple\"\\nconst greenFruit = \"Watermelon\"\\nconst blueFruit = \"Blueberry\"\\n\\n// Your code here\\nconst fruits = [yellowFruit, orangeFruit, redFruit, greenFruit, blueFruit]\\n\\nconsole.log(fruits)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 107, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Array Positions", "slug": "arrays-indices", "attempts": 7, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// Here are all the dirty dishes\\nconst dirtyDishes = [\\n    \"Soup bowl\",\\n    \"Water glass\",\\n    \"Salad plate\",\\n    \"Wine glass\",\\n    \"Dinner plate\",\\n    \"Whiskey glass\"\\n]\\n// Your code here\\nconst firstGlass = dirtyDishes[1]\\nconst secondGlass = dirtyDishes[3]\\nconst thirdGlass = dirtyDishes[5]\\n\\n// Display the glasses to clean\\nconsole.log(\"I am cleaning the following glasses:\")\\nconsole.log(`- ${firstGlass}`)\\nconsole.log(`- ${secondGlass}`)\\nconsole.log(`- ${thirdGlass}`)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 108, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Array Iteration", "slug": "arrays-iteration", "attempts": 5, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'const topics = [ \"Variables\", \"Loops\", \"Arrays\", \"Functions\", \"Objects\", \"Modules\", \"Events\" ]\\n\\nfor (const name of topics) {\\n    console.log(name)\\n}'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 109, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Adding Items to Arrays", "slug": "arrays-push", "attempts": 8, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'const clay = [ \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\", \"Chunk of clay\" ]\\nconst toFireInKiln = []\\n\\nfor (const chunk of clay) {\\n   const mug = \"coffee mug\"\\n   toFireInKiln.push(mug)\\n}\\n\\nconsole.log(toFireInKiln)'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 110, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Arrays with Conditions", "slug": "arrays-conditions", "attempts": 11, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'const rawIngredients = [\"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\"];\\nconst finishedFood = [];\\n\\nfor (const ingredient of rawIngredients) {\\n  if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\");\\n  } else if (ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\");\\n  } else if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\");\\n      }\\n}\\n\\nconsole.log(finishedFood);\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 111, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Array Length", "slug": "arrays-length", "attempts": 7, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expense of monthlyExpenses) {\\n  totalExpense += expense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 112, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Array Practice", "slug": "arrays-practice", "attempts": 2, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// You fill in some sample weekly miles traveled in this array\\nconst weeklyMiles = [12, 15, 10, 20, 18];\\n\\n// Declare a variable to store the total. Initial value is 0.\\nlet totalMiles = 0;\\n\\n/*\\n  Iterate the array of miles with a for..of loop.\\n  Add each mileage to the total mileage variable.\\n*/\\nfor (const miles of weeklyMiles) {\\n  totalMiles += miles;\\n}\\n\\n// Declare a new variable to store the average miles over time\\nconst averageMiles = totalMiles / weeklyMiles.length;\\n\\nconsole.log(`\\nWeekly Mileage Report\\n---------------------\\nTotal miles: ${totalMiles}\\nAverage weekly miles: ${averageMiles.toFixed(2)}\\n`);\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 113, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Conditions in Loops", "slug": "arrays-conditions-practice", "attempts": 2, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// Don\\'t add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\n// Let\\'s define what makes an hour \"grumpy\" or \"happy\"\\n// For this example, I\\'ll consider hours less than 7 as \"grumpy\" and the rest as \"happy\"\\nfor (const hour of hours) {\\n  if (hour < 7) {\\n    grumpyHours.push(hour)\\n  } else {\\n    happyHours.push(hour)\\n  }\\n}\\n\\n// Display the results\\nconsole.log(\"Original hours:\", hours)\\nconsole.log(\"Grumpy hours:\", grumpyHours)\\nconsole.log(\"Happy hours:\", happyHours)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 114, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Strings Within Strings", "slug": "arrays-strings", "attempts": 4, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\nfor (const coffee of coffees) {\\n  // Categorize coffees and count them\\n  if (coffee.includes(\"light\")) {\\n    light++\\n  } else if (coffee.includes(\"medium\")) {\\n    medium++\\n  } else if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")) {\\n    toastyDark++\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 115, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Strings and Arrays Conversion", "slug": "arrays-split-join", "attempts": 2, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n// Display the output\\nconsole.log(output)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 116, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Section Project", "slug": "arrays-review", "attempts": 4, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n  \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n  \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n  \"Utility Electric:91\", \"Clothing Outlet:122\",\\n  \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n  \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n  \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n  \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n  \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n];\\n\\n// Arrays for categories\\nconst clothing = [];        // Contains \"Clothing\"\\nconst entertainment = [];   // Contains \"Movie\"\\nconst food = [];            // Contains \"Groceries\" or \"Restaurant\"\\nconst fuel = [];            // Contains \"Fuel\" or \"Gas\"\\nconst travel = [];          // Contains \"Lyft\" or \"Uber\"\\nconst utilities = [];       // Contains \"Utility\"\\nconst largePurchases = [];  // Amount > 100\\n\\n// Totals and averages\\nlet totalExpenses = 0;\\nlet averageExpense = 0;\\n\\n// Loop through each expense\\nfor (const item of monthlyExpenses) {\\n  const [description, amountStr] = item.split(\":\");\\n  const amount = parseFloat(amountStr);\\n  totalExpenses += amount;\\n\\n  // Categorize based on description\\n  if (description.includes(\"Clothing\")) clothing.push(item);\\n  if (description.includes(\"Movie\")) entertainment.push(item);\\n  if (description.includes(\"Groceries\") || description.includes(\"Restaurant\")) food.push(item);\\n  if (description.includes(\"Fuel\") || description.includes(\"Gas\")) fuel.push(item);\\n  if (description.includes(\"Lyft\") || description.includes(\"Uber\")) travel.push(item);\\n  if (description.includes(\"Utility\")) utilities.push(item);\\n  if (amount > 100) largePurchases.push(item);\\n}\\n\\naverageExpense = totalExpenses / monthlyExpenses.length;\\n\\n// Output results\\nconsole.log(\"Total Expenses:\", totalExpenses.toFixed(2));\\nconsole.log(\"Average Expense:\", averageExpense.toFixed(2));\\nconsole.log(\"\\\\nClothing:\", clothing);\\nconsole.log(\"Entertainment:\", entertainment);\\nconsole.log(\"Food:\", food);\\nconsole.log(\"Fuel:\", fuel);\\nconsole.log(\"Travel:\", travel);\\nconsole.log(\"Utilities:\", utilities);\\nconsole.log(\"Large Purchases:\", largePurchases);\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 117, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Introduction to Objects", "slug": "objects-intro", "attempts": 5, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n  name: \"Logan Sewell\",\\n  location: \"Chicken\",\\n  gender: \"male\",\\n  age: 31\\n};\\n\\nconsole.log(student);\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 118, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Multiple Objects", "slug": "objects-multiple", "attempts": 6, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n    color: \"Blue\",\\n    stemLength: 5,\\n    growingSeason: \"Summer\",\\n    thorny: false\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n    color: \"red\",\\n    stemLength: 5,\\n    growingSeason: \"Summer\",\\n    thorny: false\\n}\\n\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 119, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Object Collections", "slug": "objects-collections", "attempts": 12, "complete": false, "completed_on": null, "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": null, "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 120, "fields": {"learner_github_id": "218592", "learner_name": "Steve Brownlee", "title": "Object Collections", "slug": "objects-collections", "attempts": 6, "complete": false, "completed_on": null, "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": null, "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 121, "fields": {"learner_github_id": "115299265", "learner_name": "Kate Rogers", "title": "Flexbox Item Properties", "slug": "flexbox-items", "attempts": 1, "complete": false, "completed_on": null, "first_attempt": "2025-04-29T20:54:10.713Z", "last_attempt": "2025-04-29T20:54:10.713Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 122, "fields": {"learner_github_id": "204808164", "learner_name": "Erika Hughes", "title": "Variables Introduction", "slug": "variables-intro", "attempts": 13, "complete": true, "completed_on": "2025-05-11T15:30:35.588Z", "first_attempt": "2025-05-01T20:56:53.316Z", "last_attempt": "2025-05-11T15:30:35.588Z", "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 140\\nlet marchBill = 130\\nlet aprilBill = 129\\nlet mayBill = 120\\nlet juneBill = 120\\nlet julyBill = 128\\nlet augustBill = 132\\nlet septemberBill = 125\\nlet octoberBill = 120\\nlet novemberBill = 126\\nlet decemberBill = 145\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 123, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Parameters and Scope", "slug": "functions-scope-parameters", "attempts": 21, "complete": true, "completed_on": "2025-05-02T19:58:44.198Z", "first_attempt": "2025-05-01T21:50:03.347Z", "last_attempt": "2025-05-02T19:58:44.198Z", "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\nconst checkHighScore = (playerName, score) => {\\n    if (score > highScore) {\\n        highScore = score\\n        return `${playerName} set a new high score of ${score}!`\\n    } else {\\n        return `${playerName} scored ${score}. High score is still ${highScore}`\\n    }\\n}\\n\\n// Test your function with multiple calls below\\nconsole.log(checkHighScore(\"Alice\", 50))\\nconsole.log(checkHighScore(\"Bob\", 30))\\nconsole.log(checkHighScore(\"Charlie\", 80))'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 124, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Complex Objects", "slug": "objects-complex", "attempts": 7, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\nconst associateEmail = salesAssociate.contact.email\\nconsole.log(associateEmail)'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 125, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Libraries and Books", "slug": "objects-libraries", "attempts": 6, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 126, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Adding Properties", "slug": "objects-properties", "attempts": 7, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\ngoldfish.location = \"Large Tank\"'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 127, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Section Project", "slug": "objects-voting", "attempts": 7, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'const votingLocation = {\\n    name: \"Commonwealth Community Center\",\\n    address: {\\n        street: {\\n            number: 70,\\n            name: \"Main Street\"\\n        },\\n        city: \"Nashville\",\\n        state: \"TN\",\\n        zipCode: \"37021\"\\n    }\\n}\\n\\n// Add the new property\\nvotingLocation.manager = \"Abigail Brown\"\\n\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\nconsole.log(output)\\n\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 128, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Introduction to Functions", "slug": "functions-intro", "attempts": 7, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'function greetPet () {\\n    console.log(\"Good dog!\")\\n}'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 129, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Defining vs Invoking Functions", "slug": "functions-defining-invoking", "attempts": 7, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'function celebrateScore() {\\n    console.log(\"Touchdown!\")\\n}\\n\\ncelebrateScore()\\ncelebrateScore()\\n\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 130, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Function Names and Purpose", "slug": "functions-naming", "attempts": 7, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'function isGreaterThanHundred(num) {\\n    return num > 100\\n}\\n\\nfunction displayWelcomeMessage(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\nfunction calculateDiscountedPrice(price) {\\n    return price * 0.8\\n}'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 131, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Introducing Parameters", "slug": "functions-parameters", "attempts": 7, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'function describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 132, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Using Arguments", "slug": "functions-arguments", "attempts": 7, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': 'function calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\ncalculateTotal(50)\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 133, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Multiple Parameters", "slug": "functions-multiple-parameters", "attempts": 6, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\nfunction displayGameScore(playerName, points) {\\n    console.log(playerName + \" scored \" + points + \" points!\")\\n}\\n\\n\\n// Then invoke the function with different player names and scores\\ndisplayGameScore(\"William\", 100)\\ndisplayGameScore(\"Elizabeth\", 50)\\ndisplayGameScore(\"Jamal\", 75)\\n\\n\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 134, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Arrow Function Syntax", "slug": "functions-arrow-syntax", "attempts": 8, "complete": false, "completed_on": null, "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": null, "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 135, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Introduction to Return Values", "slug": "functions-return-intro", "attempts": 7, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\nconst makeGreeting = (name) => `Hello, ${name}!`\\n\\n// Invoke the function and assign the return value to a variable\\nconst greeting = makeGreeting(\"John\")\\n\\n// Console log the variable you used above to see the greeting\\nconsole.log(greeting)\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 136, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Working with Return Values", "slug": "functions-return-working", "attempts": 6, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// Create calculateSubtotal here\\nconst calculateSubtotal = (quantity, price) => {\\n    return quantity * price\\n}\\n\\n// Create calculateTotal here\\nconst calculateTotal = (subtotal) => {\\n    return subtotal * 1.08\\n}\\n\\n// Test your functions:\\n// 1. Calculate subtotal for 3 items at $4.99 each\\nconst subtotal = calculateSubtotal(3, 4.99)\\nconsole.log(\"Subtotal: $\" + subtotal.toFixed(2))\\n\\n// 2. Calculate the final total with tax\\nconst finalTotal = calculateTotal(subtotal)\\nconsole.log(\"Total with tax: $\" + finalTotal.toFixed(2))'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 137, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Return Value Practice", "slug": "functions-return-practice", "attempts": 7, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// Create your arrow function here\\n  const calculateGameScore = (points, multiplier) => {\\n      const total = points * multiplier\\n      if (total >= 1000) {\\n          return \"High Score!\"\\n      } else {\\n          return \"Keep trying!\"\\n      }\\n  }\\n\\n  // Call your function with different values and store a result in a variable\\n  const result1 = calculateGameScore(500, 2.5)\\n  const result2 = calculateGameScore(400, 2)\\n\\n  // Log the result to see the output\\n  console.log(`Result 1: ${result1}`)\\n  console.log(`Result 2: ${result2}`)'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 138, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Understanding Scope Basics", "slug": "functions-scope-basics", "attempts": 7, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': \"// This code has scope problems!\\nlet score = 0    // Changed to let since we're updating it\\n\\nconst displayScore = () => {\\n    console.log(`Score: ${score}`)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()\"}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 139, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Parameters and Scope", "slug": "functions-scope-parameters", "attempts": 6, "complete": false, "completed_on": null, "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": null, "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 140, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Functions with Conditions", "slug": "functions-conditions", "attempts": 7, "complete": false, "completed_on": null, "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": null, "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 141, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Functions with Loops", "slug": "functions-loops", "attempts": 7, "complete": false, "completed_on": null, "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": null, "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 142, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Functions Calling Functions", "slug": "functions-calling-functions", "attempts": 7, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    return (time * 100) + (targets * 50)\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    if (targets > 10) {\\n        return 1000\\n    }\\n    return 0\\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    const basePoints = calculateBasePoints(time, targets)\\n    const bonus = calculateBonus(targets)\\n    return basePoints + bonus\\n}\\n\\nconst finalScoreNoBonus = calculateFinalScore(2, 12)\\nconsole.log(finalScoreNoBonus)\\n  '}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 143, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Review and Practice", "slug": "functions-review", "attempts": 7, "complete": true, "completed_on": "2025-05-01T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-01T00:00:00Z", "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n  // If time is \"morning\" OR the name starts with \"A\", say \"Good morning, [name]!\"\\n  // If time is \"afternoon\", say \"Good afternoon, [name]!\"\\n  // Otherwise, say \"Hello, [name]!\"\\n  if (time === \"morning\" || name.startsWith(\"A\")) {\\n    return `Good morning, ${name}!`;\\n  } else if (time === \"afternoon\") {\\n    return `Good afternoon, ${name}!`;\\n  } else {\\n    return `Hello, ${name}!`;\\n  }\\n}\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n  // If topic is \"weather\", return the weather joke\\n  // If topic is \"animals\", return the animals joke\\n  // Otherwise, return the default joke\\n  if (topic === \"weather\") {\\n    return \"What do you call a stormy robot? A thunder-bot!\";\\n  } else if (topic === \"animals\") {\\n    return \"Why did the robot go to the zoo? To study creature features!\";\\n  } else {\\n    return \"Why was the robot tired? Because it had too many bytes!\";\\n  }\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n  // Create an empty array to store all the greetings\\n  const allGreetings = [];\\n\\n  // Loop through each person in the people array\\n  for (const person of people) {\\n    // Create a greeting for each person\\n    const personGreeting = createGreeting(person, time);\\n\\n    // Add the greeting to the array\\n    allGreetings.push(personGreeting);\\n  }\\n\\n  // Return the array of greetings\\n  return allGreetings;\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n  // Get the greeting\\n  const greeting = createGreeting(name, time);\\n\\n  // Get the joke\\n  const joke = tellJoke(topic);\\n\\n  // Return both together\\n  return `${greeting} ${joke}`;\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"morning\");\\nconsole.log(greeting);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 144, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Introduction to HTML", "slug": "html-intro", "attempts": 254, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-01T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n  <h1>How I Became A Software Developer</h1>\\n\\n  <article>\\n    <h2>Nashville Software School</h2>\\n\\n    <section>\\n      <p>My journey into software development began when I enrolled at Nashville Software School. The instructors were amazing and the curriculum was challenging but rewarding.</p>\\n    </section>\\n\\n    <section>\\n      <p>I learned the following skills</p>\\n      <ol>\\n        <li>Variables</li>\\n        <li>Arrays</li>\\n        <li>Objects</li>\\n        <li>Functions</li>\\n        <li>HTML</li>\\n        <li>CSS</li>\\n      </ol>\\n    </section>\\n  </article>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 20px;\\n  line-height: 1.6;\\n}\\n\\nh1 {\\n  color: #2c3e50;\\n}\\n\\nh2 {\\n  color: #3498db;\\n}\\n\\narticle {\\n  border: 1px solid #e0e0e0;\\n  padding: 15px;\\n  border-radius: 5px;\\n}\\n\\nsection {\\n  margin: 15px 0;\\n}\\n\\nol {\\n  color: #34495e;\\n}\\n'}}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 145, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Introduction to HTML", "slug": "html-elements", "attempts": 7, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header>\\n    <nav>\\n      <div>Home</div>\\n      <div>Projects</div>\\n      <div>Education</div>\\n    </nav>\\n  </header>\\n\\n  <main>\\n    <article>\\n      <h1>John Doe</h1>\\n\\n      <section>\\n        <h2>Career History</h2>\\n        <p>I have worked in IT for 5 years, starting as a help desk technician and moving into network administration. I\\'ve always been fascinated by how software works and have been learning programming in my spare time.</p>\\n      </section>\\n\\n      <section>\\n        <h2>Why I Want to Be a Software Developer</h2>\\n        <p>I\\'m passionate about creating solutions that make people\\'s lives easier. Software development allows me to combine my problem-solving skills with my creativity to build useful applications that can have a real impact.</p>\\n      </section>\\n    </article>\\n  </main>\\n\\n  <footer>\\n    <p>John Doe &copy 2025 | john.doe@example.com</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\nheader {\\n  background-color: #f4f4f4;\\n  padding: 20px;\\n  margin-bottom: 20px;\\n}\\n\\nmain {\\n  max-width: 800px;\\n  margin: 0 auto;\\n}\\n\\nh1, h2 {\\n  color: #2c3e50;\\n}\\n\\nsection {\\n  margin-bottom: 30px;\\n}\\n\\nfooter {\\n  text-align: center;\\n  padding: 10px;\\n  background-color: #f4f4f4;\\n  margin-top: 20px;\\n}\\n'}}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 146, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "HTML Elements", "slug": "css-basics", "attempts": 2, "complete": false, "completed_on": null, "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 147, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "HTML Elements", "slug": "css-basics", "attempts": 3, "complete": false, "completed_on": null, "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 148, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "CSS Selectors", "slug": "css-selectors", "attempts": 7, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul>\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Base styles using element selectors */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  color: #333;\\n  max-width: 1000px;\\n  margin: 0 auto;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  color: #2c3e50;\\n  margin-bottom: 10px;\\n}\\n\\nh2 {\\n  color: #3498db;\\n  margin-top: 25px;\\n}\\n\\nh3 {\\n  color: #555;\\n}\\n\\np {\\n  margin-bottom: 15px;\\n}\\n\\n/* Class selectors */\\n.highlight {\\n  background-color: #fffde7;\\n  padding: 10px;\\n  border-left: 4px solid #ffd54f;\\n}\\n\\n.example {\\n  background-color: #f5f5f5;\\n  padding: 15px;\\n  border-radius: 5px;\\n  margin: 20px 0;\\n}\\n\\n.code {\\n  font-family: monospace;\\n  background-color: #f0f0f0;\\n  padding: 2px 5px;\\n  border-radius: 3px;\\n  border: 1px solid #ddd;\\n}\\n\\n.form-group {\\n  margin-bottom: 15px;\\n}\\n\\n/* ID selectors */\\n#main-header {\\n  background-color: #2c3e50;\\n  color: white;\\n  padding: 20px;\\n  text-align: center;\\n  border-radius: 5px;\\n}\\n\\n#basics {\\n  border-left: 3px solid #3498db;\\n  padding-left: 15px;\\n}\\n\\n#advanced {\\n  border-left: 3px solid #e74c3c;\\n  padding-left: 15px;\\n}\\n\\n#practice {\\n  border-left: 3px solid #2ecc71;\\n  padding-left: 15px;\\n}\\n'}}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 149, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "CSS Selectors", "slug": "flexbox-intro", "attempts": 2, "complete": false, "completed_on": null, "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 150, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "CSS Selectors", "slug": "flexbox-intro", "attempts": 1, "complete": false, "completed_on": null, "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 151, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Introduction to Flexbox", "slug": "flexbox-container", "attempts": 1, "complete": false, "completed_on": null, "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 152, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Introduction to Flexbox", "slug": "flexbox-container", "attempts": 2, "complete": false, "completed_on": null, "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 153, "fields": {"learner_github_id": "47334784", "learner_name": "Logan Sewell", "title": "Flexbox Container Properties", "slug": "flexbox-items", "attempts": 7, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Base styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n/* Navbar styles with flexbox */\\n.navbar {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  background-color: #2c3e50;\\n  color: white;\\n  padding: 1rem 2rem;\\n}\\n\\n.logo {\\n  font-size: 1.5rem;\\n  font-weight: bold;\\n}\\n\\n.nav-links {\\n  display: flex;\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.nav-links li {\\n  margin-left: 1.5rem;\\n}\\n\\n.nav-links a {\\n  color: white;\\n  text-decoration: none;\\n}\\n\\n.nav-links a:hover {\\n  text-decoration: underline;\\n}\\n\\n/* Main container with flexbox */\\n.container {\\n  display: flex;\\n  max-width: 1200px;\\n  margin: 2rem auto;\\n  padding: 0 1rem;\\n}\\n\\n.content {\\n  flex: 3;\\n  margin-right: 2rem;\\n}\\n\\n.sidebar {\\n  flex: 1;\\n  background-color: #f5f5f5;\\n  padding: 1.5rem;\\n  border-radius: 5px;\\n}\\n\\n/* Cards with flexbox */\\n.cards {\\n  display: flex;\\n  flex-wrap: wrap;\\n  gap: 1.5rem;\\n  margin-top: 2rem;\\n}\\n\\n.card {\\n  display: flex;\\n  flex-direction: column;\\n  flex: 1 1 300px;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 1.5rem;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.card h3 {\\n  margin-top: 0;\\n  color: #2c3e50;\\n}\\n\\n.card p {\\n  flex-grow: 1;\\n}\\n\\n.card button {\\n  align-self: flex-start;\\n  background-color: #3498db;\\n  color: white;\\n  border: none;\\n  padding: 0.5rem 1rem;\\n  border-radius: 3px;\\n  cursor: pointer;\\n}\\n\\n.card button:hover {\\n  background-color: #2980b9;\\n}\\n\\n/* Sidebar styles */\\n.sidebar h2 {\\n  margin-top: 0;\\n  color: #2c3e50;\\n}\\n\\n.sidebar ul {\\n  padding-left: 1.5rem;\\n}\\n\\n.sidebar li {\\n  margin-bottom: 0.5rem;\\n}\\n\\n.sidebar a {\\n  color: #3498db;\\n  text-decoration: none;\\n}\\n\\n.sidebar a:hover {\\n  text-decoration: underline;\\n}\\n\\n.info-box {\\n  background-color: #e8f4fc;\\n  border-left: 4px solid #3498db;\\n  padding: 1rem;\\n  margin-top: 2rem;\\n}\\n\\n/* Footer styles */\\nfooter {\\n  background-color: #2c3e50;\\n  color: white;\\n  text-align: center;\\n  padding: 1.5rem;\\n  margin-top: 2rem;\\n}\\n\\n/* Responsive adjustments */\\n@media (max-width: 768px) {\\n  .container {\\n    flex-direction: column;\\n  }\\n\\n  .content {\\n    margin-right: 0;\\n    margin-bottom: 2rem;\\n  }\\n\\n  .navbar {\\n    flex-direction: column;\\n    padding: 1rem;\\n  }\\n\\n  .nav-links {\\n    margin-top: 1rem;\\n  }\\n\\n  .nav-links li {\\n    margin-left: 1rem;\\n    margin-right: 1rem;\\n  }\\n}\\n'}}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 154, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Strings Within Strings", "slug": "arrays-strings", "attempts": 1, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")) {\\n    light++\\n  } else if (coffee.includes(\"medium\")) {\\n    medium++\\n  } else if (coffee.includes(\"dark\") || coffee.includes(\"toasty\")) {\\n    toastyDark++\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 155, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Strings and Arrays Conversion", "slug": "arrays-split-join", "attempts": 1, "complete": true, "completed_on": "2025-05-02T00:00:00Z", "first_attempt": "2025-05-02T00:00:00Z", "last_attempt": "2025-05-02T00:00:00Z", "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = `<div>${htmlString}</div>`\\n\\n\\n// Display the output\\nconsole.log(output)\\n\\nconsole.log(disorderArray)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 156, "fields": {"learner_github_id": "218592", "learner_name": "Steve Brownlee", "title": "Introduction to Arrays", "slug": "arrays-intro", "attempts": 1, "complete": false, "completed_on": null, "first_attempt": "2025-05-02T14:11:15.442Z", "last_attempt": "2025-05-02T14:11:15.442Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 157, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Functions with Conditions", "slug": "functions-conditions", "attempts": 4, "complete": true, "completed_on": "2025-05-03T23:48:46.382Z", "first_attempt": "2025-05-02T20:25:32.333Z", "last_attempt": "2025-05-03T23:48:46.382Z", "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\n    let ticketPrice = 10\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n    if (isWeekend === true) {\\n        ticketPrice = ticketPrice + 2\\n    }\\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n    if ((age < 12) || (age >= 65)) {\\n        ticketPrice = ticketPrice * .5\\n    }\\n      // 4. Return the final ticket price\\n      return ticketPrice\\n  }\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n  // Example:\\n  const adultWeekdayPrice = calculateTicketPrice(25, false)\\n  console.log (adultWeekdayPrice)\\n  const childWeekendPrice = calculateTicketPrice(10, true)\\n  console.log (childWeekendPrice)\\n  const seniorWeekendPrice = calculateTicketPrice(70, true)\\n  console.log (seniorWeekendPrice)\\n  const adultWeekendPrice = calculateTicketPrice(25, true)\\n  console.log (adultWeekendPrice)\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 158, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Section Project", "slug": "arrays-review", "attempts": 15, "complete": false, "completed_on": null, "first_attempt": "2025-05-02T20:53:27.444Z", "last_attempt": "2025-05-02T21:56:14.805Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 159, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Introduction to Objects", "slug": "objects-intro", "attempts": 1, "complete": true, "completed_on": "2025-05-02T22:04:03.477Z", "first_attempt": "2025-05-02T22:04:03.477Z", "last_attempt": "2025-05-02T22:04:03.477Z", "completed_code": "{'code': '/* Create your student object here */\\nconst student = {\\n    name: \"Jeremy Landy\",\\n    location: \"Phoenix, AZ\",\\n    gender: \"male\",\\n    age: 31\\n}\\n\\nconsole.log(student)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 160, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Multiple Objects", "slug": "objects-multiple", "attempts": 1, "complete": true, "completed_on": "2025-05-02T22:05:56.413Z", "first_attempt": "2025-05-02T22:05:56.413Z", "last_attempt": "2025-05-02T22:05:56.414Z", "completed_code": "{'code': '// Create the properties for a tulip object here.\\nconst tulip = {\\n    color: \"white\",\\n    stemLength: 4,\\n    growingSeason: \"Spring\",\\n    thorny: false,\\n}\\n\\n// Complete the rose object\\nconst rose = {\\n    color: \"red\",\\n    stemLength: 8,\\n    growingSeason: \"Summer\",\\n    thorny: true,\\n}\\n\\nconsole.log(tulip.color)\\nconsole.log(rose.stemLength)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 161, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Functions with Loops", "slug": "functions-loops", "attempts": 4, "complete": true, "completed_on": "2025-05-03T23:46:10.719Z", "first_attempt": "2025-05-03T20:42:15.083Z", "last_attempt": "2025-05-03T23:46:10.719Z", "completed_code": "{'code': 'const calculateCartTotal = (prices) => {\\n      // 1. Create a variable to store the total, starting at 0\\n    let total = 0\\n      // 2. Loop through all prices in the array and add each to total\\n    for (const price of prices){\\n        total = total + price   \\n    }\\n      // 3. Check if total is over $100, and if so apply a 10% discount\\n    if (total > 100) {\\n        total = total * .9\\n    }\\n      // 4. Return the final total\\n    return total  \\n  }\\n\\n  // Test your function with following steps:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Log the variable to the console\\n\\nconst prices = [20, 30, 40, 50]\\nconst cart = calculateCartTotal(prices)\\nconsole.log (`Total: ${cart}`)\\n\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 162, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Functions Calling Functions", "slug": "functions-calling-functions", "attempts": 7, "complete": true, "completed_on": "2025-05-04T22:10:54.592Z", "first_attempt": "2025-05-04T20:21:39.200Z", "last_attempt": "2025-05-04T22:10:54.592Z", "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    return ((time *100) + (targets * 50))\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    if (targets > 10){\\n    return 1000\\n    } else {\\n        return 0\\n    }\\n   \\n}\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n    const basePoints = calculateBasePoints(time, targets)\\n    const bonusPoints = calculateBonus(targets)\\n    // Add the results together and return the sum\\n    totalPoints = basePoints + bonusPoints\\n    return totalPoints\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\nconst finalScore = calculateFinalScore(2,5)\\nconst otherScore = calculateFinalScore (2, 12)\\nconsole.log (finalScore)\\nconsole.log (otherScore)\\n\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 163, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Object Collections", "slug": "objects-collections", "attempts": 2, "complete": true, "completed_on": "2025-05-05T02:13:20.277Z", "first_attempt": "2025-05-05T02:12:56.021Z", "last_attempt": "2025-05-05T02:13:20.277Z", "completed_code": "{'code': '// Sample appointments array\\nconst appointments = [\\n    {\\n        firstName: \"Maria\",\\n        lastName: \"Sanchez\",\\n        appointmentTime: \"2:15\"\\n    },\\n    {\\n        firstName: \"John\",\\n        lastName: \"McGrath\",\\n        appointmentTime: \"1:30\"\\n    },\\n    {\\n        firstName: \"Lamar\",\\n        lastName: \"Washington\",\\n        appointmentTime: \"10:15\"\\n    }\\n]\\n\\n// Create schedule string\\nlet schedule = \"\"\\n\\n// Add your code here to iterate the array and build the string\\n\\nfor (const scheduleInfo of appointments) {\\n    schedule += `Patient ${scheduleInfo.firstName} ${scheduleInfo.lastName} has an appointment at ${scheduleInfo.appointmentTime}\\\\n`\\n}\\n\\n\\n\\nconsole.log(schedule)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 164, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Complex Objects", "slug": "objects-complex", "attempts": 1, "complete": true, "completed_on": "2025-05-05T02:16:05.309Z", "first_attempt": "2025-05-05T02:16:05.309Z", "last_attempt": "2025-05-05T02:16:05.309Z", "completed_code": "{'code': 'const salesAssociate = {\\n    firstName: \"Rachel\",\\n    lastName: \"Martinez\",\\n    contact: {\\n        phone: \"123-456-7890\",\\n        email: \"rachel.martinez@dealership.com\",\\n        address: \"123 Car Street\"\\n    }\\n}\\n\\n// Update this code here to assign the email address to this variable\\nconst associateEmail = salesAssociate.contact.email\\n\\nconsole.log(associateEmail)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 165, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Libraries and Books", "slug": "objects-libraries", "attempts": 1, "complete": true, "completed_on": "2025-05-05T02:21:03.181Z", "first_attempt": "2025-05-05T02:21:03.181Z", "last_attempt": "2025-05-05T02:21:03.181Z", "completed_code": "{'code': 'const book = {\\n    isbn: \"0192837465\",\\n    title: \"Dreamland Chronicles\",\\n    author: {\\n        firstName: \"Sarah\",\\n        lastName: \"Thompson\",\\n        awards: [\"Hugo Award\", \"Nebula Award\"]\\n    },\\n    checkedIn: {\\n        date: \"2024-02-21\",\\n        librarian: {\\n            firstName: \"Marcus\",\\n            lastName: \"Wilson\",\\n            branch: \"Main\"\\n        }\\n    }\\n}\\n\\n// Assign the author\\'s last name to this variable\\nconst bookAuthor = book.author.lastName\\n\\n// Assign the librarian\\'s last name to this variable\\nconst checkedInBy = book.checkedIn.librarian.lastName\\n\\n\\nconsole.log(`Book Author: ${bookAuthor}`)\\nconsole.log(`Checked In By: ${checkedInBy}`)\\n\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 166, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Adding Properties", "slug": "objects-properties", "attempts": 1, "complete": true, "completed_on": "2025-05-05T02:22:37.613Z", "first_attempt": "2025-05-05T02:22:37.613Z", "last_attempt": "2025-05-05T02:22:37.613Z", "completed_code": "{'code': 'const goldfish = {\\n    name: \"Angela\",\\n    type: \"Fantail\",\\n    size: \"Small\",\\n    color: \"Golden\"\\n}\\n\\n\\ngoldfish.location = \"Large Tank\"\\n\\nconsole.log(goldfish.location)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 167, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Section Project", "slug": "objects-voting", "attempts": 2, "complete": true, "completed_on": "2025-05-05T02:30:40.421Z", "first_attempt": "2025-05-05T02:29:58.229Z", "last_attempt": "2025-05-05T02:30:40.421Z", "completed_code": "{'code': 'const votingLocation = {\\n  name: \"Commonwealth Community Center\",\\n  address: {\\n      street: {\\n          number: 70,\\n          name: \"Main Street\"\\n      },\\n      city: \"Nashville\",\\n      state: \"TN\",\\n      zipCode: \"37021\"\\n  }\\n}\\n\\n// First, add the new property\\n\\nvotingLocation.manager = \"Abigail Brown\"\\n\\n// Second, produce the required string\\nconst output = `${votingLocation.manager} manages the ${votingLocation.name} at ${votingLocation.address.street.number} ${votingLocation.address.street.name} in ${votingLocation.address.city}, ${votingLocation.address.state}`\\n\\n\\nconsole.log(output)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 168, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "HTML Elements", "slug": "html-elements", "attempts": 324, "complete": true, "completed_on": "2025-05-05T02:58:16.685Z", "first_attempt": "2025-05-05T02:47:15.549Z", "last_attempt": "2025-05-05T02:58:16.685Z", "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Profile</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n <header>\\n  <nav>\\n    <div>Home</div>\\n    <div>Projects</div>\\n    <div>Education</div>\\n  </nav>\\n </header>\\n <main>\\n  <article>\\n    <h1>Lea Edwards</h1>\\n    <section>My career history is very colorful.</section>\\n    <section>I want to become a software developer so that I can make some awesome stuff.</section>\\n  </article>\\n </main>\\n <footer>Lea Edwards, 2025, leaxedw@gmail.com</footer>\\n</body>\\n</html>', 'styles.css': '/* Basic styles */\\nbody {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n}\\n\\n/* Make navigation links display horizontally */\\nnav {\\n  display: flex;\\n}\\nnav div {\\n  margin-right: 20px;\\n}\\n\\n/* Add your additional styles here */\\n\\n\\n\\n'}}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 169, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "CSS Basics", "slug": "css-basics", "attempts": 191, "complete": true, "completed_on": "2025-05-05T03:11:03.077Z", "first_attempt": "2025-05-05T02:58:17.688Z", "last_attempt": "2025-05-05T03:11:03.077Z", "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Basics Exercise</title>\\n  <link rel=\"stylesheet\" href=\"style.css\">\\n</head>\\n<body>\\n  <article>\\n    <h1>Understanding CSS</h1>\\n    <p class=\"intro\">CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.</p>\\n\\n    <h2>Why CSS is Important</h2>\\n    <p>CSS allows web developers to:</p>\\n    <ul>\\n      <li>Control the layout of multiple web pages all at once</li>\\n      <li>Create more attractive and professional-looking websites</li>\\n      <li>Improve user experience with responsive design</li>\\n      <li>Separate content from presentation for better maintenance</li>\\n    </ul>\\n\\n    <h2>Learning CSS</h2>\\n    <p>Learning CSS is essential for anyone interested in web development. It complements HTML and JavaScript to create modern web applications.</p>\\n\\n    <div class=\"note\">\\n      <p>Note: This is just a basic introduction to CSS. There\\'s much more to learn!</p>\\n    </div>\\n\\n    <img src=\"https://picsum.photos/200/300\" alt=\"Sample Image\" />\\n  </article>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: lightblue\\n}\\n\\n/* Add your CSS styles here */\\n\\narticle {\\n  border: 1px solid black;\\n  padding: 1rem;\\n}\\n\\np {\\n  color: purple;\\n}\\n\\nimg {\\n  height: 10rem;\\n}\\n'}}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 170, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "CSS Selectors", "slug": "css-selectors", "attempts": 356, "complete": true, "completed_on": "2025-05-05T03:29:29.581Z", "first_attempt": "2025-05-05T03:11:04.389Z", "last_attempt": "2025-05-05T03:29:29.581Z", "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>CSS Selectors Exercise</title>\\n  <link rel=\"stylesheet\" href=\"styles.css\">\\n</head>\\n<body>\\n  <header id=\"main-header\">\\n    <h1>Understanding CSS Selectors</h1>\\n    <p>Learn how to target HTML elements effectively</p>\\n  </header>\\n\\n  <nav>\\n    <ul id=\"links\">\\n      <li><a href=\"#basics\">Basics</a></li>\\n      <li><a href=\"#advanced\">Advanced</a></li>\\n      <li><a href=\"#practice\">Practice</a></li>\\n    </ul>\\n  </nav>\\n\\n  <main>\\n    <section id=\"basics\">\\n      <h2>Basic Selectors</h2>\\n      <p>CSS selectors are patterns used to select HTML elements.</p>\\n      <p class=\"highlight\">Understanding selectors is crucial for effective styling.</p>\\n      <div class=\"example\">\\n        <h3>Example</h3>\\n        <p>This is an example of a <span class=\"code\">class selector</span>.</p>\\n      </div>\\n    </section>\\n\\n    <section id=\"advanced\">\\n      <h2>Advanced Selectors</h2>\\n      <p>Advanced selectors provide more precise targeting.</p>\\n      <div class=\"example\">\\n        <h3>Combinators</h3>\\n        <p>Combinators allow you to target elements based on their relationships.</p>\\n        <ul class=\"features\">\\n          <li>Descendant selectors</li>\\n          <li>Child selectors</li>\\n          <li>Adjacent sibling selectors</li>\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\"practice\">\\n      <h2>Practice</h2>\\n      <p>Practice is essential for mastering CSS selectors.</p>\\n      <form>\\n        <div class=\"form-group\">\\n          <label for=\"name\">Name:</label>\\n          <input type=\"text\" id=\"name\" placeholder=\"Your name\">\\n        </div>\\n        <div class=\"form-group\">\\n          <label for=\"email\">Email:</label>\\n          <input type=\"email\" id=\"email\" placeholder=\"Your email\">\\n        </div>\\n        <button type=\"submit\">Submit</button>\\n      </form>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <p>&copy; 2025 CSS Selectors Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  line-height: 1.6;\\n  margin: 0;\\n  padding: 3rem;\\n  color: #333;\\n}\\n\\n/* Add your CSS styles using element, class, and ID selectors */\\n\\nh1 {\\n  text-align: center;\\n}\\n\\nh2 {\\n  color: #000012;\\n}\\n\\n.highlight {\\n  text-decoration: underline;\\n}\\n\\n#advanced {\\n  color: darkred\\n}'}}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 171, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Introduction to Flexbox", "slug": "flexbox-intro", "attempts": 2, "complete": false, "completed_on": null, "first_attempt": "2025-05-05T03:29:33.733Z", "last_attempt": "2025-05-05T03:29:33.753Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 172, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Introduction to Flexbox", "slug": "flexbox-intro", "attempts": 1, "complete": false, "completed_on": null, "first_attempt": "2025-05-05T03:29:33.733Z", "last_attempt": "2025-05-05T03:29:33.733Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 173, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Flexbox Container Properties", "slug": "flexbox-container", "attempts": 472, "complete": true, "completed_on": "2025-05-05T23:22:45.326Z", "first_attempt": "2025-05-05T22:25:18.710Z", "last_attempt": "2025-05-07T04:03:38.451Z", "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Cards</title>\\n</head>\\n<body>\\n  <h1>Flexbox Card Layout</h1>\\n\\n  <div class=\"card-container\">\\n    <div class=\"card\">\\n      <h3>Card 1</h3>\\n      <p>This is the first card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 2</h3>\\n      <p>This is the second card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 3</h3>\\n      <p>This is the third card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 4</h3>\\n      <p>This is the fourth card in our flexbox layout.</p>\\n    </div>\\n\\n    <div class=\"card\">\\n      <h3>Card 5</h3>\\n      <p>This is the fifth card in our flexbox layout.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  font-size: 0.8rem;\\n  margin: 0;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  text-align: center;\\n  color: #333;\\n}\\n\\n.card {\\n  background-color: #f5f5f5;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  padding: 15px;\\n  margin: 10px;\\n  flex-basis: 20%;\\n  min-height: 8rem;\\n  display: flex;\\n  flex-wrap: wrap;\\n\\n}\\n\\n/* Add your flexbox container properties below */\\n\\n.card-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  gap: 5px;\\n}'}}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 174, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Flexbox Container Properties", "slug": "flexbox-items", "attempts": 441, "complete": true, "completed_on": "2025-05-05T23:11:14.829Z", "first_attempt": "2025-05-05T22:57:31.508Z", "last_attempt": "2025-05-05T23:11:14.829Z", "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 0;\\n  color: #333;\\n}\\n\\n/* Add your flexbox properties below */\\n\\n.logo {\\n  display: flex;\\n  justify: center;\\n}\\n\\na {\\n  text-decoration: none;\\n}\\n\\nul{ \\n  list-style-type: none; \\n}\\n\\n.navbar {\\n  display: flex;\\n    flex-direction: row;\\n}\\n\\n\\n.nav-links {\\n  display: flex;\\n  flex-direction: row;\\n  justify: space-evenly;\\n  gap: 3rem;\\n  padding: 2rem;\\n}'}}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 175, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Flexbox Container Properties", "slug": "functions-intro", "attempts": 2, "complete": true, "completed_on": "2025-05-06T01:44:45.470Z", "first_attempt": "2025-05-05T23:23:01.516Z", "last_attempt": "2025-05-06T01:44:45.470Z", "completed_code": "{'code': '// Write your function here\\n\\nfunction greetPet() {\\n    console.log(`Good dog!`)\\n}\\n\\n// This should display \"Good dog!\" when you run your code\\ngreetPet()\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 176, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Defining vs Invoking Functions", "slug": "functions-defining-invoking", "attempts": 4, "complete": true, "completed_on": "2025-05-06T01:48:16.046Z", "first_attempt": "2025-05-06T01:45:38.334Z", "last_attempt": "2025-05-06T01:48:16.046Z", "completed_code": "{'code': '// 1. Define your function here\\n\\nfunction celebrateScore() {\\n    console.log(\"Touchdown!\")\\n}\\n\\n// 2. Invoke it twice below\\n\\ncelebrateScore()\\ncelebrateScore()'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 177, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Function Names and Purpose", "slug": "functions-naming", "attempts": 29, "complete": true, "completed_on": "2025-05-09T05:05:40.611Z", "first_attempt": "2025-05-06T01:49:35.445Z", "last_attempt": "2025-05-09T05:05:40.611Z", "completed_code": "{'code': '// This function checks if a number is greater than 100\\nfunction isGreater(num) {\\n    return num > 100\\n}\\n\\n// This function adds \"Welcome\" before a name\\nfunction displayGreeting(name) {\\n    console.log(\"Welcome \" + name)\\n}\\n\\n// This function calculates the price after a 20% discount\\nfunction calculateDiscount(price) {\\n    return price * 0.8\\n}'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 178, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Introducing Parameters", "slug": "functions-parameters", "attempts": 1, "complete": true, "completed_on": "2025-05-06T02:08:39.774Z", "first_attempt": "2025-05-06T02:08:39.773Z", "last_attempt": "2025-05-06T02:08:39.774Z", "completed_code": "{'code': '/*\\n  Currently this function can only talk about running.\\n  Change it to work with any activity.\\n*/\\nfunction describeActivity(activity) {\\n    console.log(`I love ${activity}!`)\\n}\\n\\nconsole.log(describeActivity(\"hiking\"));\\nconsole.log(describeActivity(\"swimming\"));\\nconsole.log(describeActivity(\"dancing\"));'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 179, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Using Arguments", "slug": "functions-arguments", "attempts": 2, "complete": true, "completed_on": "2025-05-06T02:09:40.725Z", "first_attempt": "2025-05-06T02:09:33.830Z", "last_attempt": "2025-05-06T02:09:40.725Z", "completed_code": "{'code': '// This function adds 10% tax to a price\\nfunction calculateTotal(price) {\\n    const total = price + (price * 0.1)\\n    console.log(\"Total with tax: $\" + total)\\n}\\n\\n// Call the function three times:\\n// 1. Calculate total for $50\\n// 2. Calculate total for $99.99\\n// 3. Calculate total for $25.50\\n\\ncalculateTotal(50);\\ncalculateTotal(99.99)\\ncalculateTotal(25.50)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 180, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Multiple Parameters", "slug": "functions-multiple-parameters", "attempts": 2, "complete": true, "completed_on": "2025-05-06T02:13:58.535Z", "first_attempt": "2025-05-06T02:13:23.334Z", "last_attempt": "2025-05-06T02:13:58.535Z", "completed_code": "{'code': '/*\\n  Create your function here with two parameters.\\n  Remember to use both parameters in the message.\\n*/\\n\\nfunction displayGameScore(name, score) {\\n    let scoreMessage = `${name} scored ${score} points!`\\n    console.log(scoreMessage)\\n}\\n\\n// Then invoke the function with different player names and scores\\n\\ndisplayGameScore(\"Skrimp\", 9551)\\ndisplayGameScore(\"Optimal\", 3241)\\ndisplayGameScore(\"HamburgerPrincess13\", 6654)\\ndisplayGameScore(\"Mario\", 100)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 181, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Arrow Function Syntax", "slug": "functions-arrow-syntax", "attempts": 5, "complete": true, "completed_on": "2025-05-06T17:32:04.727Z", "first_attempt": "2025-05-06T02:54:36.710Z", "last_attempt": "2025-05-06T17:32:04.727Z", "completed_code": "{'code': '// Convert these traditional functions to arrow functions\\n\\nconst add = (x, y) => x + y\\n\\n\\nconst greet = (name) => \"Hello, \" + name + \"!\"\\n\\nconst getRandomNumber = () => Math.random()\\n\\n\\n// After converting, test your functions by invoking them here\\nconst random = getRandomNumber()\\nconst msg = greet(\"John\")\\nconst number = add(3, 4)\\n\\nconsole.log(random, msg, number)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 182, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Introduction to Return Values", "slug": "functions-return-intro", "attempts": 2, "complete": true, "completed_on": "2025-05-06T17:40:43.976Z", "first_attempt": "2025-05-06T17:36:15.334Z", "last_attempt": "2025-05-06T17:40:43.976Z", "completed_code": "{'code': '// Create an arrow function that returns \"Hello, NAME!\"\\n// For example: makeGreeting(\"John\") should return \"Hello, John!\"\\n\\nconst makeGreeting = (name) => {\\n    return `Hello, ${name}!`\\n}\\n\\n// Invoke the function and assign the return value to a variable\\n\\nconst welcomeMessage = makeGreeting(\"Alphonse\")\\n\\n// Console log the variable you used above to see the greeting\\n\\nconsole.log(welcomeMessage)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 183, "fields": {"learner_github_id": "190438557", "learner_name": "Jaiden Rothrock", "title": "Arrays with Conditions", "slug": "arrays-conditions", "attempts": 1, "complete": true, "completed_on": "2025-05-06T17:43:13.469Z", "first_attempt": "2025-05-06T17:43:13.469Z", "last_attempt": "2025-05-06T17:43:13.469Z", "completed_code": "{'code': 'const rawIngredients = [ \"beef patty\", \"egg\", \"potato\", \"egg\", \"potato\", \"beef patty\", \"beef patty\", \"potato\" ]\\nconst finishedFood = []\\n\\nfor (const ingredient of rawIngredients) {\\n  if (ingredient === \"beef patty\") {\\n    finishedFood.push(\"burger\")\\n  }\\n  else if (ingredient === \"egg\") {\\n    finishedFood.push(\"biscuit\")\\n  }\\n  else if (ingredient === \"potato\") {\\n    finishedFood.push(\"fries\")\\n  }\\n}\\n\\nconsole.log(finishedFood)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 184, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Working with Return Values", "slug": "functions-return-working", "attempts": 13, "complete": true, "completed_on": "2025-05-06T20:11:00.655Z", "first_attempt": "2025-05-06T18:11:27.198Z", "last_attempt": "2025-05-06T20:11:00.655Z", "completed_code": "{'code': '// Create calculateSubtotal here\\n\\nconst calculateSubtotal = (quantity, price) => {\\n    return quantity * price\\n}\\nconst subTotal = calculateSubtotal(3, 4.99)\\nconsole.log(subTotal)\\n// Create calculateTotal here\\n\\nconst calculateTotal = subTotal => {\\n    return (subTotal * 0.08) + subTotal\\n}\\nconst total = calculateTotal(subTotal)\\nconst roundedTotal = +total.toFixed(2)\\nconsole.log(roundedTotal)\\n// 1. Calculate subtotal for 3 items at $4.99 each\\n\\n\\n// 2. Calculate the final total with tax\\n\\n\\n// 3. Use console.log to display both results\\nconsole.log(`Subtotal: $${subTotal}`)\\nconsole.log(`Total with tax: $${roundedTotal}`)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 185, "fields": {"learner_github_id": "190438557", "learner_name": "Jaiden Rothrock", "title": "Array Length", "slug": "arrays-length", "attempts": 2, "complete": true, "completed_on": "2025-05-06T18:23:16.163Z", "first_attempt": "2025-05-06T18:23:07.324Z", "last_attempt": "2025-05-06T18:23:16.163Z", "completed_code": "{'code': 'const monthlyExpenses = [ 201, 189, 132, 238, 195 ]\\nlet totalExpense = 0\\n\\nfor (const expense of monthlyExpenses) {\\n  totalExpense += expense\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageExpense = totalExpense / monthlyExpenses.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`My total expenses are ${totalExpense} and my average monthly expenses are ${averageExpense}`)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 186, "fields": {"learner_github_id": "190438557", "learner_name": "Jaiden Rothrock", "title": "Array Practice", "slug": "arrays-practice", "attempts": 1, "complete": true, "completed_on": "2025-05-06T18:32:27.434Z", "first_attempt": "2025-05-06T18:32:27.434Z", "last_attempt": "2025-05-06T18:32:27.434Z", "completed_code": "{'code': '\\nconst weeklyMiles = [ 123, 124, 125, 126, 127 ]\\nlet totalMiles = 0\\n\\nfor (const miles of weeklyMiles) {\\n  totalMiles += miles\\n}\\n\\n// Calculate your average monthly food costs\\nconst averageMiles = totalMiles / weeklyMiles.length\\n\\n// Replace the --- with the correct, interpolated values\\nconsole.log(`I average ${averageMiles} miles each week \\nI have driven a total of ${totalMiles}`)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 187, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Return Value Practice", "slug": "functions-return-practice", "attempts": 5, "complete": true, "completed_on": "2025-05-06T20:20:05.960Z", "first_attempt": "2025-05-06T20:17:31.326Z", "last_attempt": "2025-05-06T20:20:05.960Z", "completed_code": "{'code': '// Create your arrow function here\\n  // Example: calculateGameScore(500, 2.5) should return \"High Score!\"\\n  // because 500 × 2.5 = 1250, which is >= 1000\\n\\nconst calculateGameScore = (basePoints, multiplier) => {\\n    if (basePoints * multiplier >= 1000) return `High Score!`\\n    if( basePoints * multiplier < 1000) return `Keep trying!`\\n}\\n  // Call your function with different values and store a result in a variable\\n\\nconst myScore = calculateGameScore(900, 2)\\nconst yourScore = calculateGameScore(300, 1.5)\\n\\n  // Log the result to see the output\\n\\nconsole.log(myScore)\\nconsole.log(yourScore)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 188, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Understanding Scope Basics", "slug": "functions-scope-basics", "attempts": 12, "complete": true, "completed_on": "2025-05-06T22:09:58.943Z", "first_attempt": "2025-05-06T20:43:21.918Z", "last_attempt": "2025-05-06T22:13:12.166Z", "completed_code": "{'code': '// This code has scope problems!\\n\\n\\nlet score = 0\\nconst displayScore = () => {\\n    console.log(\"Score: \" + score)\\n}\\n\\nconst updateScore = () => {\\n    score = score + 100\\n}\\n\\ndisplayScore()\\nupdateScore()\\ndisplayScore()'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 189, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Parameters and Scope", "slug": "functions-scope-parameters", "attempts": 15, "complete": true, "completed_on": "2025-05-07T02:41:13.407Z", "first_attempt": "2025-05-06T22:26:28.879Z", "last_attempt": "2025-05-07T02:41:13.407Z", "completed_code": "{'code': '// The global high score is already defined\\n\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\n// 2. Compares score to highScore\\n// 3. Updates highScore if the score is higher\\n// 4. Returns a message about the result\\n\\nconst checkHighScore = (playerName, score) => {\\n    if ( score > highScore ) {\\n        highScore = score\\n        return `New highscore - ${playerName}: ${highScore}`\\n    } else {\\n        return `No new highscore... try again`\\n    }\\n}\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\n\\nconsole.log(checkHighScore(\"Alice\", 50));\\nconsole.log(checkHighScore(\"Sam\", 110));\\nconsole.log(checkHighScore(\"Blake\", 39));\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 191, "fields": {"learner_github_id": "210622487", "learner_name": "James Freeman", "title": "Undefined", "slug": "slack-installation", "attempts": 0, "complete": true, "completed_on": "2025-05-07T00:13:14.987Z", "first_attempt": null, "last_attempt": "2025-05-07T00:13:14.987Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 192, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Flexbox Container Properties", "slug": "functions-conditions", "attempts": 9, "complete": true, "completed_on": "2025-05-07T04:54:38.440Z", "first_attempt": "2025-05-07T04:03:48.406Z", "last_attempt": "2025-05-07T04:54:38.440Z", "completed_code": "{'code': \"const calculateTicketPrice = (age, isWeekend) => {\\n      // 1. Start with the base ticket price of $10\\n\\nlet baseTicketPrice = 10;\\nlet finalPrice = baseTicketPrice\\n\\n\\n      // 2. Add $2 to the price if it's a weekend (isWeekend is true)\\n\\n\\nif (isWeekend === true) {\\n    finalPrice += 2\\n}\\n      // 3. Apply a 50% discount if the person is under 12 OR 65 or older\\n\\nif (age < 12 || age >= 65) {\\n    finalPrice *= 0.5\\n\\n}\\n\\nreturn finalPrice\\n      // 4. Return the final ticket price\\n  }\\n\\n  // Test your function with these scenarios for different ages and days:\\n  // 1. Invoke the function\\n  // 2. Store the return value in a variable\\n  // 3. Output the value with console.log()\\n\\n  // Example:\\n  // const adultWeekdayPrice = calculateTicketPrice(25, false);\\n\\nconst adultWeekdayPrice = calculateTicketPrice(25, true)\\nconsole.log(adultWeekdayPrice)\\n\\nconst seniorWeekdayPrice = calculateTicketPrice(66, false)\\nconsole.log(seniorWeekdayPrice)\\n  \\n\\n\\n\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 193, "fields": {"learner_github_id": "190438557", "learner_name": "Jaiden Rothrock", "title": "Conditions in Loops", "slug": "arrays-conditions-practice", "attempts": 3, "complete": true, "completed_on": "2025-05-07T20:37:27.828Z", "first_attempt": "2025-05-07T20:24:38.512Z", "last_attempt": "2025-05-07T20:37:27.828Z", "completed_code": "{'code': \"// Don't add or remove anything from this array\\nconst hours = [ 6, 9, 7, 8, 6, 6, 8, 5, 9, 8, 7, 6, 7, 7, 8, 6, 9 ]\\nconst grumpyHours = []\\nconst happyHours = []\\n\\nfor (const hour of hours) {\\n    if (hour >= 7) (\\n        happyHours.push(hour)\\n    )\\n    else {\\n        grumpyHours.push(hour)\\n    }\\n}\\n\\nconsole.log(`I was grumpy on ${grumpyHours} days.\\nI was happy on ${happyHours} days.`)\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 194, "fields": {"learner_github_id": "40916902", "learner_name": "Barry", "title": "Review and Practice", "slug": "functions-review", "attempts": 6, "complete": false, "completed_on": null, "first_attempt": "2025-05-07T20:30:02.937Z", "last_attempt": "2025-05-07T20:37:01.585Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 195, "fields": {"learner_github_id": "204808164", "learner_name": "Erika Hughes", "title": "String Values", "slug": "string-interpolation", "attempts": 1, "complete": true, "completed_on": "2025-05-07T21:12:32.856Z", "first_attempt": "2025-05-07T21:12:32.856Z", "last_attempt": "2025-05-07T21:12:32.856Z", "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"2024 Macbook Pro\"\\nconst phone = \"iphone 15 Pro\"\\nconst television = \"40-inch Samsung Smart\"\\nconst refrigerator = \"LG 27 cu. ft. French Door Smart\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I use my ${computer} and my ${phone} to study, my ${television} for fun and my ${refrigerator} to survive `\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 196, "fields": {"learner_github_id": "207940958", "learner_name": "Nick Segui", "title": "Undefined", "slug": "github-account", "attempts": 0, "complete": true, "completed_on": "2025-05-07T21:18:22.266Z", "first_attempt": null, "last_attempt": "2025-05-07T21:18:22.266Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 197, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Functions with Loops", "slug": "functions-loops", "attempts": 55, "complete": false, "completed_on": null, "first_attempt": "2025-05-08T03:30:52.939Z", "last_attempt": "2025-05-11T06:34:33.164Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 198, "fields": {"learner_github_id": "210836028", "learner_name": "Herbert Pollard", "title": "Undefined", "slug": "slack-installation", "attempts": 0, "complete": true, "completed_on": "2025-05-09T01:08:01.939Z", "first_attempt": null, "last_attempt": "2025-05-09T01:08:01.939Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 199, "fields": {"learner_github_id": "190438557", "learner_name": "Jaiden Rothrock", "title": "Strings Within Strings", "slug": "arrays-strings", "attempts": 1, "complete": true, "completed_on": "2025-05-08T21:31:11.250Z", "first_attempt": "2025-05-08T21:31:11.250Z", "last_attempt": "2025-05-08T21:31:11.250Z", "completed_code": "{'code': 'const coffees = [\\n    \"light colombian roast\", \"ethiopian toasty bean\",\\n    \"hawaiian dark roast\", \"guatemalan blend medium roast\",\\n    \"dark madagascar blend\", \"jamaican dark blue\",\\n    \"jamaican medium roast\", \"salvador robusto light\",\\n    \"vietnamese toasty blend\", \"peruvian light roast\"\\n]\\n\\n// Provide the correct integer default value for these variables\\nlet light = 0\\nlet medium = 0\\nlet toastyDark = 0\\n\\n\\n\\nfor (const coffee of coffees) {\\n  if (coffee.includes(\"light\")) {\\n    light++\\n  }\\n  else if (coffee.includes(\"medium\")) {\\n    medium++\\n  }\\n  else if (coffee.includes(\"toasty\") || coffee.includes(\"dark\")) {\\n    toastyDark++\\n  }\\n}\\n\\n// Use a multi-line template string to generate the expected results\\nlet output = `I need ${light} orders of the light coffee with nothing in them\\nI need ${medium} orders of the medium coffee with cream in them\\nI need ${toastyDark} orders of the toasty and dark coffees with cream and sugar in them`\\n\\n// Log your output to the console\\nconsole.log(output)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 200, "fields": {"learner_github_id": "209533182", "learner_name": "Patrick McIsaac", "title": "Flexbox Item Properties", "slug": "flexbox-items", "attempts": 659, "complete": true, "completed_on": "2025-04-29T23:45:33.967Z", "first_attempt": "2025-04-29T23:06:15.095Z", "last_attempt": "2025-04-29T23:45:33.967Z", "completed_code": "{'files': {'index.html': '<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Flexbox Exercise</title>\\n</head>\\n<body>\\n  <header>\\n    <nav class=\"navbar\">\\n      <div class=\"logo\">FlexBox Demo</div>\\n      <ul class=\"nav-links\">\\n        <li><a href=\"#\">Home</a></li>\\n        <li><a href=\"#\">About</a></li>\\n        <li><a href=\"#\">Services</a></li>\\n        <li><a href=\"#\">Contact</a></li>\\n      </ul>\\n    </nav>\\n  </header>\\n\\n  <div class=\"container\">\\n    <main class=\"content\">\\n      <h1>Learning Flexbox</h1>\\n\\n      <div class=\"cards\">\\n        <div class=\"card\">\\n          <h3>Flex Container</h3>\\n          <p>The parent element that has display: flex applied to it.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Flex Items</h3>\\n          <p>The direct children of a flex container.</p>\\n          <button>Learn More</button>\\n        </div>\\n\\n        <div class=\"card\">\\n          <h3>Main Axis</h3>\\n          <p>The primary axis along which flex items are laid out.</p>\\n          <button>Learn More</button>\\n        </div>\\n      </div>\\n    </main>\\n\\n    <aside class=\"sidebar\">\\n      <h2>Resources</h2>\\n      <ul>\\n        <li><a href=\"#\">Flexbox Guide</a></li>\\n        <li><a href=\"#\">CSS Tricks</a></li>\\n        <li><a href=\"#\">MDN Documentation</a></li>\\n      </ul>\\n\\n      <div class=\"info-box\">\\n        <p>Flexbox makes it easier to design flexible responsive layouts.</p>\\n      </div>\\n    </aside>\\n  </div>\\n\\n  <footer>\\n    <p>&copy; 2025 Flexbox Tutorial</p>\\n  </footer>\\n</body>\\n</html>', 'styles.css': '/* Add your flexbox styles here */\\n\\n* {\\n    padding: 0;\\n    margin: 0;\\n    box-sizing: border-box;\\n}\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n    color: #333;\\n  }\\n  \\n  /* Add your flexbox properties below */\\n  \\n.navbar {\\n    display: flex;\\n    justify-content: space-between;\\n    padding: 2rem;\\n}\\n\\n.logo {\\n    font-weight: 800;\\n}\\n\\n.nav-links {\\n    width: 50%;\\n    display: flex;\\n    justify-content: space-around;\\n    gap: 2rem;\\n}\\n\\nli {\\n    list-style: none;\\n}\\n\\na {\\n    text-decoration: none;\\n    color: black;\\n    font-weight: 600;\\n}\\n\\n/* MAIN CONTAINER */\\n\\n.container {\\n    width: 100vw;\\n    display: flex;\\n    justify-content: space-between;\\n    padding: 1rem;\\n    gap: 1rem;\\n}\\n\\n\\n.content {\\n    flex:1 1 2;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n.cards {\\n    display: flex;\\n    flex-wrap: wrap;\\n\\n    padding: 1rem;\\n    gap: 1rem;\\n}\\n\\n.card {\\n    border: 1px solid black;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    justify-content: space-around;\\n    width: 100%;\\n    height: 10rem;\\n    background-color: azure;\\n}\\n.card p {\\n    text-align: center;\\n    width: 13rem\\n}\\n\\n/* ASIDE */\\n\\n.sidebar {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: space-between;\\n    align-items: center;\\n    text-align: center;\\n    flex: 1;\\n    background-color: lightgray;\\n}\\n\\n.sidebar h2{\\n    margin-top: 3rem;\\n}\\n\\n.sidebar ul {\\n    margin-top: -20rem;\\n}\\n.sidebar a {\\n    color: rgb(25, 36, 136);\\n    font-size: 1rem;\\n    font-weight: 300;\\n}\\n\\n.info-box {\\n    margin-bottom: 1rem;\\n}\\n\\n'}}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 201, "fields": {"learner_github_id": "190438557", "learner_name": "Jaiden Rothrock", "title": "Strings and Arrays Conversion", "slug": "arrays-split-join", "attempts": 8, "complete": true, "completed_on": "2025-05-08T23:18:56.077Z", "first_attempt": "2025-05-08T23:04:52.979Z", "last_attempt": "2025-05-08T23:18:56.077Z", "completed_code": "{'code': '// The string containing all personality disorders\\nconst disorders = \"Depression|$|Bipolar|$|Manic|$|Anxiety|$|Anorexia|$|Posttraumtic Stress|$|Seasonal Affective|$|Bulimia\"\\n\\n/*\\n Step 1. Split the string into an array\\n*/\\nconst disorderArray = disorders.split(\"|$|\")\\n\\n\\n/*\\n Step 2. Create a string from the array with a div element as the delimiter\\n         </div><div>\\n*/\\nconst htmlString = disorderArray.join(\"</div><div>\")\\n\\n\\n/*\\n Step 3. Create a string with the opening and closing <div> tags surrounding it\\n*/\\nconst output = (`<div>${htmlString}</div>`)\\n\\n\\n// Display the output\\nconsole.log(output)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 202, "fields": {"learner_github_id": "190438557", "learner_name": "Jaiden Rothrock", "title": "Section Project", "slug": "arrays-review", "attempts": 2, "complete": true, "completed_on": "2025-05-09T00:36:58.692Z", "first_attempt": "2025-05-09T00:24:24.081Z", "last_attempt": "2025-05-09T00:36:58.692Z", "completed_code": "{'code': '// Sample monthly expenses\\nconst monthlyExpenses = [\\n    \"Kroger Groceries:251\", \"Uber:39\", \"Netflix Movie Service:12\",\\n    \"Utility Internet:85\", \"Old Navy Clothing:145\", \"Lyft:34\",\\n    \"Utility Electric:91\", \"Clothing Outlet:122\",\\n    \"Fast Food Restaurant:18\", \"Shell Fuel:42\", \"Movie Theater:44\",\\n    \"Utility Water:27\", \"Best Buy Electronics:299\", \"Apple Store:899\",\\n    \"Gas Station:31\", \"Movie Rental:4\", \"Amazon:112\", \"Gas Station:33\",\\n    \"Movie Theater:47\", \"Utility Electric:88\", \"Clothing Outlet:112\",\\n    \"Fast Food Restaurant:21\", \"Shell Fuel:42\", \"Movie Theater:44\"\\n]\\n\\n// Arrays for categories and the words to look for\\nconst clothing = []        // \"Clothing\"\\nconst entertainment = []   // \"Movie\"\\nconst food = []            // \"Groceries\" or \"Restaurant\"\\nconst fuel = []            // \"Fuel\" or \"Gas\"\\nconst travel = []          // \"Lyft\" or \"Uber\"\\nconst utilities = []       // \"Utility\"\\nconst largePurchases = []  // Expenses over 100.00\\n\\n// Totals and averages\\nlet totalExpenses = 0\\nlet averageExpense = 0\\n\\nfor (const expense of monthlyExpenses) {\\n  const [vendor, amount] = expense.split(\":\")\\n  const cost = parseFloat(amount)\\n  \\n  totalExpenses += cost\\n\\n  if (cost > 100.00) {\\n    largePurchases.push(cost)\\n  }\\n\\n  if (vendor.includes(\"Clothing\")) {\\n    clothing.push(cost)\\n  }\\n  else if (vendor.includes(\"Movie\")) {\\n    entertainment.push(cost)\\n  }\\n  else if (vendor.includes(\"Fuel\") || vendor.includes(\"Gas\")) {\\n    fuel.push(cost)\\n  }\\n  else if (vendor.includes(\"Utility\")) {\\n    utilities.push(cost)\\n  }\\n  else if (vendor.includes(\"Groceries\") || vendor.includes(\"Restaurant\")) {\\n    food.push(cost)\\n  }\\n  else if (vendor.includes(\"Lyft\") || vendor.includes(\"Uber\")) {\\n    travel.push(cost)\\n  }\\n}\\n\\naverageExpense = totalExpenses / monthlyExpenses.length\\n\\nconsole.log(`Clothing: ${clothing.join(\" ,\")}`)\\nconsole.log(`Movie: ${entertainment.join(\" ,\")}`)\\nconsole.log(`Fuel: ${fuel.join(\" ,\")}`)\\nconsole.log(`Utility: ${utilities.join(\" ,\")}`)\\nconsole.log(`Groceries: ${food.join(\" ,\")}`)\\nconsole.log(`Travel: ${travel.join(\" ,\")}`)\\nconsole.log(`Large Purchases: ${largePurchases.join(\" ,\")}`)\\n\\nconsole.log(`Total Expenses: ${totalExpenses}`)\\nconsole.log(`Average Expense: ${averageExpense.toFixed(2)}`)\\n\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 203, "fields": {"learner_github_id": "210836028", "learner_name": "Herbert Pollard", "title": "Undefined", "slug": "github-account", "attempts": 0, "complete": true, "completed_on": "2025-05-09T01:07:59.147Z", "first_attempt": null, "last_attempt": "2025-05-09T01:07:59.147Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 204, "fields": {"learner_github_id": "210836028", "learner_name": "Herbert Pollard", "title": "Undefined", "slug": "visual-studio-code", "attempts": 0, "complete": true, "completed_on": "2025-05-09T01:08:01.137Z", "first_attempt": null, "last_attempt": "2025-05-09T01:08:01.137Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 205, "fields": {"learner_github_id": "210836028", "learner_name": "Herbert Pollard", "title": "Undefined", "slug": "anthropic-account", "attempts": 0, "complete": true, "completed_on": "2025-05-09T01:08:00.266Z", "first_attempt": null, "last_attempt": "2025-05-09T01:08:00.266Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 206, "fields": {"learner_github_id": "209533182", "learner_name": "Patrick McIsaac", "title": "Section Project", "slug": "variables-review", "attempts": 29, "complete": true, "completed_on": "2025-05-09T01:22:49.497Z", "first_attempt": "2025-04-28T19:48:28.470Z", "last_attempt": "2025-05-09T01:22:49.497Z", "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos = femalePhotos + malePhotos\\n\\n// Determine storage type based on total\\nif(totalPhotos > 110){\\n    photoStorage = \"Photo Album\"\\n}else if (totalPhotos >= 50){\\n    photoStorage = \"Shoe Box\"\\n}else {\\n    photoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos){\\n    albumColor = \"plum\"\\n}else {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output = `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 207, "fields": {"learner_github_id": "209533182", "learner_name": "Patrick McIsaac", "title": "Parameters and Scope", "slug": "functions-scope-parameters", "attempts": 11, "complete": true, "completed_on": "2025-05-09T01:28:40.799Z", "first_attempt": "2025-04-29T21:26:27.573Z", "last_attempt": "2025-05-09T01:28:40.799Z", "completed_code": "{'code': '// The global high score is already defined\\nlet highScore = 0\\n\\n// Create an arrow function named \\'checkHighScore\\' that:\\n// 1. Takes playerName and score as parameters\\nconst checkHighScore = (playerName, score) => {\\n// 2. Compares score to highScore\\n    if(score > highScore){\\n// 3. Updates highScore if the score is higher\\n        highScore = score\\n        return `${playerName}\\'s score is now ${score}`\\n    }else {\\n        return `high score is ${highScore}`\\n    }\\n// 4. Returns a message about the result\\n\\n}\\n\\n\\n\\n// Test your function with multiple calls below\\n// Example: console.log(checkHighScore(\"Alice\", 50))\\nconsole.log(checkHighScore(\\'alice\\', 50))\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 208, "fields": {"learner_github_id": "209533182", "learner_name": "Patrick McIsaac", "title": "Functions with Loops", "slug": "functions-loops", "attempts": 19, "complete": false, "completed_on": null, "first_attempt": "2025-04-29T21:51:29.238Z", "last_attempt": "2025-05-09T01:35:33.409Z", "completed_code": null, "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 209, "fields": {"learner_github_id": "210836028", "learner_name": "Herbert Pollard", "title": "Variables Introduction", "slug": "variables-intro", "attempts": 3, "complete": true, "completed_on": "2025-05-09T13:51:05.492Z", "first_attempt": "2025-05-09T01:37:10.113Z", "last_attempt": "2025-05-09T13:51:05.492Z", "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 165\\nlet marchBill = 122\\nlet aprilBill = 341\\nlet mayBill = 124\\nlet juneBill = 123\\nlet julyBill = 143\\nlet augustBill = 148\\nlet septemberBill  = 116\\nlet octoberBill = 175\\nlet novemberBill = 263\\nlet decemberBill  = 123\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 210, "fields": {"learner_github_id": "209533182", "learner_name": "Patrick McIsaac", "title": "Data Types", "slug": "leonids-data-types", "attempts": 9, "complete": true, "completed_on": "2025-05-09T01:43:54.762Z", "first_attempt": "2025-05-09T01:40:02.995Z", "last_attempt": "2025-05-09T01:43:54.762Z", "completed_code": "{'code': 'function createToy(name, category, ageRecommendation, isBatteryOperated, features, dimensions) {\\n    return {\\n        name,\\n        category,\\n        ageRecommendation,\\n        isBatteryOperated,\\n        features,\\n        dimensions\\n    };\\n}\\n\\n// TODO: Call createToy with the correct data types\\nconst myToy = createToy( \"john\", \"toything\", 5, false, [\\'stuff\\',\\'things\\'],{height:3, width:4,});\\nconsole.log(myToy)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 211, "fields": {"learner_github_id": "209533182", "learner_name": "Patrick McIsaac", "title": "Data Structures", "slug": "leonids-data-structures", "attempts": 2, "complete": true, "completed_on": "2025-05-09T01:52:02.080Z", "first_attempt": "2025-05-09T01:51:39.393Z", "last_attempt": "2025-05-09T01:52:02.080Z", "completed_code": "{'code': '\\n    const inventory = [\\n  { id: 101, name: \"Hand-Carved Wooden Train\", maker: \"Leonid\" },\\n  { id: 102, name: \"Painted Rocking Horse\", maker: \"Leonid\" },\\n  { id: 103, name: \"Stuffed Bear with Bow Tie\", maker: \"Leonid\" },\\n  { id: 104, name: \"Miniature Sailboat\", maker: \"Leonid\" },\\n  { id: 105, name: \"Patchwork Doll\", maker: \"Leonid\" },\\n  { id: 106, name: \"Wooden Puzzle Box\", maker: \"Leonid\" },\\n  { id: 107, name: \"Knitted Sock Monkey\", maker: \"Leonid\" },\\n  { id: 108, name: \"Spinning Top\", maker: \"Leonid\" },\\n  { id: 109, name: \"Tiny Puppet Theater\", maker: \"Leonid\" },\\n  { id: 110, name: \"Hand-Painted Marbles\", maker: \"Leonid\" },\\n  { id: 111, name: \"Fabric Kite with Tail\", maker: \"Leonid\" },\\n  { id: 112, name: \"Wool-Stuffed Bunny\", maker: \"Leonid\" },\\n  { id: 113, name: \"Wooden Xylophone\", maker: \"Leonid\" },\\n  { id: 114, name: \"Tin Wind-Up Robot\", maker: \"Leonid\" },\\n  { id: 115, name: \"Miniature Toy Chest\", maker: \"Leonid\" }\\n];\\n\\nfunction findToyById(toys, id) {\\n  // Your code here\\n  for(const toy of toys){\\n    if(toy.id === id ) {\\n        return toy\\n    } else {\\n        return null\\n    }\\n  }\\n}\\n\\nconst myToy = findToyById(inventory, 105)\\nconsole.log(myToy)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 212, "fields": {"learner_github_id": "209533182", "learner_name": "Patrick McIsaac", "title": "Representing Toys as Objects", "slug": "leonids-objects", "attempts": 5, "complete": true, "completed_on": "2025-05-09T01:59:39.928Z", "first_attempt": "2025-05-09T01:55:55.777Z", "last_attempt": "2025-05-09T01:59:39.928Z", "completed_code": "{'code': \"const woodenTrain = {\\n    name: 'dollie',\\n    manufacturer: 'toyota',\\n    priceInDollars: 123,\\n    inStock: false,\\n    recommendedAgeRange: '12 -13',\\n    weightInGrams: null\\n}\\nconst stuffedRabbit = {\\n    name: 'dollie',\\n    manufacturer: 'toyota',\\n    priceInDollars: null,\\n    inStock: false,\\n    recommendedAgeRange: '12 -13',\\n    weightInGrams: 33\\n}\\nconst kite = {\\n    name: 'dollie',\\n    manufacturer: null,\\n    priceInDollars: 123,\\n    inStock: false,\\n    recommendedAgeRange: '12 -13',\\n    weightInGrams: 2\\n}\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 213, "fields": {"learner_github_id": "210836028", "learner_name": "Herbert Pollard", "title": "String Values", "slug": "string-interpolation", "attempts": 7, "complete": true, "completed_on": "2025-05-09T15:31:21.833Z", "first_attempt": "2025-05-09T02:13:11.597Z", "last_attempt": "2025-05-09T15:31:21.833Z", "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Lenovo Thinkbook 13x Gen 4\"\\nconst phone = \"Galaxy S24Plus\"\\nconst television = \"Samsung Tv\"\\nconst refrigerator = \"Samsung Refrigerator\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic device. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 214, "fields": {"learner_github_id": "210836028", "learner_name": "Herbert Pollard", "title": "\"Scary\" Math Operations", "slug": "math-operations", "attempts": 7, "complete": true, "completed_on": "2025-05-09T15:31:29.942Z", "first_attempt": "2025-05-09T13:19:42.033Z", "last_attempt": "2025-05-09T15:31:29.942Z", "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - internetBill - waterBill - electricBill - fuelExpenses - foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 215, "fields": {"learner_github_id": "210836028", "learner_name": "Herbert Pollard", "title": "Multi-line Strings", "slug": "multiline-strings", "attempts": 22, "complete": true, "completed_on": "2025-05-09T15:31:40.007Z", "first_attempt": "2025-05-09T13:24:27.485Z", "last_attempt": "2025-05-09T15:31:40.007Z", "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\nconsole.log(`combined monthly income: ${myIncome + spouseIncome}`)\\n// 2. Total monthly expenses\\nconsole.log(`Total monthly expenses: ${phoneBill + mortgage + carInsurance + healthInsurance}`)\\n// 3. Net monthly income\\nconsole.log(`Monthly income: ${myIncome + spouseIncome}`)\\n// Use backticks and calculations here\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${myIncome + spouseIncome - (phoneBill + mortgage + carInsurance + healthInsurance)}.`'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 216, "fields": {"learner_github_id": "210622487", "learner_name": "James Freeman", "title": "Variables Introduction", "slug": "variables-intro", "attempts": 1, "complete": true, "completed_on": "2025-05-09T14:31:00.714Z", "first_attempt": "2025-05-09T14:30:33.473Z", "last_attempt": "2025-05-09T14:31:00.714Z", "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nlet februaryBill = 160\\nlet marchBill = 130\\nlet aprilBill = 108\\nlet mayBill = 110\\nlet juneBill = 125\\nlet julyBill = 132\\nlet augustBill = 140\\nlet septemberBill = 118\\nlet octoberBill = 123\\nlet novemberBill = 137\\nlet decemberBill = 148\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + \\n                    aprilBill + mayBill + juneBill + julyBill\\n                    + augustBill + septemberBill + octoberBill\\n                    + novemberBill + decemberBill;\\n                                     \\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 217, "fields": {"learner_github_id": "198821962", "learner_name": "Michael Scott Burke", "title": "Undefined", "slug": "github-account", "attempts": 0, "complete": true, "completed_on": "2025-05-09T14:42:00.207Z", "first_attempt": null, "last_attempt": "2025-05-09T14:42:00.207Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 218, "fields": {"learner_github_id": "198821962", "learner_name": "Michael Scott Burke", "title": "Undefined", "slug": "anthropic-account", "attempts": 0, "complete": true, "completed_on": "2025-05-09T14:48:09.588Z", "first_attempt": null, "last_attempt": "2025-05-09T14:48:09.588Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 219, "fields": {"learner_github_id": "210622487", "learner_name": "James Freeman", "title": "String Values", "slug": "string-interpolation", "attempts": 1, "complete": true, "completed_on": "2025-05-09T14:51:39.825Z", "first_attempt": "2025-05-09T14:51:39.824Z", "last_attempt": "2025-05-09T14:51:39.825Z", "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Dell Laptop\"\\nconst phone = \"iPhone 13\"\\nconst television = \"Roku 60 inch Flatscreen\"\\nconst refrigerator = \"Frigidaire 6000\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}.`;\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 220, "fields": {"learner_github_id": "198821962", "learner_name": "Michael Scott Burke", "title": "Undefined", "slug": "visual-studio-code", "attempts": 0, "complete": true, "completed_on": "2025-05-09T14:51:50.430Z", "first_attempt": null, "last_attempt": "2025-05-09T14:51:50.430Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 221, "fields": {"learner_github_id": "198821962", "learner_name": "Michael Scott Burke", "title": "Undefined", "slug": "slack-installation", "attempts": 0, "complete": true, "completed_on": "2025-05-09T15:06:15.470Z", "first_attempt": null, "last_attempt": "2025-05-09T15:06:15.471Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 222, "fields": {"learner_github_id": "210622487", "learner_name": "James Freeman", "title": "\"Scary\" Math Operations", "slug": "math-operations", "attempts": 2, "complete": true, "completed_on": "2025-05-09T15:32:23.299Z", "first_attempt": "2025-05-09T15:31:36.127Z", "last_attempt": "2025-05-09T15:32:23.299Z", "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome\\ncombinedIncome += spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome = combinedIncome - internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 223, "fields": {"learner_github_id": "210836028", "learner_name": "Herbert Pollard", "title": "String Methods", "slug": "string-methods", "attempts": 21, "complete": true, "completed_on": "2025-05-09T16:33:26.066Z", "first_attempt": "2025-05-09T15:35:02.947Z", "last_attempt": "2025-05-09T16:33:26.066Z", "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"X\")\\nconst fileStart = filename.slice(0,4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 224, "fields": {"learner_github_id": "210622487", "learner_name": "James Freeman", "title": "Multi-line Strings", "slug": "multiline-strings", "attempts": 19, "complete": true, "completed_on": "2025-05-09T17:52:33.059Z", "first_attempt": "2025-05-09T15:47:41.871Z", "last_attempt": "2025-05-09T17:52:33.059Z", "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\nconsole.log(`Combined monthly income: ${myIncome + spouseIncome}`)\\nconsole.log(`Total monthly expenses: ${phoneBill + mortgage + carInsurance + healthInsurance}`)\\nconsole.log(`Net monthly income: ${myIncome + spouseIncome - phoneBill - mortgage - carInsurance - healthInsurance}`)\\n // Use backticks and calculations here'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 225, "fields": {"learner_github_id": "210299267", "learner_name": "Bedon Lancaster", "title": "Undefined", "slug": "slack-installation", "attempts": 0, "complete": true, "completed_on": "2025-05-09T16:02:01.222Z", "first_attempt": null, "last_attempt": "2025-05-09T16:02:01.222Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 226, "fields": {"learner_github_id": "202809763", "learner_name": "Dylan Johnson", "title": "Undefined", "slug": "slack-installation", "attempts": 0, "complete": true, "completed_on": "2025-05-09T16:02:49.888Z", "first_attempt": null, "last_attempt": "2025-05-09T16:02:49.888Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 227, "fields": {"learner_github_id": "210299267", "learner_name": "Bedon Lancaster", "title": "Variables Introduction", "slug": "variables-intro", "attempts": 2, "complete": true, "completed_on": "2025-05-09T16:28:09.376Z", "first_attempt": "2025-05-09T16:27:11.461Z", "last_attempt": "2025-05-09T16:28:09.376Z", "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 69\\nlet marchBill = 420\\nlet aprilBill = 420\\nlet mayBill = 69\\nlet juneBill = 420\\nlet julyBill = 69\\nlet augustBill = 420\\nlet septemberBill = 69\\nlet octoberBill = 420\\nlet novemberBill = 69\\nlet decemberBill = 420\\n\\nlet yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 228, "fields": {"learner_github_id": "210299267", "learner_name": "Bedon Lancaster", "title": "String Values", "slug": "string-interpolation", "attempts": 1, "complete": true, "completed_on": "2025-05-09T16:31:18.558Z", "first_attempt": "2025-05-09T16:31:18.557Z", "last_attempt": "2025-05-09T16:31:18.558Z", "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"MacBook Pro\"\\nconst phone = \"iPhone 16\"\\nconst television = \"Phillips 55 inch\"\\nconst refrigerator = \"Fucking fridge\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 229, "fields": {"learner_github_id": "209769569", "learner_name": "Gary Venus", "title": "Undefined", "slug": "github-account", "attempts": 0, "complete": true, "completed_on": "2025-05-09T16:35:07.820Z", "first_attempt": null, "last_attempt": "2025-05-09T16:35:07.820Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 230, "fields": {"learner_github_id": "210299267", "learner_name": "Bedon Lancaster", "title": "\"Scary\" Math Operations", "slug": "math-operations", "attempts": 1, "complete": true, "completed_on": "2025-05-09T16:37:00.705Z", "first_attempt": "2025-05-09T16:37:00.704Z", "last_attempt": "2025-05-09T16:37:00.705Z", "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\nconst totalBills = internetBill + waterBill + electricBill + fuelExpenses + foodExpenses\\nconsole.log(totalBills)\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\nconsole.log(combinedIncome)\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - totalBills\\nconsole.log(netIncome)\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 231, "fields": {"learner_github_id": "210299267", "learner_name": "Bedon Lancaster", "title": "Multi-line Strings", "slug": "multiline-strings", "attempts": 8, "complete": true, "completed_on": "2025-05-09T20:10:19.608Z", "first_attempt": "2025-05-09T16:53:33.956Z", "last_attempt": "2025-05-09T20:10:19.608Z", "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n// const bigIncome = myIncome + spouseIncome\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// const monthlyExpenses = phoneBill + mortgage + carInsurance + healthInsurance\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\nconsole.log(statement)'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 232, "fields": {"learner_github_id": "209769569", "learner_name": "Gary Venus", "title": "Variables Introduction", "slug": "variables-intro", "attempts": 1, "complete": true, "completed_on": "2025-05-09T16:54:34.894Z", "first_attempt": "2025-05-09T16:54:34.893Z", "last_attempt": "2025-05-09T16:54:34.894Z", "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 230\\nlet marchBill = 130\\nlet aprilBill= 45\\nlet mayBill=65\\nlet juneBill=70\\nlet julyBill=86\\nlet augustBill=90\\nlet septemberBill=100\\nlet octoberBill=120\\nlet novemberBill=340\\nlet decemberBill=120\\n\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = \\njanuaryBill+februaryBill+marchBill+aprilBill+mayBill+juneBill+julyBill+augustBill+septemberBill+\\noctoberBill+novemberBill+decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 233, "fields": {"learner_github_id": "202809763", "learner_name": "Dylan Johnson", "title": "String Values", "slug": "string-interpolation", "attempts": 2, "complete": true, "completed_on": "2025-05-09T16:58:29.130Z", "first_attempt": "2025-05-09T16:58:00.638Z", "last_attempt": "2025-05-09T16:58:29.130Z", "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Dell\"\\nconst phone = \"IPhone 5\"\\nconst television = \"Samsung 4K\"\\nconst refrigerator = \"The Fridge\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = \"I have the following electronic devices. my ${television}, my ${computer}, my ${refrigerator}, and my ${phone}\"\\n\\n// Your sentence should look like:\\n// `I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone`\\n\\nconsole.log(allElectronics)\\nconsole.log(allElectronics)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 234, "fields": {"learner_github_id": "209769569", "learner_name": "Gary Venus", "title": "String Values", "slug": "string-interpolation", "attempts": 2, "complete": true, "completed_on": "2025-05-09T17:01:20.585Z", "first_attempt": "2025-05-09T17:00:33.619Z", "last_attempt": "2025-05-09T17:01:20.585Z", "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"mac\"\\nconst phone = \"iphone\"\\nconst television = \"samsung\"\\nconst refrigerator = \"whirlpool\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. my ${television} television, my ${computer} computer,my ${refrigerator} refrigerator, and my ${phone} phone`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 235, "fields": {"learner_github_id": "202809763", "learner_name": "Dylan Johnson", "title": "\"Scary\" Math Operations", "slug": "math-operations", "attempts": 3, "complete": true, "completed_on": "2025-05-09T18:16:27.674Z", "first_attempt": "2025-05-09T18:14:51.573Z", "last_attempt": "2025-05-09T18:16:27.674Z", "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 7900\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 6747\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 236, "fields": {"learner_github_id": "208382732", "learner_name": "Gavin Beaudet", "title": "Undefined", "slug": "slack-installation", "attempts": 0, "complete": true, "completed_on": "2025-05-09T18:14:30.264Z", "first_attempt": null, "last_attempt": "2025-05-09T18:14:30.264Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 237, "fields": {"learner_github_id": "209552604", "learner_name": "Stephen", "title": "Undefined", "slug": "slack-installation", "attempts": 0, "complete": true, "completed_on": "2025-05-09T18:15:36.730Z", "first_attempt": null, "last_attempt": "2025-05-09T18:15:36.730Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 238, "fields": {"learner_github_id": "209769569", "learner_name": "Gary Venus", "title": "\"Scary\" Math Operations", "slug": "math-operations", "attempts": 2, "complete": true, "completed_on": "2025-05-09T18:18:50.286Z", "first_attempt": "2025-05-09T18:17:30.072Z", "last_attempt": "2025-05-09T18:18:50.286Z", "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\nlet allBills= internetBill+waterBill+electricBill+fuelExpenses+foodExpenses\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - allBills\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 239, "fields": {"learner_github_id": "209769569", "learner_name": "Gary Venus", "title": "Multi-line Strings", "slug": "multiline-strings", "attempts": 15, "complete": true, "completed_on": "2025-05-09T19:04:05.548Z", "first_attempt": "2025-05-09T18:19:42.684Z", "last_attempt": "2025-05-09T19:04:05.548Z", "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n//const statement = `Our combined monthly income is ${myIncome + spouseIncome}\\n//Our total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}\\n//Our net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}`\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\nconsole.log(statement)'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 240, "fields": {"learner_github_id": "209552604", "learner_name": "Stephen", "title": "Variables Introduction", "slug": "variables-intro", "attempts": 3, "complete": true, "completed_on": "2025-05-09T18:33:03.099Z", "first_attempt": "2025-05-09T18:25:34.529Z", "last_attempt": "2025-05-09T18:33:03.099Z", "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\nlet februaryBill = 123\\nlet marchBill = 134\\nlet aprilBill = 156\\nlet mayBill = 143\\nlet juneBill = 145\\nlet julyBill = 145\\nlet augustBill = 132\\nlet septemberBill = 165\\nlet octoberBill = 194\\nlet novemberBill = 130\\nlet decemberBill = 156\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 241, "fields": {"learner_github_id": "208865850", "learner_name": "Kolby Simons", "title": "Variables Introduction", "slug": "variables-intro", "attempts": 2, "complete": true, "completed_on": "2025-05-09T18:29:13.705Z", "first_attempt": "2025-05-09T18:28:59.381Z", "last_attempt": "2025-05-09T18:29:13.705Z", "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 153\\nlet marchBill = 130\\nlet aprilBill = 125\\nlet mayBill = 100\\nlet juneBill = 123\\nlet julyBill = 134\\nlet augustBill = 121\\nlet septemberBill = 113\\nlet octoberBill = 118\\nlet novemberBill = 132\\nlet decemberBill = 148\\n\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill;\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 242, "fields": {"learner_github_id": "202809763", "learner_name": "Dylan Johnson", "title": "Multi-line Strings", "slug": "multiline-strings", "attempts": 2, "complete": false, "completed_on": null, "first_attempt": "2025-05-09T18:30:53.462Z", "last_attempt": "2025-05-09T19:01:33.908Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 243, "fields": {"learner_github_id": "208865850", "learner_name": "Kolby Simons", "title": "String Values", "slug": "string-interpolation", "attempts": 1, "complete": true, "completed_on": "2025-05-09T18:35:07.036Z", "first_attempt": "2025-05-09T18:35:07.036Z", "last_attempt": "2025-05-09T18:35:07.036Z", "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Custom gaming PC\"\\nconst phone = \"Iphone 14 Pro Max\"\\nconst television = \"47 inch Sony\"\\nconst refrigerator = \"LG\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `My devices are, Fridge: ${refrigerator}, Phone: ${phone}, Tv: ${television}, Computer: ${computer}`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 244, "fields": {"learner_github_id": "208865850", "learner_name": "Kolby Simons", "title": "\"Scary\" Math Operations", "slug": "math-operations", "attempts": 2, "complete": true, "completed_on": "2025-05-09T18:40:11.754Z", "first_attempt": "2025-05-09T18:38:32.059Z", "last_attempt": "2025-05-09T18:40:11.754Z", "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\nlet totalBills = internetBill + waterBill + electricBill + fuelExpenses + foodExpenses;\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome;\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - totalBills\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 245, "fields": {"learner_github_id": "209552604", "learner_name": "Stephen", "title": "String Values", "slug": "string-interpolation", "attempts": 1, "complete": true, "completed_on": "2025-05-09T18:44:40.140Z", "first_attempt": "2025-05-09T18:44:40.139Z", "last_attempt": "2025-05-09T18:44:40.140Z", "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"Macbook Pro\"\\nconst phone = \"Iphone\"\\nconst television = \"Sony\"\\nconst refrigerator = \"Sampson\";\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics =`I have the following electronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}`\\n\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 246, "fields": {"learner_github_id": "208865850", "learner_name": "Kolby Simons", "title": "Multi-line Strings", "slug": "multiline-strings", "attempts": 6, "complete": true, "completed_on": "2025-05-09T18:51:54.313Z", "first_attempt": "2025-05-09T18:47:36.950Z", "last_attempt": "2025-05-09T18:51:54.313Z", "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.` // Use backticks and calculations here\\n\\nconsole.log(statement);'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 247, "fields": {"learner_github_id": "209552604", "learner_name": "Stephen", "title": "\"Scary\" Math Operations", "slug": "math-operations", "attempts": 1, "complete": true, "completed_on": "2025-05-09T18:52:29.534Z", "first_attempt": "2025-05-09T18:52:29.533Z", "last_attempt": "2025-05-09T18:52:29.534Z", "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 248, "fields": {"learner_github_id": "208382732", "learner_name": "Gavin Beaudet", "title": "Multi-line Strings", "slug": "multiline-strings", "attempts": 7, "complete": true, "completed_on": "2025-05-09T19:04:44.428Z", "first_attempt": "2025-05-09T18:53:50.013Z", "last_attempt": "2025-05-09T19:04:44.428Z", "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses;\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 249, "fields": {"learner_github_id": "208382732", "learner_name": "Gavin Beaudet", "title": "Variables Introduction", "slug": "variables-intro", "attempts": 1, "complete": true, "completed_on": "2025-05-09T19:00:28.210Z", "first_attempt": "2025-05-09T19:00:28.209Z", "last_attempt": "2025-05-09T19:00:28.210Z", "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145;\\n\\n// Declare variables for the remaining months with the `let` keyword\\nlet februaryBill = 130;\\nlet marchBill = 150;\\nlet aprilBill = 120;\\nlet mayBill = 135;\\nlet juneBill = 160;\\nlet julyBill = 170;\\nlet augustBill = 165;\\nlet septemberBill = 140;\\nlet octoberBill = 125;\\nlet novemberBill = 155;\\nlet decemberBill = 180;\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n*/\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill;\\n\\n// console.log will print the value of the variable to the console\\nconsole.log(yearlyTotal);\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 250, "fields": {"learner_github_id": "208382732", "learner_name": "Gavin Beaudet", "title": "String Values", "slug": "string-interpolation", "attempts": 1, "complete": true, "completed_on": "2025-05-09T19:00:47.053Z", "first_attempt": "2025-05-09T19:00:47.053Z", "last_attempt": "2025-05-09T19:00:47.053Z", "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"laptop\";\\nconst phone = \"smartphone\";\\nconst television = \"LED TV\";\\nconst refrigerator = \"double-door fridge\";\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television}, my ${computer}, my ${refrigerator}, and my ${phone}.`;\\n\\nconsole.log(allElectronics);\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 251, "fields": {"learner_github_id": "208382732", "learner_name": "Gavin Beaudet", "title": "\"Scary\" Math Operations", "slug": "math-operations", "attempts": 3, "complete": true, "completed_on": "2025-05-09T19:02:26.527Z", "first_attempt": "2025-05-09T19:01:29.990Z", "last_attempt": "2025-05-09T19:02:26.527Z", "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388;\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512;\\n\\n// Monthly bills\\nconst internetBill = 158;\\nconst waterBill = 68;\\nconst electricBill = 129;\\nconst fuelExpenses = 295;\\nconst foodExpenses = 503;\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome;\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome - (internetBill + waterBill + electricBill + fuelExpenses + foodExpenses);\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`;\\n\\nconsole.log(output);\\n\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 252, "fields": {"learner_github_id": "208865850", "learner_name": "Kolby Simons", "title": "String Methods", "slug": "string-methods", "attempts": 2, "complete": true, "completed_on": "2025-05-09T19:06:27.041Z", "first_attempt": "2025-05-09T19:05:41.882Z", "last_attempt": "2025-05-09T19:06:27.041Z", "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim();\\nconst formattedPhone = phone.replace(\" \", \"-\");\\nconst formattedName = customerName.toUpperCase(0);\\nconst containsX = password.includes(\"x\");\\nconst fileStart = filename.slice(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 253, "fields": {"learner_github_id": "209769569", "learner_name": "Gary Venus", "title": "String Methods", "slug": "string-methods", "attempts": 4, "complete": true, "completed_on": "2025-05-09T19:39:50.703Z", "first_attempt": "2025-05-09T19:21:09.087Z", "last_attempt": "2025-05-09T19:39:50.703Z", "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone =phone.replace(\" \" , \"-\") \\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice (0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 254, "fields": {"learner_github_id": "208865850", "learner_name": "Kolby Simons", "title": "Conditional Logic", "slug": "boolean-logic", "attempts": 3, "complete": true, "completed_on": "2025-05-09T19:32:39.976Z", "first_attempt": "2025-05-09T19:30:52.033Z", "last_attempt": "2025-05-09T19:32:39.976Z", "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n} else {\\n    console.log(\"Netlix had nothing to watch.\")\\n}'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 255, "fields": {"learner_github_id": "209552604", "learner_name": "Stephen", "title": "Multi-line Strings", "slug": "multiline-strings", "attempts": 16, "complete": true, "completed_on": "2025-05-09T20:28:51.902Z", "first_attempt": "2025-05-09T19:32:47.703Z", "last_attempt": "2025-05-09T20:28:51.902Z", "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\n\\nconsole.log(statement)'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 256, "fields": {"learner_github_id": "208865850", "learner_name": "Kolby Simons", "title": "Less Than, More Than", "slug": "evaluations", "attempts": 9, "complete": true, "completed_on": "2025-05-09T19:47:15.134Z", "first_attempt": "2025-05-09T19:35:30.171Z", "last_attempt": "2025-05-09T19:47:15.134Z", "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sandals\"\\n}\\nelse if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"T-shirt\"\\n    legClothing = \"Shorts\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"Sweater\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Sneakers\"\\n}\\nelse {\\n    torsoClothing = \"Jacket\"\\n    legClothing = \"Pants\"\\n    footWear = \"Boots\"\\n}\\n\\nconsole.log(`This is what I\\'m wearing today:\\n${torsoClothing} on my torso\\n${legClothing} on my legs\\n${footWear} on my feet\\n`)'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 257, "fields": {"learner_github_id": "210299267", "learner_name": "Bedon Lancaster", "title": "String Methods", "slug": "string-methods", "attempts": 2, "complete": true, "completed_on": "2025-05-09T19:58:44.096Z", "first_attempt": "2025-05-09T19:47:16.152Z", "last_attempt": "2025-05-09T19:58:44.096Z", "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = (email.trim())\\nconst formattedPhone = (phone.replace(\" \", \"-\"))\\nconst formattedName = (customerName.toUpperCase())\\nconst containsX = (password.includes(\"x\"))\\nconst fileStart = (filename.slice(0,4))\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 258, "fields": {"learner_github_id": "202809763", "learner_name": "Dylan Johnson", "title": "String Methods", "slug": "string-methods", "attempts": 6, "complete": true, "completed_on": "2025-05-09T20:19:13.910Z", "first_attempt": "2025-05-09T19:48:33.839Z", "last_attempt": "2025-05-09T20:19:13.910Z", "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst fileName = \"vacation.jpg\"\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replaceAll(\"555 0123\", \"555-0123\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = fileName.substring(0,4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 259, "fields": {"learner_github_id": "209769569", "learner_name": "Gary Venus", "title": "Conditional Logic", "slug": "boolean-logic", "attempts": 7, "complete": true, "completed_on": "2025-05-09T20:03:36.765Z", "first_attempt": "2025-05-09T19:51:18.711Z", "last_attempt": "2025-05-09T20:03:36.765Z", "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n\\n\\n} else {\"im going to watch Netflix all day\" }'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 260, "fields": {"learner_github_id": "209769569", "learner_name": "Gary Venus", "title": "Less Than, More Than", "slug": "evaluations", "attempts": 13, "complete": true, "completed_on": "2025-05-09T21:03:26.492Z", "first_attempt": "2025-05-09T20:11:30.243Z", "last_attempt": "2025-05-09T21:03:26.492Z", "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n     torsoClothing = \"t-shirt\"\\n     legClothing = \"shorts\"\\n     footWear = \"sandals\"\\n    }\\n    else if (temperature < 95 && temperature >= 75 ) {\\n     torsoClothing = \"t-shirt\"\\n     legClothing = \"shorts\"\\n     footWear = \"sneakers\"\\n    } else if (temperature < 75 && temperature >= 50) {\\n     torsoClothing = \"sweater\"\\n     legClothing = \"pants\"\\n     footWear = \"sneakers\"\\n    } else if (temperature < 50 && temperature >= 35) {\\n     torsoClothing = \"Jacket\"\\n     legClothing = \"pants\"\\n     footWear = \"sneakers\"\\n} else  {\\n     torsoClothing = \"t-shirt\"\\n     legClothing = \"pants\"\\n     footWear = \"boots\"\\n}\\n\\nconsole.log(`you should wear ${torsoClothing}${legClothing}${footWear}`)\\n\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 261, "fields": {"learner_github_id": "210299267", "learner_name": "Bedon Lancaster", "title": "Conditional Logic", "slug": "boolean-logic", "attempts": 3, "complete": true, "completed_on": "2025-05-09T20:34:53.860Z", "first_attempt": "2025-05-09T20:15:03.202Z", "last_attempt": "2025-05-09T20:34:53.860Z", "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n   console.log(\"Yoga was fun today.\")\\n   }\\n   else { \\n    console.log(\"I watched Netflix\")\\n}'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 262, "fields": {"learner_github_id": "208865850", "learner_name": "Kolby Simons", "title": "Undefined", "slug": "github-account", "attempts": 0, "complete": true, "completed_on": "2025-05-09T20:21:30.357Z", "first_attempt": null, "last_attempt": "2025-05-09T20:21:30.357Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 263, "fields": {"learner_github_id": "208865850", "learner_name": "Kolby Simons", "title": "Undefined", "slug": "anthropic-account", "attempts": 0, "complete": true, "completed_on": "2025-05-09T20:21:30.960Z", "first_attempt": null, "last_attempt": "2025-05-09T20:21:30.960Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 264, "fields": {"learner_github_id": "208865850", "learner_name": "Kolby Simons", "title": "Undefined", "slug": "visual-studio-code", "attempts": 0, "complete": true, "completed_on": "2025-05-09T20:21:31.495Z", "first_attempt": null, "last_attempt": "2025-05-09T20:21:31.495Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 265, "fields": {"learner_github_id": "208865850", "learner_name": "Kolby Simons", "title": "Undefined", "slug": "slack-installation", "attempts": 0, "complete": true, "completed_on": "2025-05-09T20:21:32.102Z", "first_attempt": null, "last_attempt": "2025-05-09T20:21:32.102Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 266, "fields": {"learner_github_id": "202809763", "learner_name": "Dylan Johnson", "title": "Conditional Logic", "slug": "boolean-logic", "attempts": 4, "complete": true, "completed_on": "2025-05-09T20:34:39.345Z", "first_attempt": "2025-05-09T20:24:47.035Z", "last_attempt": "2025-05-09T20:34:39.345Z", "completed_code": "{'code': '// Set this to false since you slept in\\nlet iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n   console.log(\"I watched Netflix all day.\")\\n}    \\nelse {\\n   console.log(\"Yoga was fun today.\")\\n}'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 267, "fields": {"learner_github_id": "210299267", "learner_name": "Bedon Lancaster", "title": "Less Than, More Than", "slug": "evaluations", "attempts": 5, "complete": true, "completed_on": "2025-05-09T20:40:44.960Z", "first_attempt": "2025-05-09T20:36:45.109Z", "last_attempt": "2025-05-09T20:40:44.960Z", "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sandals\"\\n} else if (temperature <= 95 && temperature >= 75){\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n} else if (temperature <= 75 && temperature >= 50){\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n} else if (temperature <= 50 && temperature >= 35){\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n} else {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\"\\n}\\n\\n\\nconsole.log(`You should wear ${torsoClothing}, ${legClothing}, ${footWear}.`)'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 268, "fields": {"learner_github_id": "209552604", "learner_name": "Stephen", "title": "String Methods", "slug": "string-methods", "attempts": 2, "complete": false, "completed_on": null, "first_attempt": "2025-05-09T20:42:08.458Z", "last_attempt": "2025-05-09T20:52:49.597Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 269, "fields": {"learner_github_id": "202809763", "learner_name": "Dylan Johnson", "title": "Less Than, More Than", "slug": "evaluations", "attempts": 8, "complete": true, "completed_on": "2025-05-09T21:32:40.758Z", "first_attempt": "2025-05-09T20:43:56.309Z", "last_attempt": "2025-05-09T21:32:40.758Z", "completed_code": "{'code': 'let torsoClothing = \" \"\\nlet legClothing = \" \"\\nlet footWear = \" \"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\n   if (temperature >= 95) {\\n   torsoClothing= \"t-shirt\" \\n   legClothing= \"shorts\"\\n   footWear = \"sandals\" \\nconsole.log(\"you will wear a t-shirt. You will wear shorts. You will wear sandals.\")// Add your code here\\n}\\n   else if (temperature >= 75 && temperature <= 95) {\\n      torsoClothing = \"t-shirt\"\\n      legClothing = \"shorts\"\\n      footWear = \"sneakers\"\\nconsole.log(\"you will wear a t-shirt. You will wear shorts. You will wear sneakers.\")      \\n}\\n   else if (temperature >= 50 && temperature <= 75) {\\n      torsoClothing = \"sweater\" \\n      legClothing = \"pants\"\\n      footWear = \"sneakers\"\\nconsole.log(\"you will wear a sweater. You will wear pants. You will wear sneakers.\")\\n}\\n   else if (temperature >= 35 && temperature <= 50) {\\n      torsoClothing = \"jacket\"\\n      legClothing = \"pants\"\\n      footWear = \"sneakers\"\\nconsole.log(\"you will wear a jacket. You will wear pants. You will wear sneakers.\")\\n}\\n   else if (temperature <= 35) {\\n      torsoClothing = \"jacket\" \\n      legClothing = \"pants\"\\n      footWear = \"boots\"\\nconsole.log(\"you will wear a jacket. You will wear pants. You will wear boots.\")\\n   }\\nconsole.log(\"you will wear `${torsoClothing}, ${legClothing}, ${footwear}`\")\\n\\n\\n\\n\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 270, "fields": {"learner_github_id": "531426", "learner_name": "Michael Scott Burke", "title": "Variables Introduction", "slug": "variables-intro", "attempts": 2, "complete": true, "completed_on": "2025-05-09T20:59:35.014Z", "first_attempt": "2025-05-09T20:58:08.410Z", "last_attempt": "2025-05-09T20:59:35.014Z", "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145;\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\n\\nlet februaryBill = 164;\\nlet marchBill = 158;\\nlet aprilBill = 150;\\nlet mayBill = 170;\\nlet juneBill = 190;\\nlet julyBill = 220;\\nlet augustBill = 256;\\nlet septemberBill = 100;\\nlet octoberBill = 180;\\nlet novemberBill = 155;\\nlet decemberBill = 155;\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\nlet yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill;\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal);\\n//format in us dollars\\nconsole.log(yearlyTotal.toLocaleString(\"en-US\",{style: \"currency\", currency: \"USD\"}));\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 271, "fields": {"learner_github_id": "209552604", "learner_name": "Stephen", "title": "Conditional Logic", "slug": "boolean-logic", "attempts": 3, "complete": true, "completed_on": "2025-05-09T21:16:29.146Z", "first_attempt": "2025-05-09T20:59:38.033Z", "last_attempt": "2025-05-09T21:16:29.146Z", "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n} else {\\n    console.log(\"I watched my favorite shows on Netflix all day.\")\\n}'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 272, "fields": {"learner_github_id": "531426", "learner_name": "Michael Scott Burke", "title": "String Values", "slug": "string-interpolation", "attempts": 1, "complete": true, "completed_on": "2025-05-09T21:08:47.871Z", "first_attempt": "2025-05-09T21:08:38.244Z", "last_attempt": "2025-05-09T21:08:47.871Z", "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"MacBook Pro 2.7 GHz Quad-Core Intel Core i7\";\\nconst phone = \"iphone 15 Pro\";\\nconst television = \"Samsung 85 inch QLED\";\\nconst refrigerator = \"Jenn-Air 42-Inch Built-In Side-by-Side\";\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I have the following electronic devices. My ${television} television, my ${computer} computer, my ${refrigerator} refrigerator, and my ${phone} phone`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 273, "fields": {"learner_github_id": "209769569", "learner_name": "Gary Venus", "title": "Section Project", "slug": "variables-review", "attempts": 50, "complete": true, "completed_on": "2025-05-10T14:52:00.760Z", "first_attempt": "2025-05-09T21:28:29.505Z", "last_attempt": "2025-05-10T14:52:00.760Z", "completed_code": "{'code': '// Initialize variables for photo counts\\nlet photoStorage = \"Envelopes\"\\nconst femalePhotos = 72  // More women for our test case\\nconst malePhotos = 52    // Total will be 124\\nlet totalPhotos = 0\\nlet albumColor = \"\"\\n\\n// Calculate total photos\\ntotalPhotos= femalePhotos + malePhotos\\n\\n\\n// Determine storage type based on total\\nif (totalPhotos > 110) { \\nphotoStorage = \"Photo Album\"\\n} else if (totalPhotos < 110 && totalPhotos >= 50 ) {\\nphotoStorage = \"Shoe Box\"\\n} else { (totalPhotos < 50) \\nphotoStorage = \"Envelopes\"\\n}\\n\\n// Determine album color based on gender comparison\\nif (femalePhotos > malePhotos) {\\nalbumColor = \"plum\" }\\nelse {\\n    albumColor = \"gray\"\\n}\\n\\n// Create the expected output string using string interpolation\\nconst output =  `There are ${totalPhotos} total photos\\nThere are ${femalePhotos} photos of women\\nThere are ${malePhotos} photos of men\\nPhotos will be stored in a ${photoStorage} colored ${albumColor}`\\n\\n// Log your output\\nconsole.log(output)\\n'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 274, "fields": {"learner_github_id": "159566991", "learner_name": "Justin Lawson", "title": "Undefined", "slug": "slack-installation", "attempts": 0, "complete": true, "completed_on": "2025-05-09T21:42:48.212Z", "first_attempt": null, "last_attempt": "2025-05-09T21:42:48.212Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 275, "fields": {"learner_github_id": "210836028", "learner_name": "Herbert Pollard", "title": "Conditional Logic", "slug": "boolean-logic", "attempts": 20, "complete": true, "completed_on": "2025-05-10T00:59:45.448Z", "first_attempt": "2025-05-09T21:11:04.494Z", "last_attempt": "2025-05-10T00:59:45.448Z", "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false;\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n  console.log(\"Yoga was fun today.\");\\n} \\nelse {\\n  console.log(\"watch my favorite shows on netflix\");\\n}'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 276, "fields": {"learner_github_id": "531426", "learner_name": "Michael Scott Burke", "title": "\"Scary\" Math Operations", "slug": "math-operations", "attempts": 5, "complete": true, "completed_on": "2025-05-10T01:02:08.324Z", "first_attempt": "2025-05-10T00:57:04.008Z", "last_attempt": "2025-05-10T01:02:08.324Z", "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome +=  myIncome\\ncombinedIncome +=  spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\nnetIncome += combinedIncome\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\nconsole.log(output)\\n\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 277, "fields": {"learner_github_id": "531426", "learner_name": "Michael Scott Burke", "title": "Multi-line Strings", "slug": "multiline-strings", "attempts": 10, "complete": true, "completed_on": "2025-05-10T13:36:39.240Z", "first_attempt": "2025-05-10T01:12:29.412Z", "last_attempt": "2025-05-10T13:36:39.240Z", "completed_code": "{'code': '// Monthly income\\nconst myIncome = 5478\\nconst spouseIncome = 4028\\n\\n// Monthly expenses\\nconst phoneBill = 254\\nconst mortgage = 2161\\nconst carInsurance = 205\\nconst healthInsurance = 508\\n\\n// Create a multi-line string that shows:\\n// 1. Combined monthly income\\n// 2. Total monthly expenses\\n// 3. Net monthly income\\n\\nconst statement = `Our combined monthly income is ${myIncome + spouseIncome}.\\nOur total monthly expenses are ${phoneBill + mortgage + carInsurance + healthInsurance}.\\nOur net monthly income is ${(myIncome + spouseIncome) - (phoneBill + mortgage + carInsurance + healthInsurance)}.`\\n\\nconsole.log(statement);'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 278, "fields": {"learner_github_id": "210836028", "learner_name": "Herbert Pollard", "title": "Less Than, More Than", "slug": "evaluations", "attempts": 89, "complete": true, "completed_on": "2025-05-10T13:03:56.254Z", "first_attempt": "2025-05-10T01:44:13.105Z", "last_attempt": "2025-05-10T13:03:56.254Z", "completed_code": "{'code': 'let torsoClothing = \"\";\\nlet legClothing = \"\";\\nlet footWear = \"\";\\n\\nconst temperature = 48;\\nif (temperature >= 95) {\\n    torsoClothing = \"T-shirt\";\\n    legClothing = \"Shorts\";\\n    footWear = \"Sandals\";\\n} else if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"T-shirt\";\\n    legClothing = \"Shorts\";\\n    footWear = \"Sneakers\";\\n} else if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"Sweater\";\\n    legClothing = \"Pants\";\\n    footWear = \"Sneakers\";\\n} else if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"Jacket\";\\n    legClothing = \"Pants\";\\n    footWear = \"Sneakers\";\\n} \\nif (temperature < 35) {\\n    torsoClothing = \"Jacket\";\\n    legClothing = \"Pants\";\\n    footWear = \"Boots\";\\n}\\n\\n// Final Output\\nconsole.log(`When the temperature is ${temperature} degrees, you should wear:`);\\nconsole.log(`Top: ${torsoClothing}`);\\nconsole.log(`Bottom: ${legClothing}`);\\nconsole.log(`Footwear: ${footWear}`);'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 279, "fields": {"learner_github_id": "531426", "learner_name": "Michael Scott Burke", "title": "Undefined", "slug": "github-account", "attempts": 0, "complete": true, "completed_on": "2025-05-10T01:44:30.724Z", "first_attempt": null, "last_attempt": "2025-05-10T01:44:30.724Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 280, "fields": {"learner_github_id": "531426", "learner_name": "Michael Scott Burke", "title": "Undefined", "slug": "anthropic-account", "attempts": 0, "complete": true, "completed_on": "2025-05-10T01:44:31.847Z", "first_attempt": null, "last_attempt": "2025-05-10T01:44:31.847Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 281, "fields": {"learner_github_id": "531426", "learner_name": "Michael Scott Burke", "title": "Undefined", "slug": "visual-studio-code", "attempts": 0, "complete": true, "completed_on": "2025-05-10T01:44:32.518Z", "first_attempt": null, "last_attempt": "2025-05-10T01:44:32.518Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 282, "fields": {"learner_github_id": "531426", "learner_name": "Michael Scott Burke", "title": "Undefined", "slug": "slack-installation", "attempts": 0, "complete": true, "completed_on": "2025-05-10T01:44:33.168Z", "first_attempt": null, "last_attempt": "2025-05-10T01:44:33.168Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 283, "fields": {"learner_github_id": "211104917", "learner_name": "Dale Hobbs", "title": "Undefined", "slug": "github-account", "attempts": 0, "complete": true, "completed_on": "2025-05-10T20:04:58.917Z", "first_attempt": null, "last_attempt": "2025-05-10T20:04:58.917Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 284, "fields": {"learner_github_id": "211104917", "learner_name": "Dale Hobbs", "title": "Undefined", "slug": "anthropic-account", "attempts": 0, "complete": true, "completed_on": "2025-05-10T20:04:59.574Z", "first_attempt": null, "last_attempt": "2025-05-10T20:04:59.574Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 285, "fields": {"learner_github_id": "211104917", "learner_name": "Dale Hobbs", "title": "Undefined", "slug": "visual-studio-code", "attempts": 0, "complete": true, "completed_on": "2025-05-10T20:05:00.318Z", "first_attempt": null, "last_attempt": "2025-05-10T20:05:00.318Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 286, "fields": {"learner_github_id": "211104917", "learner_name": "Dale Hobbs", "title": "Undefined", "slug": "slack-installation", "attempts": 0, "complete": true, "completed_on": "2025-05-10T20:05:00.837Z", "first_attempt": null, "last_attempt": "2025-05-10T20:05:00.837Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 287, "fields": {"learner_github_id": "211104917", "learner_name": "Dale Hobbs", "title": "Variables Introduction", "slug": "variables-intro", "attempts": 4, "complete": true, "completed_on": "2025-05-10T09:34:34.467Z", "first_attempt": "2025-05-10T09:32:49.540Z", "last_attempt": "2025-05-10T09:34:34.467Z", "completed_code": "{'code': '// January\\'s electric bill declared with `let`\\nlet januaryBill = 145\\n\\n// Declare variables for the remaining months with the `let` keyword.\\n// Give them any numeric value you want.\\nlet februaryBill = 120\\nlet marchBill = 200\\nlet aprilBill = 100\\nlet mayBill = 80\\nlet juneBill = 410\\nlet julyBill = 350\\nlet augustBill = 290\\nlet septemberBill = 153\\nlet octoberBill = 40\\nlet novemberBill = 90\\nlet decemberBill = 200\\n\\n/*\\n   Then calculate the total yearly charges by declaring a constant\\n   variable named \"yearlyTotal\" that is the sum of all twelve months.\\n   Use the `const` keyword for this variable.\\n*/\\n\\nconst yearlyTotal = januaryBill + februaryBill + marchBill + aprilBill + mayBill + juneBill + julyBill + augustBill + septemberBill + octoberBill + novemberBill + decemberBill\\n\\n// console.log will print the value of the variable to the console.\\n// The \"Run Code\" button will allow you to see the output of this code.\\nconsole.log(yearlyTotal)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 288, "fields": {"learner_github_id": "211104917", "learner_name": "Dale Hobbs", "title": "String Values", "slug": "string-interpolation", "attempts": 1, "complete": true, "completed_on": "2025-05-10T20:36:48.301Z", "first_attempt": "2025-05-10T20:36:48.300Z", "last_attempt": "2025-05-10T20:36:48.301Z", "completed_code": "{'code': '// Create variables for your electronics\\nconst computer = \"a\"\\nconst phone = \"b\"\\nconst television = \"c\"\\nconst refrigerator = \"d\"\\n\\n// Use string interpolation to create a sentence with all electronics\\nconst allElectronics = `I play games on ${computer} and text on my ${phone}. My TV is ${television} and my fridge is ${refrigerator}.`\\n\\n// Your sentence should look like:\\n// \"I have the following electronic devices. My xxx television, my xxx computer, my xxx refrigerator, and my xxx phone\"\\n\\nconsole.log(allElectronics)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 289, "fields": {"learner_github_id": "211104917", "learner_name": "Dale Hobbs", "title": "\"Scary\" Math Operations", "slug": "math-operations", "attempts": 1, "complete": true, "completed_on": "2025-05-10T20:40:37.995Z", "first_attempt": "2025-05-10T20:40:37.994Z", "last_attempt": "2025-05-10T20:40:37.995Z", "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = 0\\ncombinedIncome += myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = 0\\nnetIncome += combinedIncome - internetBill - waterBill - electricBill - fuelExpenses - foodExpenses\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 290, "fields": {"learner_github_id": "211104917", "learner_name": "Dale Hobbs", "title": "Multi-line Strings", "slug": "multiline-strings", "attempts": 17, "complete": false, "completed_on": null, "first_attempt": "2025-05-10T10:07:32.855Z", "last_attempt": "2025-05-11T05:36:39.294Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 291, "fields": {"learner_github_id": "210622487", "learner_name": "James Freeman", "title": "String Methods", "slug": "string-methods", "attempts": 1, "complete": true, "completed_on": "2025-05-10T19:07:44.902Z", "first_attempt": "2025-05-10T19:07:44.901Z", "last_attempt": "2025-05-10T19:07:44.902Z", "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail =  email.trim()\\nconst formattedPhone = phone.replace(\" \", \"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0, 4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 292, "fields": {"learner_github_id": "211104917", "learner_name": "Dale Hobbs", "title": "String Methods", "slug": "string-methods", "attempts": 1, "complete": true, "completed_on": "2025-05-11T04:04:34.841Z", "first_attempt": "2025-05-11T04:04:34.840Z", "last_attempt": "2025-05-11T04:04:34.841Z", "completed_code": "{'code': '// Remove spaces from the beginning and end of the email\\nconst email = \"   hello@email.com   \"\\n\\n// Replace the space with a hyphen in the phone number\\nconst phone = \"555 0123\"\\n\\n// Convert the name to all uppercase\\nconst customerName = \"john\"\\n\\n// Check if the password contains the letter \"x\"\\nconst password = \"SecurePass\"\\n\\n// Get the first 4 characters of the filename\\nconst filename = \"vacation.jpg\"\\n\\n// Your code here (use only ONE string method for each task):\\nconst cleanEmail = email.trim()\\nconst formattedPhone = phone.replace(\" \",\"-\")\\nconst formattedName = customerName.toUpperCase()\\nconst containsX = password.includes(\"x\")\\nconst fileStart = filename.slice(0,4)\\n\\n// These allow you to check your results when you click the \"Run Code\" button\\nconsole.log(cleanEmail)\\nconsole.log(formattedPhone)\\nconsole.log(formattedName)\\nconsole.log(containsX)\\nconsole.log(fileStart)\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 293, "fields": {"learner_github_id": "211104917", "learner_name": "Dale Hobbs", "title": "Conditional Logic", "slug": "boolean-logic", "attempts": 1, "complete": true, "completed_on": "2025-05-11T04:05:26.314Z", "first_attempt": "2025-05-11T04:05:26.314Z", "last_attempt": "2025-05-11T04:05:26.314Z", "completed_code": "{'code': '// Set this to false since you slept in\\nconst iWokeUpEarly = false\\n\\n// Use an if/else statement to output the appropriate message\\nif (iWokeUpEarly === true) {\\n    console.log(\"Yoga was fun today.\")\\n}\\nelse {\\n    console.log(\"Why am I such a failure\")\\n}'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 294, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Functions Calling Functions", "slug": "functions-calling-functions", "attempts": 3, "complete": true, "completed_on": "2025-05-11T03:49:39.404Z", "first_attempt": "2025-05-11T03:45:36.708Z", "last_attempt": "2025-05-11T03:49:39.404Z", "completed_code": "{'code': '// 1. Calculate base points (time * 100 + targets * 50)\\nconst calculateBasePoints = (time, targets) => {\\n    const basePoints = (time * 100) + (targets * 50);\\n    return basePoints;\\n}\\n\\n// 2. Calculate bonus (if targets > 10, bonus = 1000, otherwise 0)\\nconst calculateBonus = (targets) => {\\n    let bonusPoints = 0;\\n    if (targets > 10) {\\n        bonusPoints += 1000;\\n        return bonusPoints\\n    } else {\\n        return bonusPoints\\n    }\\n}\\n\\n\\n// 3. Calculate final score (base points + bonus)\\nconst calculateFinalScore = (time, targets) => {\\n    // Get the base points and bonus points\\n    const pointSum = calculateBasePoints(time, targets) + calculateBonus(targets)\\n    // Add the results together and return the sum\\n    return pointSum\\n}\\n\\n/*\\n    Invoke calculateFinalScore with time=2 and targets=5,\\n    store the result, then log it\\n*/\\n\\nlet finalScore = calculateFinalScore(2, 5)\\nconsole.log(finalScore)\\n\\nfinalScore = calculateFinalScore(10, 12)\\nconsole.log(finalScore)\\n\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 295, "fields": {"learner_github_id": "211104917", "learner_name": "Dale Hobbs", "title": "Less Than, More Than", "slug": "evaluations", "attempts": 2, "complete": true, "completed_on": "2025-05-11T04:23:04.323Z", "first_attempt": "2025-05-11T04:21:47.457Z", "last_attempt": "2025-05-11T04:23:04.323Z", "completed_code": "{'code': 'let torsoClothing = \"\"\\nlet legClothing = \"\"\\nlet footWear = \"\"\\n\\nconst temperature = 48\\n\\n/*\\n   The first condition is already written for you.\\n   Add your `else if` and `else` conditions below this one.\\n*/\\nif (temperature >= 95) {\\n   torsoClothing = \"t-shirt\"\\n   legClothing = \"shorts\"\\n   footWear = \"sandals\"\\n} else if (temperature < 95 && temperature >= 75) {\\n    torsoClothing = \"t-shirt\"\\n    legClothing = \"shorts\"\\n    footWear = \"sneakers\"\\n} else if (temperature < 75 && temperature >= 50) {\\n    torsoClothing = \"sweater\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n} else if (temperature < 50 && temperature >= 35) {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"sneakers\"\\n} else {\\n    torsoClothing = \"jacket\"\\n    legClothing = \"pants\"\\n    footWear = \"boots\"\\n}\\n\\nlet outfit = `Today I\\'m wearing ${torsoClothing}, ${legClothing}, and ${footWear}.`\\n\\nconsole.log(outfit)\\n\\n\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 296, "fields": {"learner_github_id": "211104917", "learner_name": "Dale Hobbs", "title": "Section Project", "slug": "variables-review", "attempts": 18, "complete": false, "completed_on": null, "first_attempt": "2025-05-11T04:36:34.010Z", "last_attempt": "2025-05-11T05:08:25.392Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 297, "fields": {"learner_github_id": "211104917", "learner_name": "Dale Hobbs", "title": "Introduction to HTML", "slug": "html-intro", "attempts": 318, "complete": true, "completed_on": "2025-05-11T05:19:27.608Z", "first_attempt": "2025-05-11T05:15:13.468Z", "last_attempt": "2025-05-11T05:19:27.608Z", "completed_code": "{'files': {'index.html': \"<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My Developer Journey</title>\\n</head>\\n<body>\\n      <!-- Your content goes here -->\\n<h1>How I Became A Software Developer</h1>\\n<article> \\n  <h2>Nashville Software School</h2>\\n  <section>I love attending NSS! It is the most fun I've experienced.</section>\\n  <section>\\n    <p>I learned the following skills</p>\\n    <ol>\\n      <li>Variables</li>\\n      <li>Arrays</li>\\n      <li>Objects</li>\\n      <li>Functions</li>\\n      <li>HTML</li>\\n      <li>CSS</li>\\n      </ol>\\n  </section>\\n</article>\\n</body>\\n</html>\", 'styles.css': 'body {\\n  font-family: Arial, sans-serif;\\n  margin: 2rem;\\n  line-height: 1.6;\\n}\\n\\n/* Add your styles here */\\n'}}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 298, "fields": {"learner_github_id": "211104917", "learner_name": "Dale Hobbs", "title": "Introduction to HTML", "slug": "html-elements", "attempts": 2, "complete": false, "completed_on": null, "first_attempt": "2025-05-11T05:19:33.319Z", "last_attempt": "2025-05-11T05:19:33.370Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 299, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "title": "Review and Practice", "slug": "functions-review", "attempts": 18, "complete": true, "completed_on": "2025-05-11T06:20:51.150Z", "first_attempt": "2025-05-11T05:35:09.308Z", "last_attempt": "2025-05-11T06:20:51.150Z", "completed_code": "{'code': '// 1. Create a greeting function\\nconst createGreeting = (name, time) => {\\n    // If time is \"morning\" OR the name starts with \"A\", return \"Good morning, [name]!\"\\n    // If time is \"afternoon\", return \"Good afternoon, [name]!\"\\n    // Otherwise, return \"Hello, [name]!\"\\n    const letterA = name.includes(\"A\")\\n    // console.log(letterA)\\n    if (time == \"morning\" || letterA === true) {\\n        return `Good morning, ${name}!`\\n    } else if (time == \"afternoon\") {\\n        return `Good afternoon, ${name}!`\\n    } else {\\n        return `Hello, ${name}!`\\n    }\\n\\n\\n}\\n\\n\\n// 2. Create a joke function\\nconst tellJoke = (topic) => {\\n    // If topic is \"weather\", return the weather joke\\n    // If topic is \"animals\", return the animals joke\\n    // Otherwise, return the default joke\\n    if (topic == \"weather\") {\\n        return `What do you call a stormy robot? A thunder-bot!`\\n    } else if (topic == \"animals\") {\\n        return `Why did the robot go to the zoo? To study creature features!`\\n    } else {\\n        return `Why was the robot tired? Because it had too many bytes!`\\n    }\\n}\\n\\n// 3. Create a function to greet multiple people\\nconst greetPeople = (people, time) => {\\n\\n    let greetings = [];\\n\\n    for (let person of people) {\\n        newGreetings = createGreeting(person)\\n        greetings.push(newGreetings)\\n    }\\n\\n    \\n\\n    return greetings\\n}\\n\\n// 4. Create a robot interaction function\\nconst robotInteraction = (name, time, topic) => {\\n    // Get the greeting\\n    let message = createGreeting(name, time);\\n    // Get the joke\\n    let joke = tellJoke(topic);\\n    // Return both together\\n    let humorousGreeting = `${message} ${joke}`\\n    return humorousGreeting\\n}\\n\\n// Test your functions\\n// Create a greeting\\nconst greeting = createGreeting(\"Sam\", \"evening\");\\nconsole.log(greeting);\\nconst greeting2 = createGreeting(\"Jamie\", \"morning\");\\nconsole.log(greeting2);\\nconst greeting3 = createGreeting(\"Alex\", \"evening\");\\nconsole.log(greeting3);\\n\\n// Tell a joke\\nconst joke = tellJoke(\"weather\");\\nconsole.log(joke);\\n\\n// Greet multiple people\\nconst people = [\"Taylor\", \"Jamie\", \"Alex\"];\\nconst greetings = greetPeople(people, \"afternoon\");\\nconsole.log(greetings);\\n\\n// Create a complete interaction\\nconst interaction = robotInteraction(\"Taylor\", \"afternoon\", \"animals\");\\nconsole.log(interaction);\\n'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 300, "fields": {"learner_github_id": "204808164", "learner_name": "Erika Hughes", "title": "\"Scary\" Math Operations", "slug": "math-operations", "attempts": 13, "complete": true, "completed_on": "2025-05-11T15:31:01.408Z", "first_attempt": "2025-05-11T14:40:05.296Z", "last_attempt": "2025-05-11T15:32:54.752Z", "completed_code": "{'code': \"// Your monthly income\\nconst myIncome = 4388\\n\\n// Your husband's monthly income\\nconst spouseIncome = 3512\\n\\n// Monthly bills\\nconst internetBill = 158\\nconst waterBill = 68\\nconst electricBill = 129\\nconst fuelExpenses = 295\\nconst foodExpenses = 503\\n\\n// Calculate combined income\\nlet combinedIncome = myIncome + spouseIncome\\n\\n// Calculate net income (combined income minus all expenses)\\nlet netIncome = combinedIncome\\nnetIncome -= internetBill\\nnetIncome -= waterBill\\nnetIncome -= electricBill\\nnetIncome -= fuelExpenses\\nnetIncome -= foodExpenses\\n\\n\\n// Create the output string using string interpolation\\nconst output = `Our combined monthly income is ${combinedIncome}. Our net monthly income is ${netIncome}.`\\n\\nconsole.log(output)\\n\"}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 301, "fields": {"learner_github_id": "204808164", "learner_name": "Erika Hughes", "title": "Multi-line Strings", "slug": "multiline-strings", "attempts": 5, "complete": false, "completed_on": null, "first_attempt": "2025-05-11T15:34:57.056Z", "last_attempt": "2025-05-11T17:14:52.498Z", "completed_code": null, "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 302, "fields": {"learner_github_id": "204808164", "learner_name": "Erika Hughes", "title": "String Methods", "slug": "string-methods", "attempts": 4, "complete": false, "completed_on": null, "first_attempt": "2025-05-11T17:57:03.787Z", "last_attempt": "2025-05-11T18:02:44.533Z", "completed_code": null, "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 303, "fields": {"learner_github_id": "209533182", "learner_name": "Patrick McIsaac", "title": "Toy Collection", "slug": "leonids-arrays", "attempts": 1, "complete": true, "completed_on": "2025-05-11T18:24:18.562Z", "first_attempt": "2025-05-11T18:24:18.559Z", "last_attempt": "2025-05-11T18:24:18.562Z", "completed_code": "{'code': 'const toyInventory = [\\n    {\\n        name: \"doll\",\\n        manufacturer: \"toy town\",\\n        priceInDollars: 23\\n    },\\n    {\\n        name: \"Rock Set\",\\n        manufacturer: \"toy nation\",\\n        priceInDollars: 33\\n    },\\n    {\\n        name: \"car\",\\n        manufacturer: null,\\n        priceInDollars: 20\\n    }\\n]'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 304, "fields": {"learner_github_id": "209533182", "learner_name": "Patrick McIsaac", "title": "Displaying Toy Properties", "slug": "leonids-iteration", "attempts": 1, "complete": true, "completed_on": "2025-05-11T18:29:47.999Z", "first_attempt": "2025-05-11T18:29:47.996Z", "last_attempt": "2025-05-11T18:29:47.999Z", "completed_code": "{'code': \"const toyInventory = [\\n    {\\n        name: 'Wooden Train',\\n        pricInDollars: 12\\n    },\\n    {\\n        name: 'Stuffed Rabbit',\\n        pricInDollars: 13\\n    },\\n    {\\n        name: 'Painted Kite',\\n        pricInDollars: 133\\n    }\\n]\\n\\nfor (const toy of toyInventory){\\n    console.log(toy.name)\\n}\"}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 305, "fields": {"learner_github_id": "209533182", "learner_name": "Patrick McIsaac", "title": "New Toys", "slug": "leonids-arrays-push", "attempts": 6, "complete": true, "completed_on": "2025-05-11T18:34:43.717Z", "first_attempt": "2025-05-11T18:32:41.209Z", "last_attempt": "2025-05-11T18:40:25.767Z", "completed_code": "{'code': 'const toyInventory = []\\n\\ntoyInventory.push(\\'Wooden Train\\')\\ntoyInventory.push(\"Stuffed Rabbit\")\\ntoyInventory.push(\"Painted Kite\")\\n\\nconst toyInventoryCollection = []\\n\\ntoyInventoryCollection.push({\\n    name:\"Wooden Train\",\\n    priceInDollars: 30\\n})\\ntoyInventoryCollection.push({\\n    name:\"Stuffed Rabbit\",\\n    priceInDollars: 25\\n})\\ntoyInventoryCollection.push({\\n    name:\"Painted Kite\",\\n    priceInDollars: 20\\n})'}", "used_solution": false}}, {"model": "LearningAPI.foundationsexercise", "pk": 306, "fields": {"learner_github_id": "209533182", "learner_name": "Patrick McIsaac", "title": "Helping Customers Find the Right Toy", "slug": "leonids-conditionals", "attempts": 7, "complete": true, "completed_on": "2025-05-11T18:43:27.920Z", "first_attempt": "2025-05-11T18:38:43.684Z", "last_attempt": "2025-05-11T18:43:27.920Z", "completed_code": "{'code': '// Define the phones array\\nconst phones = [\\n  {\\n    id: 1,\\n    name: \"iPhone\",\\n    maker: \"Apple, Inc.\",\\n    operatingSystem: \"iOS\",\\n    price: 900,\\n    weight: 1.2\\n  },\\n  {\\n    id: 2,\\n    name: \"Galaxy\",\\n    maker: \"Samsung\",\\n    operatingSystem: \"Android\",\\n    price: 600,\\n    weight: 1.4\\n  },\\n  {\\n    id: 3,\\n    name: \"Pixel\",\\n    maker: \"Google\",\\n    operatingSystem: \"Android\",\\n    price: 750,\\n    weight: 1.3\\n  }\\n]\\n\\n// Define the ID of the phone to find\\nconst phoneToFind = 2\\n\\n// Iterate through the phones array and display only the phone with the matching ID\\nfor (const phone of phones) {\\n  // Only one phone will cause the condition below to evaluate to true\\n  if (phone.id === phoneToFind) {\\n    phone.weight = phone.weight + 0.4\\n    console.log(\"The \" + phone.maker + \" \" + phone.name + \" costs \" + phone.price + \" dollars. It weighs \" + phone.weight.toFixed(1) + \" grams.\")\\n  }\\n}'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 307, "fields": {"learner_github_id": "209533182", "learner_name": "Patrick McIsaac", "title": "Toy Catalog", "slug": "leonids-string-interpolation", "attempts": 7, "complete": true, "completed_on": "2025-05-11T19:33:57.764Z", "first_attempt": "2025-05-11T19:28:12.546Z", "last_attempt": "2025-05-11T19:33:57.764Z", "completed_code": "{'code': 'const toyCatalog = [\\n  { name: \"Wooden Train\", priceInDollars: 30, color: \"Red\" },\\n  { name: \"Stuffed Rabbit\", priceInDollars: 25, color: \"Gray\" },\\n  { name: \"Painted Kite\", priceInDollars: 20, color: \"Blue\" }\\n];\\nconst displayCatalog = [];\\nfor (const toy of toyCatalog) {\\n  const line = `Toy: ${toy.name} | Price: $${toy.priceInDollars} | Color: ${toy.color}`;\\n  displayCatalog.push(line);\\n}'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 308, "fields": {"learner_github_id": "209533182", "learner_name": "Patrick McIsaac", "title": "Raising Prices", "slug": "leonids-iteration-update", "attempts": 7, "complete": true, "completed_on": "2025-05-11T19:43:13.666Z", "first_attempt": "2025-05-11T19:39:30.211Z", "last_attempt": "2025-05-11T19:43:13.666Z", "completed_code": "{'code': 'const toyCatalog = [\\n  { name: \"Wooden Train\", priceInDollars: 30, color: \"Red\" },\\n  { name: \"Stuffed Rabbit\", priceInDollars: 25, color: \"Gray\" },\\n  { name: \"Painted Kite\", priceInDollars: 20, color: \"Blue\" }\\n];\\n\\nconst displayCatalog = []\\n\\nfor(const toy of toyCatalog){\\n    const newPrice = (toy.priceInDollars * 1.05).toFixed(2)\\n    const line = `Toy: ${toy.name} | Price: $${newPrice} | Color: ${toy.color}`\\n    displayCatalog.push(line)\\n    console.log(newPrice)\\n}\\n\\nconsole.log(displayCatalog)'}", "used_solution": true}}, {"model": "LearningAPI.foundationsexercise", "pk": 309, "fields": {"learner_github_id": "209533182", "learner_name": "Patrick McIsaac", "title": "Finding the Flowers", "slug": "flower-shop", "attempts": 12, "complete": false, "completed_on": null, "first_attempt": "2025-05-11T20:10:46.303Z", "last_attempt": "2025-05-11T22:15:44.869Z", "completed_code": null, "used_solution": true}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 1, "fields": {"learner_github_id": "166757460", "learner_name": "", "cohort_type": "Day", "cohort_number": 71}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 2, "fields": {"learner_github_id": "218592", "learner_name": "", "cohort_type": "Day", "cohort_number": 74}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 3, "fields": {"learner_github_id": "40916902", "learner_name": "", "cohort_type": "Night", "cohort_number": 24}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 4, "fields": {"learner_github_id": "47334784", "learner_name": "", "cohort_type": "Day", "cohort_number": 77}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 5, "fields": {"learner_github_id": "115299265", "learner_name": "", "cohort_type": "Day", "cohort_number": 77}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 6, "fields": {"learner_github_id": "209704508", "learner_name": "Lea Edwards", "cohort_type": "Evening", "cohort_number": 31}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 7, "fields": {"learner_github_id": "125929943", "learner_name": "", "cohort_type": "Day", "cohort_number": 73}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 9, "fields": {"learner_github_id": "210836028", "learner_name": "Herbert Pollard", "cohort_type": "Day", "cohort_number": 78}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 10, "fields": {"learner_github_id": "207940958", "learner_name": "", "cohort_type": "Evening", "cohort_number": 31}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 11, "fields": {"learner_github_id": "210622487", "learner_name": "", "cohort_type": "Evening", "cohort_number": 31}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 12, "fields": {"learner_github_id": "204808164", "learner_name": "", "cohort_type": "Day", "cohort_number": 78}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 13, "fields": {"learner_github_id": "176324848", "learner_name": "", "cohort_type": "Day", "cohort_number": 72}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 14, "fields": {"learner_github_id": "190438557", "learner_name": "", "cohort_type": "Evening", "cohort_number": 31}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 15, "fields": {"learner_github_id": "209533182", "learner_name": "Patrick McIsaac", "cohort_type": "day", "cohort_number": 0}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 16, "fields": {"learner_github_id": "198821962", "learner_name": "Michael Scott Burke", "cohort_type": "day", "cohort_number": 0}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 17, "fields": {"learner_github_id": "210299267", "learner_name": "Bedon Lancaster", "cohort_type": "Day", "cohort_number": 77}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 18, "fields": {"learner_github_id": "202809763", "learner_name": "Dylan Johnson", "cohort_type": "day", "cohort_number": 0}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 19, "fields": {"learner_github_id": "209769569", "learner_name": "Gary Venus", "cohort_type": "day", "cohort_number": 0}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 20, "fields": {"learner_github_id": "208382732", "learner_name": "Gavin Beaudet", "cohort_type": "day", "cohort_number": 0}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 21, "fields": {"learner_github_id": "209552604", "learner_name": "Stephen", "cohort_type": "day", "cohort_number": 0}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 22, "fields": {"learner_github_id": "208865850", "learner_name": "Kolby Simons", "cohort_type": "day", "cohort_number": 0}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 23, "fields": {"learner_github_id": "531426", "learner_name": "Michael Scott Burke", "cohort_type": "day", "cohort_number": 0}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 25, "fields": {"learner_github_id": "159566991", "learner_name": "Justin Lawson", "cohort_type": "day", "cohort_number": 0}}, {"model": "LearningAPI.foundationslearnerprofile", "pk": 26, "fields": {"learner_github_id": "211104917", "learner_name": "Dale Hobbs", "cohort_type": "day", "cohort_number": 0}}]